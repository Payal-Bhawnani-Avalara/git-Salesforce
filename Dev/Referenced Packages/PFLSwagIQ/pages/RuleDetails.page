<apex:page sidebar="false" docType="html-5.0" title="SwagIQ Rule" showheader="true" standardController="PFLSwagIQ__Rule__c"
           extensions="PFLSwagIQ.RuleController">
    <script>
        window.onload = function () {
            var meta = document.createElement('meta');
            meta.httpEquiv = "X-UA-Compatible";
            meta.content = "IE=edge";
            document.getElementsByTagName('head')[0].appendChild(meta);
        };

    </script>
    <apex:stylesheet value="{!URLFOR($Resource.PFLSwagIQ__SLDS100, 'assets/styles/salesforce-lightning-design-system-vf.min.css')}"/>
    <link href="{!URLFOR($Resource.chosenCSS, 'chosen.css')}" rel="stylesheet"/>
    <link rel="stylesheet" href="{!URLFOR($Resource.jqUI, 'jquery-ui.css')}"/>
    <link rel="stylesheet" href="{!URLFOR($Resource.select2, 'css/select2.min.css')}"/>
    <link rel="stylesheet" href="{!URLFOR($Resource.jquery, 'datepicker/datetimepicker.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.PFLSwagIQ__swagiq, 'swag-iq/css/styles.css')}"/>
    <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__jQuery, 'jquery-min.js')}"/>
    <script src="{!URLFOR($Resource.json2)}"></script>
    <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__swagiq, 'swag-iq/js/numeral.min.js')}"/>
    <script src="{!URLFOR($Resource.chosenjs)}"></script>
    <script src="{!URLFOR($Resource.select2, 'js/select2.full.min.js')}"></script>
    <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__jqUI, 'jquery-ui.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__boostrapsf1, 'js/validator.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__jQuery, 'jqMultiSelect/js/jquery.multiselect.min.js')}"/>
    <script src="{!URLFOR($Resource.jquery, 'datepicker/datepicker.js')}"></script>
    <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__boostrapsf1, 'js/bootstrap.js')}"/>


    <apex:includeScript value="{!$Resource.PFLSwagIQ__SLDS100}/svgfix/svg4everybody.legacy.min.js"/>

    <script>
        svg4everybody();

    </script>

    <style>

        select {
            -webkit-appearance: none;
        }

        img {
            max-width: inherit;
        }

        .pfl-swagiq img {
            max-width: 100%;
        }

        }

        .spinner {
            margin: 100px auto 0;
            width: 70px;
            text-align: center;
        }

        .spinner > div {
            width: 18px;
            height: 18px;
            background-color: #2A94D6;

            border-radius: 100%;
            display: inline-block;
            -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;
            animation: sk-bouncedelay 1.4s infinite ease-in-out both;
        }

        .spinner .bounce1 {
            -webkit-animation-delay: -0.32s;
            animation-delay: -0.32s;
        }

        .spinner .bounce2 {
            -webkit-animation-delay: -0.16s;
            animation-delay: -0.16s;
        }

        @-webkit-keyframes sk-bouncedelay {
            0%,
            80%,
            100% {
                -webkit-transform: scale(0)
            }

            40% {
                -webkit-transform: scale(1.0)
            }
        }

        @keyframes sk-bouncedelay {
            0%,
            80%,
            100% {
                -webkit-transform: scale(0);
                transform: scale(0);
            }

            40% {
                -webkit-transform: scale(1.0);
                transform: scale(1.0);
            }
        }

        .block--paddings {
            margin-top: -2px;
            padding-left: 2px;
        }

        .dimmer {
            display: none;
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 49;
            vertical-align: middle;
            text-align: center;
            color: #fff;
            padding-top: 5em;
        }

        .noSidebarCell {
            padding: 0 !important;
        }

        .dimmer-content {
            font-size: 1.4em;
            font-weight: bold;
        }

        .slds .slds-icon.slds-icon-custom--small {
            width: 16px;
            height: 16px;
        }

        .field-error-message {
            display: block;
            background: #f7e7e7 !important;
            min-height: auto !important;
            border: none !important;
            margin-bottom: 5px;
        }

        .field-error-message.bg-success {
            background: #dff0d8 !important;
        }

        span.select2-dropdown.select2-dropdown--below,
        span.select2-dropdown.select2-dropdown--above {
            margin-left: 0.84em;
        }

        span.select2-results ul.select2-results__options li.select2-results__option {
            margin-left: 0;
        }

        span.select2-selection.select2-selection--single,
        .select2-container--default .select2-selection--multiple {

            height: auto;
            border-radius: 5px;
            border: 1px solid #d8dde6;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 34px;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 34px;
        }

        #select-gift-sender-User + .select2-container {
            width: 100% !important;
        }

        .dropdown #gift-wrapper,
        .slds-dropdown-trigger--dropdown .dropdown-container--wrapper {
            display: none;
        }

        .dropdown.open #gift-wrapper,
        .slds-dropdown-trigger--dropdown.open .dropdown-container--wrapper {
            display: block;
        }

        .slds-dropdown-trigger--dropdown {
            position: relative;
            display: inline-block;
        }

        .arrow-down {
            width: 0;
            height: 0;
            border-left: 5px solid transparent;
            border-right: 5px solid transparent;
            border-top: 5px solid #fff;
            display: inline-block;
        }

        .select2-container--default .select2-selection--multiple .select2-selection__choice {
            margin-right: 3px;
        }

        .select2-container--default .select2-selection--multiple .select2-selection__clear {
            margin-right: 0;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            min-height: 34px;
        }

        .block-title__logo {
            width: 4rem;
            height: 4rem;
            display: inline-block;
            vertical-align: middle;
            background-size: 4rem;
            position: relative;
            background-image: url("{!URLFOR($Resource.boostrapsf1, 'icons/swagiq/pfllogo128.png')}");
        }

        .pfl-swagiq .block-title {
            font-family: "Salesforce Sans", Arial, sans-serif;
        }

        @media (min-width: 1200px) {
            .pfl-swagiq .radio-padded {
                padding-left: 50px;
            }
        }

        .pfl-swagiq .row-details-form,
        .slds-form-element__label {
            font-size: 0.910rem !important;
            font-family: "ProximaNovaSoft-Regular", Calibri, "Gill Sans", "Gill Sans MT", Candara, Segoe, "Segoe UI", Arial, sans-serif;
        }

        .pfl-swagiq .slds-button {
            font-weight: 700;
            font-size: 13px;
        }

        .pfl-swagiq .slds-dropdown__item {
            font-size: 0.900rem;
            margin-left: 0;
        }

        @media all and (-ms-high-contrast: none) {
            .ie-fix {
                margin-left: 0 !important;
            }
        }

        .bPageHeader#AppBodyHeader {
            font-size: 12px;
        }

        .pfl-swagiq.readPage .slds-input[disabled],
        .pfl-swagiq.readPage select.slds-select[disabled] {
            background-color: #f4f6f9 !important;
            border: none !important;
            color: #3c3d3e;
            -webkit-user-select: all;
            -moz-user-select: all;
            -ms-user-select: all;
            user-select: all;
        }

        .pfl-swagiq.readPage .slds-input[disabled]:hover,
        .pfl-swagiq.readPage .slds-input[disabled],
        .pfl-swagiq.readPage select.slds-select[disabled],
        .pfl-swagiq.readPage select.slds-select[disabled]:hover {
            cursor: text;
            width: initial;
        }

        .pfl-swagiq.readPage .element-dock-fill,
        .pfl-swagiq.readPage .slds-input[disabled],
        .pfl-swagiq.readPage select.slds-select[disabled] {
            font-size: 0.910rem;
            font-family: "ProximaNovaSoft-Regular", Calibri, "Gill Sans", "Gill Sans MT", Candara, Segoe, "Segoe UI", Arial, sans-serif;
        }

        .pfl-swagiq.readPage span.field {
            padding-left: 12px;
            display: block;
        }

        .pfl-swagiq.readPage .slds-select_container:before,
        .pfl-swagiq.readPage .slds-select_container:after {
            border: none;
        }

        .pfl-swagiq.readPage label.field-label.slds-form-element__label {
            margin-right: 0;
        }

        .field.slds-input[readonly="readonly"] {
            border: none;
            background: transparent;
        }

        .optionImg {
            width: 40px;
            height: 40px;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            max-width: 100%;
            border: 0;
        }

        .optionBlock {
            display: inline-block;
            vertical-align: middle;
        }

        .optionBlockText {
            display: inline-block;
            vertical-align: middle;
            width: 90%;
            font-size: 10pt;
            padding-left: 10px;

        }

        .optionBlockText .slds-truncate {
            margin-top: 0px;
            margin-bottom: 0px;
        }

        .pfl-swagiq .slds-checkbox--toggle [type='checkbox']:checked + .slds-checkbox--faux::after,
        .pfl-swagiq .slds-checkbox--toggle [type='checkbox']:checked ~ .slds-checkbox--faux::after {
            line-height: 190%;
        }

        .pfl-swagiq .slds-checkbox--toggle .slds-checkbox--faux::before {
            line-height: 190%;
        }

        input[type=number] {
            -moz-appearance: textfield;
        }

        ::-webkit-inner-spin-button {
            -webkit-appearance: none;
        }

        ::-webkit-outer-spin-button {
            -webkit-appearance: none;
        }

    </style>


    <div class="swagiq">
        <div class="pfl-swagiq slds {!isReadPage}">
            <div id="loading-screen" class="dimmer slds-spinner_container">
                <div class="slds-spinner--brand slds-spinner slds-spinner--large" aria-hidden="false" role="alert">
                    <div class="slds-spinner__dot-a"></div>
                    <div class="slds-spinner__dot-b"></div>
                </div>
                <p id="loading-screen-message" class="dimmer-content">Saving Rule</p>
            </div>
            <div class="slds-tabs--default__content">
                <div class="slds-align--absolute-center">
                    <div class="slds-size--11-of-12">
                        <div class="slds-grid">
                            <div class="slds-col block-title slds-size--7-of-12">
                                <span class="block-title__logo "></span>
                                <span><b class="slds-text-heading--medium">SwagIQ - Intelligent Gifting</b></span>
                            </div>
                            <div class="slds-col block-title slds-size--5-of-12">
                                <pfl-statistics></pfl-statistics>
                            </div>
                        </div>
                        <ui-view></ui-view>
                    </div>
                </div>
            </div>

            <apex:form styleclass="slds-grid slds-wrap slds-grid--align-center">
                <apex:inputfield id="apiKey" styleclass="field field-api" value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__api_key__c}"
                                 style="display:none;"/>

                <div class="slds  slds-size--11-of-12">
                    <div class="slds-form-element slds-grid--margin-bottom slds-grid--margin-top" style="display:none;">
                        <div class="slds-form-element__control">
                            <apex:inputfield styleclass="field slds-input " id="due-date-offset-field-original"
                                             style="display:none;" value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Due_Date_Offset__c}"
                                             html-error-message-block="timebased-duedate-error-msg"/>
                        </div>
                    </div>

                    <div class="slds-grid slds-grid--align-center slds-grid--margin-bottom">
                        <div class="slds-grid--align-center slds-container--center ie-fix">
                            <apex:outputpanel layout="inline" rendered="{!isEditable && NOT(isReadonly)}">
                                <a href="#" onclick="checkExisting();" class="slds-button slds-button--brand">Save
                                    <svg aria-hidden="true"
                                         class="slds-icon slds-icon--x-small block-icon--svg block--paddings">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                             xlink:href="{!URLFOR($Resource.SLDS100, 'assets/icons/action-sprite/svg/symbols.svg#download')}">

                                        </use>
                                    </svg>
                                </a>
                            </apex:outputpanel>
                            <a href="" class="slds-button slds-button--brand" onclick="cancelClick('{!ruleListPage}')">Cancel
                                <svg aria-hidden="true"
                                     class="slds-icon slds-icon--x-small block-icon--svg block--paddings">
                                    <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                         xlink:href="{!URLFOR($Resource.SLDS100, 'assets/icons/action-sprite/svg/symbols.svg#reset_password')}">

                                    </use>
                                </svg>
                            </a>
                        </div>
                    </div>

                    <apex:outputpanel styleclass="slds-grid  slds-grid--align-center slds-text-align--center row-details-form"
                            id="errors-block-1"
                            style="{!IF(isErrorBlockShown,'display:block;','display:none;')}">
                        <apex:outputpanel layout="block" styleclass="slds-box slds-theme--error slds-size--12-of-12"
                                          style="margin-bottom:10px;">
                            <p>Review the errors in red:</p>
                            <apex:messages />
                        </apex:outputpanel>
                    </apex:outputpanel>

                    <div class="slds row-details-form">

                        <div class="slds-card slds-p-bottom--medium">
                            <div class="slds-card__header slds-col--padded">
                                <div style="border-bottom:4px solid #2A94D6;margin-bottom:2em;"
                                     class="slds-size--1-of-1">
                                    <h2 class="slds-text-heading--small" style="font-weight:bold;padding-bottom:.65em;">
                                        Rule Detail</h2>
                                </div>
                            </div>

                            <div class="slds-card__body">
                                <div class="slds-form--stacked slds-grid slds-wrap">
                                    <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2">
                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Rule Name"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="nameHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="rule-name" styleclass="field slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.Name}"
                                                                 html-error-message-block="rule-name-error-msg"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="rule-name-error-msg"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Description"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="descriptionHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">
                                                <apex:inputfield styleclass="field slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Description__c}"
                                                                 rendered="{!isEditable && NOT(isReadonly)}"
                                                                 style="resize:none;"/>
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!isReadonly && NOT(IsBlank(PFLSwagIQ__Rule__c.PFLSwagIQ__Description__c))}">
                                                    <span class="field">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Description__c}</span>
                                                </apex:outputpanel>
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!isReadonly && IsBlank(PFLSwagIQ__Rule__c.PFLSwagIQ__Description__c)}">
                                                    <span class="field">&nbsp;</span>
                                                </apex:outputpanel>
                                            </div>

                                        </div>
                                        <div class="slds-form-element" id="name">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Object" for="objname"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="ruleApiObjectHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />
                                            <apex:outputpanel layout="block" styleclass="slds-form-element__control"
                                                              rendered="{!isEditable && NOT(isReadonly)}">

                                                <div class="slds-select_container">
                                                    <apex:selectlist styleclass="slds-select"
                                                                     value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__ObjectAPIName__c}" id="objname"
                                                                     html-error-message-block="error-objectname-msg"
                                                                     size="1" onchange="loadRuleTypeData();">
                                                        <apex:selectoptions value="{!schemaObjects}"/>
                                                    </apex:selectlist>
                                                </div>

                                                <span class="bg-danger field-error-message slds-input slds-size--11-of-12"
                                                      id="error-objectname-msg"></span>
                                            </apex:outputpanel>

                                            <apex:outputpanel rendered="{!IsReadonly || NOT(isEditable)}">
                                                <span id="objname" class="field">{!objectApiLabel}</span>
                                            </apex:outputpanel>
                                        </div>
                                        <div class="slds-form-element" id="opportunityContactRole">
                                            <apex:outputPanel rendered="{!PFLSwagIQ__Rule__c.PFLSwagIQ__ObjectAPIName__c == 'Opportunity'}">
                                                <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                                  value="Contact Role" for="objname"/>
                                                <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                     id="contactRoleHelp"
                                                     class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"/>
                                                <div class="slds-form-element__control">
                                                    <apex:outputpanel layout="block"
                                                                      styleclass="referenceQuery element-dock-fill">
                                                        <apex:inputtext value="{!contactRoles}"
                                                                        id="ref-role-hidden-input" style="display:none;"
                                                                        html-ref-select-id="ref-select-contact-role"/>
                                                        <select id="ref-select-contact-role"
                                                                class="column chosen-list byQuery element-dock-fill slds-select"
                                                                multiple="multiple" size="1" style="width:100%"
                                                                onchange="pageModel.addRoleValue(this)"
                                                                error-message-block="error-select-contact-role">
                                                            <apex:selectoption itemvalue="" itemlabel="Select a Value"/>
                                                            <apex:repeat value="{!roles}" var="opt">
                                                                <option value="{!opt.Label}">{!opt.Label}</option>
                                                            </apex:repeat>
                                                        </select>
                                                        <span class="bg-danger field-error-message slds-input"
                                                              id="error-select-contact-role"></span>
                                                    </apex:outputpanel>
                                                </div>
                                            </apex:outputPanel>
                                        </div>
                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Trigger Type"/>
                                            <apex:outputpanel layout="inline"
                                                              rendered="{!isEditable && NOT(isReadonly)}">
                                                <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                     id="ruleTriggerHelp"
                                                     class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                                />

                                                <div class="slds-form-element__control">
                                                    <div class="slds-select_container">
                                                        <apex:inputfield styleclass="field slds-select"
                                                                         id="triggerTypeValue"
                                                                         value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Trigger_Type__c}"
                                                                         html-error-message-block="rule-triggertype-error-msg"
                                                                         html-size="1"
                                                        />
                                                    </div>
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="rule-triggertype-error-msg"></span>
                                                </div>
                                            </apex:outputpanel>

                                            <apex:outputpanel layout="inline"
                                                              rendered="{!IsReadonly || NOT(isEditable)}">
                                                <span class="field"
                                                      id="triggerTypeValue">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Trigger_Type__c}</span>
                                            </apex:outputpanel>
                                        </div>
                                        <div class="slds-form-element" id="sendTypeField">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Send Type"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="sendTypeHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />
                                            <apex:outputpanel layout="block" styleclass="slds-form-element__control"
                                                              rendered="{!isEditable && NOT(isReadonly)}">

                                                <div class="slds-select_container">
                                                    <apex:selectlist id="rule-sendType" styleclass="slds-select"
                                                                     value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Send_Type__c}"
                                                                     html-error-message-block="rule-sendtype-error-msg"
                                                                     size="1">
                                                        <apex:selectoptions value="{!allowedSendTypes}"/>
                                                    </apex:selectlist>
                                                </div>
                                                <span class="bg-danger field-error-message slds-input slds-size--11-of-12"
                                                      id="rule-sendtype-error-msg"></span>
                                            </apex:outputpanel>

                                            <apex:outputpanel layout="block" styleclass="slds-form-element__control"
                                                              rendered="{!IsReadonly || NOT(isEditable)}">
                                                <span class="field" id="rule-sendType">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Send_Type__c}</span>
                                            </apex:outputpanel>
                                        </div>
                                        <div class="slds-form-element" id="recipientAddressField">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Recipient Address"/>
                                            <apex:outputpanel layout="inline"
                                                              rendered="{!isEditable && NOT(isReadonly)}">
                                                <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                     id="recipientAddressHelp"
                                                     class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"/>
                                                <div class="slds-form-element__control">
                                                    <div class="slds-select_container">
                                                        <apex:inputfield styleclass="field slds-select"
                                                                         id="recipientAddressValue"
                                                                         value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Recipient_Address__c}"
                                                                         html-error-message-block="recipient-address-error-msg"
                                                                         html-size="1"/>
                                                    </div>
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="recipient-address-error-msg"></span>
                                                </div>
                                            </apex:outputpanel>
                                            <apex:outputpanel layout="inline"
                                                              rendered="{!IsReadonly || NOT(isEditable)}">
                                                <span class="field"
                                                      id="recipientAddressValue">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Recipient_Address__c}</span>
                                            </apex:outputpanel>
                                        </div>
                                        <div class="slds-form-element" id="recipientTypeDiv">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Recipient"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="recipientTypeHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />
                                            <apex:outputpanel layout="block" styleclass="slds-form-element__control"
                                                              rendered="{!isEditable && NOT(isReadonly)}">
                                                <div class="slds-form-element__control">
                                                    <div class="slds-select_container">
                                                        <apex:selectlist id="recipientTypeValue"
                                                                         styleclass="slds-select"
                                                                         value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Recipient_Type__c}"
                                                                         onchange="loadRuleTypeData();"
                                                                         html-error-message-block="rule-sendtype-error-msg"
                                                                         size="1">
                                                            <apex:selectoptions value="{!recipientTypes}"/>
                                                        </apex:selectlist>

                                                        <!--<apex:inputfield styleclass="field slds-select" id="recipientTypeValue"-->
                                                        <!--value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Recipient_Type__c}" onchange="loadRuleTypeData();"-->
                                                        <!--html-error-message-block="rule-recipientType-error-msg"-->
                                                        <!--html-size="1"/>-->
                                                    </div>
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="rule-recipientType-error-msg"></span>
                                                </div>
                                            </apex:outputpanel>
                                            <apex:outputpanel layout="block" styleclass="slds-form-element__control"
                                                              rendered="{!IsReadonly || NOT(isEditable)}">
                                                <span class="field"
                                                      id="recipientTypeValue">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Recipient_Type__c}</span>
                                            </apex:outputpanel>
                                        </div>

                                        <div class="slds-form-element" id="relatedToTypeDiv">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Related To"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="relatedToTypeHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />
                                            <apex:outputpanel layout="block" styleclass="slds-form-element__control"
                                                              rendered="{!isEditable && NOT(isReadonly)}">
                                                <div class="slds-form-element__control">
                                                    <div class="slds-select_container">
                                                        <apex:selectlist id="relatedToTypeValue"
                                                                         styleclass="slds-select"
                                                                         value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Related_To__c}"
                                                                         onchange="loadRuleTypeData();"
                                                                         html-error-message-block="rule-sendtype-error-msg"
                                                                         size="1">
                                                            <apex:selectoptions value="{!relatedToTypes}"/>
                                                        </apex:selectlist>

                                                    </div>
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="rule-relatedToType-error-msg"></span>
                                                </div>
                                            </apex:outputpanel>
                                            <apex:outputpanel layout="block" styleclass="slds-form-element__control"
                                                              rendered="{!IsReadonly || NOT(isEditable)}">
                                                <span class="field"
                                                      id="relatedToTypeValue">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Related_To__c}</span>
                                            </apex:outputpanel>
                                        </div>
                                    </div>
                                    <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2">
                                        <div class="slds-form-element slds-m-bottom--small slds-clearfix">
                                            <label class="slds-checkbox--toggle slds-grid slds-grid--vertical-align-center"
                                                   style='width:auto;float:left;'>
                                                <span class="slds-form-element__label slds-m-bottom--none">Is Active</span>
                                                <apex:inputcheckbox value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__isActive__c}"
                                                                    styleclass="checkboxClass"/>
                                                <span class="slds-checkbox--faux" data-check-on="Yes"
                                                      data-check-off="No"></span>
                                            </label>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="isActiveHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                                 style="margin-left:10px;margin-top:5px;"/>
                                        </div>
                                        <div class="slds-form-element slds-m-bottom--small slds-clearfix"
                                             id="ignoreAutosend" style="display:none;">
                                            <label class="slds-checkbox--toggle slds-grid slds-grid--vertical-align-center"
                                                   style='width:auto;float:left;'>
                                                <span class="slds-form-element__label slds-m-bottom--none">Restrict Auto-Send</span>
                                                <apex:inputcheckbox value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Ignore_If_Auto_Send__c}"
                                                                    id="ignoreAutosendCB"/>
                                                <span class="slds-checkbox--faux" data-check-on="Yes"
                                                      data-check-off="No"></span>
                                            </label>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="ruleAutoSendHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                                 style="margin-left:10px;margin-top:3px;"/>
                                        </div>
                                        <div class="slds-form-element slds-m-bottom--small slds-clearfix"
                                             id="restrictCreateTask" style="display:none;">
                                            <label class="slds-checkbox--toggle slds-grid slds-grid--vertical-align-center"
                                                   style='width:auto;float:left;'>
                                                <span class="slds-form-element__label slds-m-bottom--none">Restrict Create-Task</span>
                                                <apex:inputcheckbox value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Restrict_Create_Task__c}"
                                                                    id="restrictCreateTaskCB"/>
                                                <span class="slds-checkbox--faux" data-check-on="Yes"
                                                      data-check-off="No"></span>
                                            </label>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="restrictCreateTaskHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                                 style="margin-left:10px;margin-top:3px;"/>
                                        </div>
                                        <div class="slds-form-element slds-m-bottom--small slds-clearfix"
                                             id="restrictManual" style="display:none;">
                                            <label class="slds-checkbox--toggle slds-grid slds-grid--vertical-align-center"
                                                   style='width:auto;float:left;'>
                                                <span class="slds-form-element__label slds-m-bottom--none">Restrict Manual Send</span>
                                                <apex:inputcheckbox value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Restrict_Manual_Send__c}"
                                                                    id="restrictManualCB"/>
                                                <span class="slds-checkbox--faux" data-check-on="Yes"
                                                      data-check-off="No"></span>
                                            </label>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="restrictManualHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                                 style="margin-left:10px;margin-top:3px;"/>
                                        </div>
                                        <span class="slds-form-element field-row" id="selectGift-field">
                                        <apex:outputlabel id="selectGift-label"
                                                          styleclass="field-label slds-form-element__label"
                                                          value="Select Gift"
                                                          style="{!IF(PFLSwagIQ__Rule__c.PFLSwagIQ__Send_Type__c='Auto Send','','display:none;')} padding-top:0.2em;"/>

                                        <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                             id="giftHelp"
                                             class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"/>

                                        <apex:outputpanel rendered="{!NOT(isReadonly)}" layout="inline"
                                                          style="width:100%;">
                                            <a href="" id="selectGift" data-toggle="dropdown"
                                               style="{!IF(Rule__c.Send_Type__c='Auto Send','','display:none;')} cursor:pointer;"
                                               onclick="pageModel.showStoreContainer()"
                                            >Gift...</a>
                                            <div class="slds-dropdown slds-dropdown--left slds-dropdown--menu slds-hide"
                                                 style="width: 100%"
                                                 id="gift-wrapper">
                                                <div>
                                                    <a href="#" onclick="pageModel.clearGifts()">Clear ...</a>
                                                </div>
                                                <div>
                                                    <div class="slds-form-element">
                                                        <div class="slds-form-element__control">
                                                            <label for="storeFilter">Store :</label>
                                                            <div class="slds-select_container">
                                                                <select id="storeFilter" class="slds-select"
                                                                        style="min-width:85%">
                                                                    <option value="test">Test</option>
                                                                </select>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                                <ul class="slds-dropdown__list slds-dropdown--length-5" role="menu"
                                                    id="productList"></ul>
                                                 <div id="loading-store-screen" class="slds-spinner_container">
                                                    <div class="slds-spinner--brand slds-spinner slds-spinner--small"
                                                         aria-hidden="false" role="alert">
                                                        <div class="slds-spinner__dot-a"></div>
                                                        <div class="slds-spinner__dot-b"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </apex:outputpanel>

                                        <apex:outputpanel styleclass="dropdown" rendered="{!isReadonly}"
                                                          layout="inline">
                                            <span>{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Name__c}</span>
                                        </apex:outputpanel>
                                        </span>
                                    </div>

                                    <div class="slds-size--1-of-1 slds-medium-size--2-of-3 slds-col--padded"
                                         style="display:none;">

                                        <div class="slds-form-element">
                                            <div class="slds-form-element__control">
                                                <apex:inputfield styleclass="field slds-input" id="gift-name-id"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Name__c}" type="text"/>
                                            </div>
                                        </div>


                                        <div class="slds-form-element">
                                            <div class="slds-form-element__control">
                                                <apex:inputfield styleclass="field slds-input" id="gift-id-id"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Id__c}" style="resize: none;"/>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <apex:outputpanel layout="block" styleclass="slds-card slds-p-bottom--medium" id="taskDetails">
                            <div class="slds-card__header slds-col--padded">
                                <div style="border-bottom:4px solid #2A94D6;margin-bottom:2em;"
                                     class="slds-size--1-of-1">
                                    <h2 class="slds-text-heading--small" style="font-weight:bold;padding-bottom:.65em;"
                                        id='detailsHeader'>Task Details</h2>
                                </div>
                            </div>

                            <div class="slds-card__body">
                                <div class="slds-form--stacked slds-grid slds-wrap">
                                    <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2">

                                        <div class="slds-form-element" id="task_subject_field">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Task Subject"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="subjectHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="tasksubject" styleclass="field slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Subject__c}"
                                                                 html-error-message-block="taskdetails-tasksubject-error-msg"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="taskdetails-tasksubject-error-msg"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element" id="task_description_field">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Task Description"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="taskDescription"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">
                                                <apex:inputfield styleclass="field slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Task_Description__c}"
                                                                 rendered="{!NOT(isReadonly)}" style="resize:none;"
                                                />
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!isReadonly && NOT(IsBlank(PFLSwagIQ__Rule__c.PFLSwagIQ__Task_Description__c))}">
                                                    <span class="field">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Task_Description__c}</span>
                                                </apex:outputpanel>
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!isReadonly && IsBlank(PFLSwagIQ__Rule__c.PFLSwagIQ__Task_Description__c)}">
                                                    <span class="field">&nbsp;</span>
                                                </apex:outputpanel>
                                            </div>
                                        </div>


                                        <div class="slds-form-element" id="task_assign_to_field">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Assigned To Type"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="assignedToTypeHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!isEditable && NOT(isReadonly)}">
                                                    <div class="slds-select_container">
                                                        <apex:inputfield id="assignationType"
                                                                         styleclass="field slds-select"
                                                                         value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Assigned_To_Type__c}"
                                                                         html-error-message-block="taskdetails-assignationType-error-msg"
                                                                         html-size="1"
                                                        />
                                                    </div>
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="taskdetails-assignationType-error-msg">
                                                </span>
                                                </apex:outputpanel>
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!IsReadonly || NOT(isEditable)}">
                                                    <span class="field">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Assigned_To_Type__c}</span>
                                                </apex:outputpanel>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">

                                            <apex:inputfield id="rule_assignField" style="display:none;"
                                                             value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Assigned_To_Field__c}"
                                                             html-error-message-block="taskdetails-rule_assignField-error-msg"
                                            />

                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Assigned To"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="assignedToTypeField"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">

                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!isEditable && NOT(isReadonly)}">
                                                    <select id="assignToField" class="slds-input field"
                                                            value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Assigned_To_Field__c}"></select>

                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="taskdetails-rule_assignField-error-msg"></span>
                                                </apex:outputpanel>

                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!IsReadonly || NOT(isEditable)}">
                                                    <span id="assignToField" class="field">
                                                            {!PFLSwagIQ__Rule__c.PFLSwagIQ__Assigned_To_Field__c}
                                                    </span>
                                                </apex:outputpanel>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2">

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Priority"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="priorityHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!isEditable && NOT(isReadonly)}">
                                                    <div class="slds-select_container">
                                                        <apex:inputfield id="taskpriority"
                                                                         styleclass="field slds-select"
                                                                         value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Priority__c}"
                                                                         html-error-message-block="taskdetails-taskpriority-error-msg"
                                                                         html-size="1"
                                                        />
                                                    </div>
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="taskdetails-taskpriority-error-msg">
                                                </span>
                                                </apex:outputpanel>
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!IsReadonly || NOT(isEditable)}">
                                                    <span class="field">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Priority__c}</span>
                                                </apex:outputpanel>
                                            </div>
                                        </div>

                                        <div class="slds-form-element" id="task-status">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Status"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="statusHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!isEditable && NOT(isReadonly)}">
                                                    <div class="slds-select_container">
                                                        <apex:inputfield id="taskstatus" styleclass="field slds-select"
                                                                         value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Status__c}"
                                                                         html-error-message-block="taskdetails-taskstatus-error-msg"
                                                                         html-size="1"
                                                        />
                                                    </div>
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="taskdetails-taskstatus-error-msg">
                                                </span>
                                                </apex:outputpanel>
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!IsReadonly || NOT(isEditable)}">
                                                    <span class="field">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Status__c}</span>
                                                </apex:outputpanel>
                                            </div>
                                        </div>

                                        <div class="slds-form-element" id="task-due-date-offset-field">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Due Date Offset"/>
                                            <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                 id="dueDateOffsetHelp"
                                                 class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                            />

                                            <div class="slds-form-element__control">
                                                <input class="field slds-input" id="taskdetails-duedate" type="number"
                                                       onchange="pageModel.setDueDateOffset(this)"
                                                       value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Due_Date_Offset__c}"
                                                       error-message-block="taskdetails-duedate-error-msg"
                                                       style="padding-right:0"
                                                />
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="taskdetails-duedate-error-msg"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </apex:outputpanel>


                        <apex:outputpanel layout="block" styleclass="slds-card slds-p-bottom--medium"
                                          id="giftSenderDetails">
                            <div class="slds-card__header slds-col--padded">
                                <div style="border-bottom:4px solid #2A94D6;margin-bottom:2em;"
                                     class="slds-size--1-of-1">
                                    <h2 class="slds-text-heading--small"
                                        style="font-weight:bold;padding-bottom:.65em;display:inline-block;">Gift Sender
                                        Details</h2>
                                    <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                         id="giftSenderUserHelp"
                                         class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                         style="margin-top:-2px;"/>

                                </div>
                            </div>

                            <div class="slds-card__body">
                                <div class="slds-form--stacked slds-grid slds-wrap">
                                    <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2">

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="User"/>
                                            <div class="slds-form-element__control">

                                                <apex:outputpanel layout="block"
                                                                  rendered="{!isEditable && NOT(isReadonly)}">
                                                    <apex:inputtext id="gift-sender-User" style="display:none;"
                                                                    styleclass="slds-input"
                                                                    value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_User__c}"
                                                    />
                                                    <select class="field slds-input" width="100%"
                                                            id="select-gift-sender-User"
                                                            error-message-block="error-gift-sender-User">
                                                        <apex:outputpanel rendered="{!!ISBLANK(PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_User__c)}"
                                                                layout="block">
                                                            <option value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_User__c}"
                                                                    selected="selected">{!autosenderUserName}</option>
                                                        </apex:outputpanel>
                                                    </select>
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="error-gift-sender-User">
                                                </span>
                                                </apex:outputpanel>
                                                <apex:outputpanel layout="inline"
                                                                  rendered="{!IsReadonly || NOT(isEditable)}">
                                                    <span class="field"
                                                          id="gift-sender-User">{!giftSenderUserName}</span>
                                                </apex:outputpanel>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="First Name"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-FirstName" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_First_Name__c}"
                                                                 html-error-message-block="error-gift-sender-FirstName"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-FirstName"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Last Name"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-LastName" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_Last_Name__c}"
                                                                 html-error-message-block="error-gift-sender-LastName"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-LastName"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Phone"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-Phone" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_Phone__c}"
                                                                 html-error-message-block="error-gift-sender-Phone"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-Phone"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Email"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-Email" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_Email__c}"
                                                                 html-error-message-block="error-gift-sender-Email"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-Email"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Company"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-Company" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_Company__c}"
                                                                 html-error-message-block="error-gift-sender-Company"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-Company"></span>
                                            </div>
                                        </div>

                                    </div>

                                    <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-2">

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Address Line 1"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputField id="gift-sender-AddressLine1" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_Street_Address__c}"
                                                                 html-error-message-block="error-gift-sender-AddressLine1"
                                                                 style="width:100%"
                                                />
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-AddressLine1"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Address Line 2"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputField id="gift-sender-AddressLine2" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_Street_Address_Two__c}"
                                                                 html-error-message-block="error-gift-sender-AddressLine2"
                                                                 style="width:100%"
                                                />
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-AddressLine2"></span>
                                            </div>
                                        </div>
                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="City"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-City" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_City__c}"
                                                                 html-error-message-block="error-gift-sender-City"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-City"></span>
                                            </div>
                                        </div>


                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="State"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-State" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_State__c}"
                                                                 html-error-message-block="error-gift-sender-State"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-State"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Postal Code"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-PostalCode" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_Postal_Code__c}"
                                                                 html-error-message-block="error-gift-sender-PostalCode"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-PostalCode"></span>
                                            </div>
                                        </div>

                                        <div class="slds-form-element">
                                            <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                              value="Country"/>
                                            <div class="slds-form-element__control">
                                                <apex:inputfield id="gift-sender-Country" styleclass="slds-input"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Gift_Sender_Country__c}"
                                                                 html-error-message-block="error-gift-sender-Country"
                                                                 style="width:100%"/>
                                                <span class="bg-danger field-error-message slds-input"
                                                      id="error-gift-sender-Country"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </apex:outputpanel>


                        <apex:outputpanel layout="block" styleclass="slds-card slds-p-bottom--medium"
                                          id="timeBasedDetails">
                            <div class="slds-card__header slds-col--padded">
                                <div style="border-bottom:4px solid #2A94D6;margin-bottom:2em;"
                                     class="slds-size--1-of-1">
                                    <h2 class="slds-text-heading--small" style="font-weight:bold;padding-bottom:.65em;">
                                        Time Based Details</h2>
                                </div>
                            </div>

                            <div class="slds-card__body">
                                <div class="slds-form--compound">
                                    <div class="slds-form-element__row">
                                        <apex:outputpanel layout="none" rendered="{!isEditable && NOT(isReadonly)}">

                                            <div class="slds-form-element slds-size--1-of-1 slds-medium-size--1-of-3 slds-col--padded">
                                                <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                                  value="Number of Days"/>
                                                <input id="time-due-date-offset-field" min="0" type="number"
                                                       class="slds-input" onchange="pageModel.setDueDateOffset(this)"
                                                       value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Due_Date_Offset__c}"
                                                       error-message-block="time-due-date-offset-error-msg"
                                                />
                                                <div class="slds-form-element__control">
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="time-due-date-offset-error-msg"></span>
                                                </div>
                                            </div>
                                            <div class="slds-form-element slds-size--1-of-1 slds-medium-size--1-of-3">
                                                <apex:outputlabel styleclass="field-label slds-form-element__label"
                                                                  value="Days"/>
                                                <div class="slds-select_container">
                                                    <apex:inputfield id="offsettype-field" styleclass="slds-select"
                                                                     value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Offset_Type__c}"
                                                                     html-error-message-block="input-offset-field-error-msg"
                                                    />
                                                </div>
                                                <apex:inputfield id="input-offset-field" style="display:none;"
                                                                 value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Offset_From_Field__c}"/>
                                                <div class="slds-form-element__control">
                                                    <span class="bg-danger field-error-message slds-input"
                                                          id="input-offset-field-error-msg"></span>
                                                </div>
                                            </div>
                                            <div class="slds-form-element slds-size--1-of-1 slds-medium-size--1-of-3 slds-col--padded">
                                                <label class="field-label slds-form-element__label"><img
                                                        src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                        id="timeBasedDueDateOffsetHelp"
                                                        class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"/></label>
                                                <div class="slds-select_container">
                                                    <select id="select-offset-field"
                                                            class="chosen-list column slds-select fields field"
                                                            error-message-block="timebased-duedate-error-msg">
                                                        <option value="">Select Field</option>
                                                        <apex:repeat value="{!timebasedFields}" var="field">
                                                            <option value="{!field.value}">{!field.label}</option>
                                                        </apex:repeat>
                                                    </select>
                                                </div>
                                                <div class="slds-form-element__control">
                                                        <span class="bg-danger field-error-message slds-input"
                                                              id="timebased-duedate-error-msg"></span>
                                                </div>
                                            </div>
                                        </apex:outputpanel>
                                    </div>

                                    <apex:outputpanel styleclass="field-row slds-form-element slds-size--1-of-1 slds-medium-size--1-of-1"
                                            layout="block" style="text-align: center;"
                                            rendered="{!IsReadonly || NOT(isEditable)}">
                                        <span style="min-width:11em; width:10%;">Number of Days</span>
                                        <span style="margin-left:1em;">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Due_Date_Offset__c}</span>
                                        <span style="margin-left:1em;">Days</span>
                                        <span style="margin-left:1em; width:25%;">{!PFLSwagIQ__Rule__c.PFLSwagIQ__Offset_Type__c}</span>
                                        <span id="input-offset-field">{!offsetFieldLabel}</span>
                                    </apex:outputpanel>
                                    <apex:outputPanel styleClass="field-row slds-form-element slds-size--1-of-1 slds-medium-size--1-of-1"
                                            layout="block">
                                        <div class="slds-form-element slds-col--padded slds-m-bottom--medium">
                                            <label class="slds-checkbox--toggle slds-grid slds-grid--vertical-align-center"
                                                   style="padding:0;margin:0; width:250px">
                                                <span class="slds-form-element__label slds-m-bottom--none">Show Rule Criteria:&nbsp;</span>
                                                <apex:outputPanel rendered="{!NOT(isReadonly)}" layout="none">
                                                    <apex:inputField value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Timebased_criteria__c}"
                                                                     style="margin-top:7px;float:left;"
                                                                     id="showTimeBasedFormula"
                                                                     onchange="validateTimeBasedCriteria.call(this)"/>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!(isReadonly && PFLSwagIQ__Rule__c.PFLSwagIQ__Timebased_criteria__c)}"
                                                        layout="none">
                                                    <input type="checkbox" checked="checked" id="showTimeBasedFormula"
                                                           onchange="validateTimeBasedCriteria.call(this)"/>
                                                </apex:outputPanel>
                                                <apex:outputPanel rendered="{!(isReadonly && NOT(PFLSwagIQ__Rule__c.PFLSwagIQ__Timebased_criteria__c))}"
                                                        layout="none">
                                                    <input type="checkbox" id="showTimeBasedFormula"
                                                           onchange="validateTimeBasedCriteria.call(this)"/>
                                                </apex:outputPanel>
                                                <span class="slds-checkbox--faux" data-check-on="Yes"
                                                      data-check-off="No"></span>
                                            </label>
                                        </div>
                                    </apex:outputPanel>
                                </div>
                            </div>
                        </apex:outputpanel>
                        <apex:outputpanel layout="block" styleclass="slds-card slds-p-bottom--medium"
                                          id="evaluationGroup" html-timebasedEnabled="true">
                            <div class="slds-card__header slds-col--padded">
                                <div style="border-bottom:4px solid #2A94D6;margin-bottom:2em;"
                                     class="slds-size--1-of-1">
                                    <h2 class="slds-text-heading--small" style="font-weight:bold;padding-bottom:.65em;">
                                        Evaluation Criteria</h2>
                                </div>
                            </div>

                            <div class="slds-card__body slds-grid--margin-bottom ">
                                <div class="slds-form--horizontal slds-grid slds-wrap">

                                    <div class="slds-col--padded slds-size--1-of-1">
                                        <div id="evaluationField">
                                            <div class="field-row slds-container--medium slds-text-align--center evaluate-container slds-p-bottom--medium">

                                                <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                     id="ruleEvalWhenHelp"
                                                     class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"
                                                />
                                                <label class="field-label field-label-md">&nbsp;Evaluate the rule when a
                                                    record is</label>
                                            </div>

                                            <div class="slds-container--center slds-container--medium radio-padded">
                                                <apex:selectradio value="{!PFLSwagIQ__Rule__c.PFLSwagIQ__Evaluate_When__c}"
                                                                  id="evaluateRuleWhen" styleclass="field convertToLSD"
                                                                  style="display:block;"
                                                                  layout="pageDirection">
                                                    <apex:selectoptions value="{!editWhenTypes}" id="selectedItem"/>
                                                </apex:selectradio>
                                                <a style="font-size:small;display:block;text-align:left;width:110px;padding:0px"
                                                   href="https://help.salesforce.com/articleView?err=1&id=workflow_rules_define.htm&siteLang=en_US&type=0"
                                                   target="_blank" id="ruleCrteriaImage">How do I choose?</a>
                                            </div>
                                        </div>
                                        <div class="slds-container--center slds-container--medium"
                                             id="evaluationGroupCriteriaType" style="border-top: 0px;padding-top:14px;">
                                            <div class="slds-form-element">

                                                <div id="runCriteria" class="field-row">
                                                    <label class="slds-form-element__label">
                                                        Run Rule If The Following&nbsp;
                                                        <img src="{!URLFOR($Resource.SLDS100, '/assets/icons/utility/info_60.png')}"
                                                             id="ruleCriteriaHelp"
                                                             class="slds-icon icon-utility-info slds-icon-text-default slds-icon-custom--small"/>
                                                    </label>


                                                    <div class="slds-form-element__control">
                                                        <div class="slds-select_container">
                                                            <apex:selectlist value="{!ruleEvaluationType}" size="1"
                                                                             id="ruleEvaluationTypeField"
                                                                             styleclass="slds-select">
                                                                <apex:selectoptions value="{!ruleEvaluationTypes}"/>
                                                            </apex:selectlist>
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>


                                        </div>

                                    </div>

                                </div>
                            </div>
                        </apex:outputpanel>
                        <span timebasedEnabled="true" class="slds-card">
                      <apex:outputpanel layout="block" styleclass="slds-p-bottom--medium" id="criterionSet"
                                        rendered="{!NOT(isReadonly) || (isReadonly && (isObjectCreateable || isObjectEditable))}">
                          <div class="slds-card__header slds-col--padded">
                              <div style="border-bottom:4px solid #2A94D6;margin-bottom:2em;" class="slds-size--1-of-1">
                                  <h2 class="slds-text-heading--small" style="font-weight:bold;padding-bottom:.65em;">Rule Criteria</h2>


                              </div>
                          </div>

                          <div class="slds-card__body">
                              <div class="slds-form--stacked slds-grid slds-wrap">
                                  <div class="slds-col--padded slds-size--1-of-1 slds-medium-size--1-of-1">

                                      <apex:outputpanel layout="block" rendered="{!NOT(isReadOnly)}"
                                                        styleclass="slds-col--padded">
                                          <a href="" id="add-filter-logic" class="link-btn">Filter Logic...</a>

                                          <br/>


                                          <div class="slds-form-element slds-container--center slds-container--large">
                                              <div class="slds-form-element__control">

                                                  <apex:inputtext id="filterLogicPriority"
                                                                  styleclass="slds-input {!IF(ISBLANK(priorityFormula),'display:none;','')}"
                                                                  value="{!priorityFormula}" style=""/>
                                              </div>
                                              <a href="" onclick="clearFilter()"
                                                 class="slds-float--right slds-m-top--x-small" id="clearFilter">Clear filter</a>

                                          </div>
                                          <br/>

                                      </apex:outputpanel>

                                      <apex:outputpanel layout="block" rendered="{!isReadOnly && priorityFormula!=NULL}"
                                                        styleclass="slds-col--padded">
                                          <label style="float:left; margin-left:9.5%; margin-bottom:0.75em; {!IF(ISBLANK(priorityFormula),'display:none;','')}">Filter Logic</label>
                                          <span style=" margin-left:1em; margin-bottom:2em; float:left; "><strong>{!priorityFormula}</strong></span>
                        </apex:outputpanel>

                        <table class="slds-table slds-max-medium-table--stacked-horizontal"
                               style="background-color:transparent">
                            <thead>
                                <tr class="slds-text-heading--label">
                                    <th scope="col" style="width:3%"></th>
                                    <th scope="col" style="width:30%;">Field</th>
                                    <th scope="col" style="width:15%">Operator</th>
                                    <th scope="col" style="width:50%">Value</th>
                                </tr>
                            </thead>
                            <tbody>

                                <apex:repeat value="{!criteria}" var="template">
                                    <apex:outputPanel layout="none"
                                                      rendered="{!(!isReadonly) || (template.isFieldAccessible || (template.fullFieldName == ''))}">
                                    <tr style="criteria-row">
                                        <td class="criteria-cell criteria-number" data-label="">
                                            <span class="textBox element-dock-fill">{!template.num}</span>
                                        </td>

                                        <td class="criteria-cell" data-label="FIELD">
                                           <div class="slds-form-element__control">
                                                <apex:outputpanel layout="block"
                                                                  styleclass="element-dock-fill dropdown picklist-dropdown"
                                                                  id="criterion-val">
                                                    <apex:inputtext value="{!template.fullFieldName}"
                                                                    id="criterion-hidden-input" style="display:none;"
                                                                    styleclass="slds-input"
                                                                    html-criterion-select-id="criterion-select{!template.num}"/>
                                                    <select id="criterion-select{!template.num}"
                                                            class="field slds-select"
                                                            html-criterion-template-num="{!template.num}"
                                                            size="1">
                                                     </select>
                                                </apex:outputpanel>
                                            </div>
                                        </td>
                                        <td class="criteria-cell" data-label="OPERATOR">
                                            <div class="slds-form-element__control">
                                                <div class="slds-select_container">
                                                    <apex:selectlist styleclass="chosen-list column operators element-dock-fill slds-select"
                                                            value="{!template.criterion.operation}"
                                                            size="1">
                                                        <apex:selectoption itemvalue="" itemlabel="--None--"/>
                                                        <apex:selectoptions value="{!template.operators}"/>
                                                    </apex:selectlist>
                                                </div>
                                            </div>
                                        </td>

                                        <td class="criteria-cell " data-label="VALUE">
                                            <div class="slds-form-element__control">
                                                <apex:input value="{!template.criterion.value}" type="text"
                                                            style="width:100%;padding-left:0"
                                                            styleclass="input-criterion slds-input input-{!template.num} element-dock-fill {!IF(template.criterion.fieldDataType != '', 'input-' + template.criterion.fieldDataType, '')}"
                                                            rendered="{!template.criterion.fieldDataType != 'BOOLEAN' && template.criterion.fieldDataType != 'MULTIPICKLIST' && template.criterion.fieldDataType != 'PICKLIST' && template.criterion.fieldDataType != 'REFERENCE' && template.criterion.fieldDataType != 'ID' && template.criterion.fieldDataType != 'DATE' && template.criterion.fieldDataType != 'DATETIME'}"
                                                />

                                                <apex:selectlist value="{!template.criterion.value}"
                                                                 styleclass="element-dock-fill slds-select"
                                                                 rendered="{!template.criterion.fieldDataType == 'BOOLEAN'}"
                                                                 size="1">
                                                    <apex:selectoption itemvalue="true" itemlabel="true"/>
                                                    <apex:selectoption itemvalue="false" itemlabel="false"/>
                                                </apex:selectlist>

                                                <apex:outputpanel layout="block"
                                                                  styleclass="element-dock-fill dropdown picklist-dropdown"
                                                                  id="picklist-val"
                                                                  rendered="{!template.criterion.fieldDataType == 'PICKLIST' || template.criterion.fieldDataType == 'MULTIPICKLIST'}">
                                                    <apex:inputtext value="{!template.criterion.value}"
                                                                    id="pick-hidden-input" style="display:none;"
                                                                    styleclass="query11 element-dock-fill slds-input"
                                                                    html-ref-select-id="pick-select{!template.num}"/>

                                                    <select id="pick-select{!template.num}"
                                                            class="column chosen-list byQuery element-dock-fill slds-select"
                                                            onchange="pageModel.addPicklistValue(this)"
                                                            multiple="multiple" size="1"
                                                            ref-obj-name="{!template.refObjName}">
                                                                      <apex:selectoption itemvalue=""
                                                                                         itemlabel="Select a Value"/>

                                                                      <apex:repeat value="{!template.picklistValues}"
                                                                                   var="opt">
                                                                          <option data-fullname="{!template.fullFieldName}"
                                                                                  value="{!opt.Value}">{!opt.Label}</option>
                                                                      </apex:repeat>
                                                                  </select>
                                                </apex:outputpanel>


                                                <apex:outputpanel layout="block"
                                                                  styleclass="referenceQuery element-dock-fill"
                                                                  rendered="{!template.criterion.fieldDataType == 'REFERENCE' || template.criterion.fieldDataType == 'ID'}">

                                                    <apex:inputtext value="{!template.criterion.value}"
                                                                    id="ref-hidden-input" style="display:none;"
                                                                    styleclass="query11 element-dock-fill slds-input"
                                                                    html-ref-select-id="ref-select{!template.num}"/>
                                                    <select id="ref-select{!template.num}"
                                                            class="column chosen-list byQuery element-dock-fill slds-select"
                                                            onchange="pageModel.addPicklistValue(this)"
                                                            multiple="multiple" size="1" style="width:100%"
                                                            ref-obj-name="{!template.refObjName}">
                                                                      <apex:selectoption itemvalue=""
                                                                                         itemlabel="Select a Value"/>

                                                                      <apex:repeat value="{!template.picklistValues}"
                                                                                   var="opt">
                                                                          <option data-fullname="{!template.fullFieldName}"
                                                                                  value="{!opt.Value}">{!opt.Label}</option>
                                                                      </apex:repeat>
                                                                  </select>
                                                </apex:outputpanel>

                                                <apex:outputpanel layout="block"
                                                                  styleclass="referenceQuery element-dock-fill"
                                                                  rendered="{!template.criterion.fieldDataType == 'DATE' || template.criterion.fieldDataType == 'DATETIME'}">
                                                    <apex:input value="{!template.criterion.value}" type="text"
                                                                style="padding-left:0"
                                                                styleclass="swagiq-dateinput slds-input input-criterion input-{!template.num} element-dock-fill {!IF(template.criterion.fieldDataType != '', 'input-' + template.criterion.fieldDataType, '')}"
                                                                html-swagiq-date-type="{!template.criterion.fieldDataType}"/>
                                                </apex:outputpanel>
                                            </div>
                                        </td>

                                        <td class="criteria-cell" data-label="">
                                            <apex:outputpanel styleclass="textBox element-dock-fill"
                                                              rendered="{!(criteria.size > template.num)}">AND</apex:outputpanel>
                                        </td>
                                    </tr>
                                    </apex:outputPanel>
                                </apex:repeat>
                            </tbody>
                        </table>
                        <div style="padding-top:1em; padding-left:24px;" id="rowControlButtons">
                            <apex:commandlink action="{!addRow}" value="Add Row" id="fAddRowLink"
                                              rerender="criterionSet,frowButtons"
                                              oncomplete="pageModel.onCriterionsUpdate()"
                            /> /
                            <apex:outputpanel styleclass="greyedLink" id="fRemoveRowLinkGreyed"
                                              rendered="{!IF(criteria.size < 6,true,false)}">Remove Row</apex:outputpanel>
                            <apex:commandlink action="{!removeRow}" value="Remove Row" id="fRemoveRowLink"
                                              rerender="criterionSet,frowButtons"
                                              rendered="{!IF(criteria.size > 5,true,false)}"
                                              oncomplete="pageModel.onCriterionsUpdate()"/>
                        </div>

                    </div>
                </div>
        </div>
        </apex:outputpanel>
        <apex:outputpanel layout="block" styleclass="slds-p-bottom--medium" id="formulaInput" style="display:none;">
            <div class="slds-card__header slds-col--padded">
                <div style="border-bottom:4px solid #2A94D6;margin-bottom:2em;" class="slds-size--1-of-1">
                    <h2 class="slds-text-heading--small" style="font-weight:bold;padding-bottom:.65em;">Formula</h2>
                </div>
            </div>

            <div class="slds-card__body slds-grid--margin-bottom ">
                <div class="slds-form--horizontal slds-grid slds-wrap">

                    <div class="slds-col--padded slds-size--1-of-1">
                        <div class="slds-container--left slds-container--large" style="padding-left:7%;">
                            <apex:outputpanel rendered="{!NOT(isReadonly)}" layout="block"
                                              styleclass="slds-text-align--left slds-grid--margin-bottom">


                                <span class="dropdown">
                                                      <div class="slds-dropdown-trigger--click slds-dropdown-trigger--dropdown"
                                                           aria-expanded="true">

                                                          <button type="button"
                                                                  class="slds-button slds-button--brand dropdown-toggle"
                                                                  data-toggle="dropdown">
                                                              Insert Field
                                                              <div class="arrow-down"></div>
                                                          </button>

                                                          <div class="slds-dropdown slds-dropdown--left slds-dropdown--menu dropdown-container--wrapper">
                                                              <ul class="slds-dropdown__list slds-dropdown--length-5"
                                                                  role="menu">
                                                                  <apex:repeat value="{!objectFields}" var="field">
                                                                      <li class="slds-dropdown__item">
                                                                          <a href="#void" role="menuitem"
                                                                             class="formula-builder-value"
                                                                             formulavalue="{!field.value}">
                                                                                  {!field.label}
                                                                          </a>
                                                                      </li>
                                                                  </apex:repeat>
                                                              </ul>
                                                          </div>
                                                      </div>


                                                  </span>

                                <span class="dropdown">
                                                      <div class="slds-dropdown-trigger--click slds-dropdown-trigger--dropdown"
                                                           aria-expanded="true">

                                                          <button type="button"
                                                                  class="slds-button slds-button--brand dropdown-toggle"
                                                                  data-toggle="dropdown">
                                                              Insert Operator
                                                              <div class="arrow-down"></div>
                                                          </button>

                                                          <div class="slds-dropdown slds-dropdown--left slds-dropdown--menu dropdown-container--wrapper">
                                                              <ul class="slds-dropdown__list slds-dropdown--length-5"
                                                                  role="menu">
                                                                  <apex:repeat value="{!formulaOperators}"
                                                                               var="operator">
                                                                      <li class="slds-dropdown__item">
                                                                          <a href="#void" role="menuitem"
                                                                             class="formula-builder-value"
                                                                             formulavalue="{!operator.value}">
                                                                                  {!operator.label}
                                                                          </a>
                                                                      </li>
                                                                  </apex:repeat>
                                                              </ul>
                                                          </div>

                                                      </div>



                                                  </span>

                                <span class="dropdown">
                                                      <div class="slds-dropdown-trigger--click slds-dropdown-trigger--dropdown"
                                                           aria-expanded="true">

                                                          <button type="button"
                                                                  class="slds-button slds-button--brand dropdown-toggle"
                                                                  data-toggle="dropdown">
                                                              Insert Formula
                                                              <div class="arrow-down"></div>
                                                          </button>

                                                          <div class="slds-dropdown slds-dropdown--left slds-dropdown--menu dropdown-container--wrapper">
                                                              <ul class="slds-dropdown__list slds-dropdown--length-5"
                                                                  role="menu">
                                                                  <apex:repeat value="{!availableFormulas}"
                                                                               var="formula">
                                                                      <li class="slds-dropdown__item">
                                                                          <a href="#void" role="menuitem"
                                                                             class="formula-builder-value"
                                                                             formulavalue="{!formula.value}">
                                                                                  {!formula.label}
                                                                          </a>
                                                                      </li>
                                                                  </apex:repeat>
                                                              </ul>
                                                          </div>
                                                      </div>
                                                  </span>

                            </apex:outputpanel>
                            <div class="slds-container--left slds-container--large">
                                <div class="slds-form-element">
                                    <apex:inputtextarea value="{!formulaField}" rows="5" id="formulaInputField"
                                                        styleclass="formulaInputField slds-textarea"
                                                        style="font-weight:bolder; border: solid lightgray 1px;"/>
                                </div>
                            </div>
                            <div style="width:100%" class="slds-text-align--left">
                                <span class="bg-danger field-error-message slds-input" id="validationMessage"></span>
                            </div>
                            <apex:outputpanel rendered="{!NOT(isReadonly)}" layout="block"
                                              styleclass="slds-text-align--left">
                                <input type="button" class="slds-button slds-button--brand" id="check-formula"
                                       value="Check Syntax"/>
                            </apex:outputpanel>
                        </div>


                    </div>

                </div>
            </div>
        </apex:outputpanel>
        </span>

                    </div>


                    <div class="row">
                        <div style="text-align:center; margin-top:2em;">
            <span>
                            <apex:outputpanel layout="inline" rendered="{!isEditable && NOT(isReadonly)}">
                                <a href="#" class="slds-button slds-button--brand header-btn"
                                   onclick="checkExisting();">Save
                                    <svg aria-hidden="true"
                                         class="slds-icon slds-icon--x-small block-icon--svg block--paddings">
                                        <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                             xlink:href="{!URLFOR($Resource.SLDS100, 'assets/icons/action-sprite/svg/symbols.svg#download')}">

                                        </use>
                                    </svg>
                                </a>
                            </apex:outputpanel>
                            <a href="" class="slds-button slds-button--brand header-btn"
                               onclick="cancelClick('{!ruleListPage}')">Cancel
                                <svg aria-hidden="true"
                                     class="slds-icon slds-icon--x-small block-icon--svg block--paddings">
                                    <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                         xlink:href="{!URLFOR($Resource.SLDS100, 'assets/icons/action-sprite/svg/symbols.svg#reset_password')}">

                                    </use>
                                </svg>
                            </a>
                        </span>
                        </div>
                    </div>

                    <div class="slds slds-size--1-of-1 slds-medium-size--12-of-12 slds-grid--margin-top slds-grid--margin-bottom">
                        <div class="alert alert-error bg-danger field-error-message slds-input slds-grid slds-grid--align-center"
                             style="display:none;"></div>

                    </div>


                </div>

                <apex:actionFunction action="{!selectField}" name="selectField" rerender="criterionSet"
                                     oncomplete="pageModel.onCriterionsUpdate()">
                    <apex:param name="firstParam" assignTo="{!lastVal}" value=""/>
                    <apex:param name="secondParam" assignTo="{!lastIndex}" value=""/>
                </apex:actionFunction>
                <apex:actionFunction action="{!saveTemplate}" name="saveRule" rerender="errors-block-1,errors-block-2"
                                     oncomplete="pageModel.setOnSaveLoadingScreen(false);"
                />
                <apex:actionFunction action="{!loadRuleTypeData}" name="loadRuleTypeData"/>


            </apex:form>

        </div>

        <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__jQuery, 'jquery-min.js')}"/>
        <script src="{!URLFOR($Resource.json2)}"></script>
        <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__swagiq, 'swag-iq/js/numeral.min.js')}"/>
        <script src="{!URLFOR($Resource.chosenjs)}"></script>
        <script src="{!URLFOR($Resource.select2, 'js/select2.full.min.js')}"></script>
        <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__jqUI, 'jquery-ui.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__boostrapsf1, 'js/validator.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__jQuery, 'jqMultiSelect/js/jquery.multiselect.min.js')}"/>
        <script src="{!URLFOR($Resource.jquery, 'datepicker/datepicker.js')}"></script>
        <apex:includeScript value="{!URLFOR($Resource.PFLSwagIQ__boostrapsf1, 'js/bootstrap.js')}"/>


        <script type="text/javascript">
            var noConflictJQuery = jQuery.noConflict();
            noConflictJQuery(function () {
                noConflictJQuery('body').on("select2:open", '.select2-hidden-accessible', function (e) {
                    var self = noConflictJQuery(this).closest('select').attr('id');
                    if (self) {
                        var id = noConflictJQuery('#' + self);

                        var container = parseFloat(noConflictJQuery('#select2-' + self + '-results').closest('.select2-container--open')[0].style.left);
                        if (!isNaN(container)) {

                            var selectOffset = id.closest('.slds-form-element__control').offset().left - container;
                            noConflictJQuery('#select2-' + self + '-results').closest('.select2-dropdown').css('marginLeft', selectOffset + 'px');

                        }
                    }
                });
            });

            function encodeText(value) {
                var escapes = {
                    "'": '&#x27;',
                    '/': '&#x2F;',
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;'
                };
                var htmlEscape = /['\/&<>"]/g;
                return ('' + value).replace(htmlEscape, function (match) {
                    return escapes[match];
                });
            }

            function decodeText(value) {
                var escapes = {
                    'x27': "'",
                    'x2F': '/',
                    'amp': '&',
                    'lt': '<',
                    'gt': '>',
                    'quot': '"'
                };

                var htmlEscape = /&(#\d+|\D+);/g;

                var elems = ('' + value).split(' ').map(function (elem) {
                    return elem.replace(htmlEscape, function (match) {
                        return escapes[match.substring(1, match.length - 1)] || String.fromCharCode(match.substring(2, match.length - 1));
                    });
                });

                return elems.join(' ');
            }

            function setSelectionRange(input, selectionStart, selectionEnd) {
                if (input.setSelectionRange) {
                    input.focus();
                    input.setSelectionRange(selectionStart, selectionEnd);
                }
                else if (input.createTextRange) {
                    var range = input.createTextRange();
                    range.collapse(true);
                    range.moveEnd('character', selectionEnd);
                    range.moveStart('character', selectionStart);
                    range.select();
                }
            }

            function setCaretToPos(input, pos) {
                setSelectionRange(input, pos, pos);
            }
            var helpTextsModel = {
                'nameHelp': '{!$Label.pflswagiq__namehelp}',
                'descriptionHelp': '{!$Label.pflswagiq__descriptionhelp}',
                'sendTypeHelp': '{!$Label.pflswagiq__sendtypehelp}',
                'isActiveHelp': '{!$Label.pflswagiq__isactivehelp}',
                'giftHelp': '{!$Label.pflswagiq__gifthelp}',
                'subjectHelp': '{!$Label.pflswagiq__subjecthelp}',
                'taskDescription': '{!$Label.pflswagiq__taskdescription}',
                'assignedToTypeHelp': '{!$Label.pflswagiq__assignedtotypehelp}',
                'assignedToTypeField': '{!$Label.pflswagiq__assignedtotypefield}',
                'priorityHelp': '{!$Label.pflswagiq__priorityhelp}',
                'statusHelp': '{!$Label.pflswagiq__statushelp}',
                'taskNameHelp': '{!$Label.pflswagiq__tasknamehelp}',
                'notifyAssigneeHelp': '{!$Label.pflswagiq__notifyassigneehelp}',
                'followUpTaskHelp': '{!$Label.pflswagiq__followuptaskhelp}',
                'offsetFromField': '{!$Label.pflswagiq__offsetfromfield}',
                'dueDateOffsetHelp': '{!$Label.pflswagiq__duedateoffsethelp}',
                'timeBasedDueDateOffsetHelp': '{!$Label.pflswagiq__timebasedduedateoffsethelp}',
                'ruleTriggerHelp': '{!$Label.pflswagiq__ruletriggerhelp}',
                'ruleEvalWhenHelp': '{!$Label.pflswagiq__ruleevalwhenhelp}',
                'ruleApiObjectHelp': '{!$Label.pflswagiq__ruleapiobjecthelp}',
                'ruleCriteriaHelp': '{!$Label.pflswagiq__rulecriteriahelp}',
                'ruleAutoSendHelp': '{!$Label.pflswagiq__ruleautosendhelp}',
                'restrictManualHelp': '{!$Label.pflswagiq__restrictManualHelp}',
                'restrictCreateTaskHelp': '{!$Label.pflswagiq__restrictCreateTaskHelp}',
                'giftSenderUserHelp': '{!$Label.pflswagiq__giftsenderuserhelp}',
                'recipientAddressHelp': '{!$Label.pflswagiq__recipientAddressHelp}',
                'add-filter-logic': "<img src=\"{!URLFOR($Resource.boostrapsf1, 'icons/swagiq/report_boolean_filter.gif')}\"'/>",
                'ruleCrteriaImage': "<img src=\"{!URLFOR($Resource.swagiq, 'swag-iq/images/criteriaHelpImage.png')}\"'/>",
                'recipientTypeHelp': '{!$Label.pflswagiq__recipientTypeHelp}',
                'contactRoleHelp': '{!$Label.pflswagiq__contactrolehelp}',
                'relatedToTypeHelp': '{!$Label.pflswagiq__relatedtotypehelp}'
            };

            function RemoteQueryHandler(queryObject) {
                var self = this;
                self.queryObject = queryObject;
                self.generateSelect2Options = function (objs, callback) {
                    var results = [];
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getRelatedObjectsByIds}',
                            self.queryObject, objs,
                            function (result, event) {
                                if (event.type === 'exception') {
                                } else if (event.status) {
                                    for (var key in result) {
                                        results.push({id: key, text: result[key]});
                                    }
                                    ;
                                    UpdateDomTreeForSelect2Value(self.queryObject, results);
                                    callback(results);
                                } else {
                                }
                            }
                    );
                };
                self.handle = function (query) {
                    var data = {results: []};
                    var inquery = noConflictJQuery.trim(query.term);
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getRelatedObjects}',
                            self.queryObject, inquery,
                            function (result, event) {
                                if (event.type === 'exception') {
                                } else if (event.status) {
                                    for (var key in result) {
                                        data.results.push({id: key, text: decodeText(result[key])});
                                    }
                                    ;
                                    UpdateDomTreeForSelect2Value(self.queryObject, data.results);
                                    query.callback(data);

                                } else {
                                }
                            }
                    );
                };
            }

            function RemoteCriterions(allOptions) {
                var self = this;
                self.allOptions = allOptions;
                self.handle = function (query) {
                    var data = {results: []};
                    var inquery = noConflictJQuery.trim(query.term);
                    if (!inquery) {
                        self.allOptions.forEach(function (elem) {
                            data.results.push(elem);
                        });
                    } else {
                        self.allOptions.forEach(function (elem) {
                            if (elem.text.toLowerCase().indexOf(inquery.toLowerCase()) != -1) {
                                data.results.push(elem);
                            }
                        });
                    }
                    query.callback(data);
                },
                        self.generateSelect2Option = function (value, callback) {
                            if (!self.allOptions) {
                                return;
                            }
                            self.allOptions.forEach(function (elem) {
                                if (elem.id === value) {
                                    callback(elem.text);
                                    return;
                                }
                            });

                        }
            }

            function RemoteUserHandler(showCommunityUsers) {
                var self = this;
                self.showCommunityUsers = showCommunityUsers;
                self.queryObject = 'User';
                self.generateSelect2Options = function (objs, callback) {
                    var results = [];
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getUsersListByIds}',
                            objs,
                            self.showCommunityUsers,
                            function (result, event) {
                                if (event.type === 'exception') {
                                } else if (event.status) {
                                    for (var key in result) {
                                        results.push({id: key, text: result[key].Name});
                                    }
                                    ;
                                    UpdateDomTreeForSelect2Value(self.queryObject, results);
                                    callback(results);
                                } else {
                                }
                            }
                    );
                };

                self.handle = function (query) {
                    var data = {results: []};
                    var inquery = noConflictJQuery.trim(query.term);
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getUsersList}',
                            inquery,
                            self.showCommunityUsers,
                            function (result, event) {
                                if (event.type === 'exception') {
                                } else if (event.status) {
                                    for (var key in result) {
                                        data.results.push({id: key, text: result[key].Name, data: result[key]});
                                    }
                                    ;
                                    UpdateDomTreeForSelect2Value(self.queryObject, data.results);
                                    query.callback(data);
                                } else {
                                }
                            }
                    );
                };
            }

            function UpdateDomTreeForSelect2Value(objectName, results) {
                if (results.length === 0) {
                    return;
                }

                var domOptions = noConflictJQuery('[ref-obj-name=' + objectName + '] > [data-fullname]');
                if (domOptions && domOptions.length > 0) {
                    var dataFullName = domOptions[0].attributes["data-fullname"].nodeValue;
                    var oldValues = new Array();

                    noConflictJQuery.each(domOptions, function (index) {
                        oldValues[this.value] = this.label;
                    });

                    for (var i = 0; i < results.length; i++) {
                        if (oldValues[results[i].id] === undefined) {
                            noConflictJQuery('[ref-obj-name=' + objectName + '] ').append('<option  data-fullname=' + dataFullName + ' value=' + results[i].id + '>' +
                                    results[i].text + '</option>');
                        }
                    }
                } else {
                    for (var i = 0; i < results.length; i++) {
                        noConflictJQuery('[ref-obj-name=' + objectName + '] ').append('<option  data-fullname=' + dataFullName + ' value=' + results[i].id + '>' +
                                results[i].text + '</option>');

                    }
                }
            }

            function AvailableObjectsQueryHandler(availableObjects) {
                var self = this;
                self.availableObjects = availableObjects;
                self.handle = function (query) {
                    var data = {results: []};
                    var inquery = noConflictJQuery.trim(query.term).toUpperCase();

                    for (var key in self.availableObjects) {
                        if (self.availableObjects[key].toUpperCase().indexOf(inquery) != -1) {
                            data.results.push({id: key, text: self.availableObjects[key]});
                        }
                    }
                    ;
                    query.callback(data);
                }
            };

            function Validator(errorMessage, checkIsValid, options, nextValidator) {
                this.errorMessage = errorMessage;
                this.checkIsValid = checkIsValid;
                this.options = options;
                this.nextValidator = nextValidator;
            }

            function checkIsNotEmptyValue(value) {
                return value !== undefined && value !== null && value.trim() !== '';
            }

            function checkIsValidEmail(value) {
                var pattern = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
                return value !== undefined && value !== null && pattern.test(value);
            }

            function checkSizeLimit(value) {
                var self = this;
                var maxLength = self.options ? self.options['maxLength'] : undefined;
                if (!maxLength) {
                    return true;
                }
                return value !== undefined && value !== null && value.trim().length <= maxLength;
            }

            function checkCombinedSizeLimit(value) {
                var self = this;
                var secondFieldName = self.options ? self.options['secondField'] : undefined;
                var maxLength = self.options ? self.options['maxLength'] : undefined;
                if (!maxLength || !secondFieldName) {
                    return true;
                }

                var cssSelector = 'input[id*="' + secondFieldName + '"]';
                var secondField = noConflictJQuery(cssSelector).val();
                var commonLength = secondField ? secondField.trim().length + value.trim().length : value.trim().length;

                return value !== undefined && value !== null && commonLength <= maxLength;
            }

            function isValidDay(value) {
                return ('' + value).match(/[\d]+/)[0].length == ('' + value.length) && value >= 0;
            }

            function checkIsNotNegativeValue(value) {
                return checkIsNotEmptyValue(value) && isValidDay(value);
            }

            function validateTimeBasedCriteria() {
                pageModel.setTimeBasedVisibility(noConflictJQuery(this).is(':checked'));
            }

            var FieldValidator = function (fieldValidatorMap) {
                var self = this;

                self.fieldValidatorMap = fieldValidatorMap;

                self.validateCombineField = function (e) {
                    var validator = self.fieldValidatorMap[e.target.id];
                    var secondFieldName = validator && validator.options ? validator.options['secondField'] : undefined;

                    if (!secondFieldName) {
                        return;
                    }

                    var cssSelector = 'input[id*="' + secondFieldName + '"]';
                    var secondField = noConflictJQuery(cssSelector);
                    if (secondField && secondField.attr('field-is-valid') == 'false') {
                        self.validateField({
                            target: secondField[0],
                            reValidate: false
                        });
                    }

                }

                self.validateField = function (e) {
                    var validator = self.fieldValidatorMap[e.target.id];
                    var isValid = true;
                    var errorMessage = '';

                    while (isValid && validator && validator.checkIsValid) {
                        isValid = validator.checkIsValid(e.target.value);
                        errorMessage = (!isValid) ? validator.errorMessage : '';
                        validator = validator.nextValidator;
                    }

                    e.target.setAttribute('field-is-valid', isValid);
                    if (e.reValidate !== false) {
                        self.validateCombineField(e);
                    }
                    self.showErrorMessage(e.target.id, errorMessage);
                    return isValid;
                }

                self.bindValidation = function () {
                    for (var fieldCssSelector in self.fieldValidatorMap) {
                        var field = noConflictJQuery(fieldCssSelector)[0];

                        if (field == null || field === undefined) {
                            continue;
                        }

                        self.fieldValidatorMap[field.id] = self.fieldValidatorMap[fieldCssSelector];

                        noConflictJQuery(fieldCssSelector).on('change', self.validateField);
                    }
                };


                self.showErrorMessage = function (elementId, errorMessage) {
                    var errorSpanId = document.getElementById(elementId).getAttribute('error-message-block');
                    if (errorSpanId !== undefined && errorSpanId != null && errorSpanId != '') {
                        document.getElementById(errorSpanId).innerHTML = errorMessage;
                    }
                };

                self.validateFields = function () {
                    var isFieldSetValid = true;
                    for (var fieldCssSelector in self.fieldValidatorMap) {
                        var elements = noConflictJQuery(fieldCssSelector);
                        for (var i = 0; i < elements.length; i++) {
                            var element = elements[i];
                            var isFieldValid = self.validateField({
                                target: element
                            });
                            isFieldSetValid = isFieldSetValid && isFieldValid;
                        }
                    }
                    return isFieldSetValid;
                };

                self.bindValidation();

            };

            generalValidationFields = {
                'input[id*="rule-name"]': new Validator('This field is required', checkIsNotEmptyValue)
                , 'select[id*="triggerTypeValue"]': new Validator('This field is required', checkIsNotEmptyValue)
            };

            timeBasedValidationFields = {
                'input[id*="time-due-date-offset-field"]': new Validator('Value must be an integer number greater than or equal to 0', checkIsNotNegativeValue)
                , 'select[id*="offsettype-field"]': new Validator('This field is required', checkIsNotEmptyValue)
                , 'select[id*="select-offset-field"]': new Validator('This field is required', checkIsNotEmptyValue)
                , 'select[id*="rule-sendType"]': new Validator('This field should be specified', checkIsNotEmptyValue)
            };

            taskDetailsValidationFields = {
                'input[id*="tasksubject"]': new Validator('This field is required', checkIsNotEmptyValue)
                ,
                'select[id*="assignationType"]': new Validator('This field is required', checkIsNotEmptyValue)
                ,
                'input[id*="rule_assignField"]': new Validator('This field is required', checkIsNotEmptyValue)
                ,
                'select[id*="taskpriority"]': new Validator('This field is required', checkIsNotEmptyValue)
                ,
                'select[id*="taskstatus"]': new Validator('This field is required', checkIsNotEmptyValue)
                ,
                'input[id*="taskdetails-duedate"]': new Validator('Value must be an integer number greater than or equal to 0', checkIsNotNegativeValue)
                ,
                'select[id*="rule-sendType"]': new Validator('This field should be specified', checkIsNotEmptyValue)
            };

            giftSenderValidationFields = {
                'input[id*="gift-sender-FirstName"]': new Validator('Missing sender First Name', checkIsNotEmptyValue, {'secondField': 'gift-sender-LastName'},
                        new Validator('Name (First and Last combined) has a limit of 35 characters', checkCombinedSizeLimit, {
                            'maxLength': 35,
                            'secondField': 'gift-sender-LastName'
                        }))
                ,
                'input[id*="gift-sender-LastName"]': new Validator('Missing sender Last Name', checkIsNotEmptyValue, {'secondField': 'gift-sender-FirstName'},
                        new Validator('Name (First and Last combined) has a limit of 35 characters', checkCombinedSizeLimit, {
                            'maxLength': 35,
                            'secondField': 'gift-sender-FirstName'
                        }))
                ,
                'input[id*="gift-sender-Phone"]': new Validator('Missing sender Phone', checkIsNotEmptyValue, null,
                        new Validator('Phone has a limit of 16 characters', checkSizeLimit, {'maxLength': 16}))
                ,
                'input[id*="gift-sender-Email"]': new Validator('Missing sender Email', checkIsNotEmptyValue, null,
                        new Validator('Email has incorrect format', checkIsValidEmail))
                ,
                'input[id*="gift-sender-Company"]': new Validator('Missing sender Company', checkIsNotEmptyValue, null,
                        new Validator('Company has a limit of 35 characters', checkSizeLimit, {'maxLength': 35}))
                ,
                'input[id*="gift-sender-Country"]': new Validator('Missing sender Country', checkIsNotEmptyValue, null,
                        new Validator('Country has a limit of 20 characters', checkSizeLimit, {'maxLength': 20}))
                ,
                'input[id*="gift-sender-State"]': new Validator('Missing sender State', checkIsNotEmptyValue, null,
                        new Validator('State has a limit of 30 characters', checkSizeLimit, {'maxLength': 30}))
                ,
                'input[id*="gift-sender-City"]': new Validator('Missing sender City', checkIsNotEmptyValue, null,
                        new Validator('City has a limit of 35 characters', checkSizeLimit, {'maxLength': 35}))
                ,
                'input[id*="gift-sender-PostalCode"]': new Validator('Missing sender Postal Code', checkIsNotEmptyValue, null,
                        new Validator('Postal Code has a limit of 10 characters', checkSizeLimit, {'maxLength': 10}))
                ,
                'input[id*="gift-sender-AddressLine1"]': new Validator('Missing sender Address Line 1', checkIsNotEmptyValue, null,
                        new Validator('Address Line 1 has a limit of 35 characters', checkSizeLimit, {'maxLength': 35}))
                ,
                'input[id*="gift-sender-AddressLine2"]': new Validator('Address Line 2 has a limit of 35 characters', checkSizeLimit, {'maxLength': 35})
                ,
                'select[id*="select-gift-sender-User"]': new Validator('Missing sender user', checkIsNotEmptyValue)
                ,
                'select[id*="rule-sendType"]': new Validator('This field should be specified', checkIsNotEmptyValue)
                ,
                'select[id*="assignationType"]': new Validator('This field is required', checkIsNotEmptyValue)
                ,
                'input[id*="rule_assignField"]': new Validator('This field is required', checkIsNotEmptyValue)
                ,
                'select[id*="taskpriority"]': new Validator('This field is required', checkIsNotEmptyValue)
            };

            recipientAddressFields = {
                'select[id*="recipientAddressValue"]': new Validator('Missing recipient address', checkIsNotEmptyValue)
            };

            recipientTypeFields = {
                'select[id*="recipientTypeValue"]': new Validator('Missing recipient type', checkIsNotEmptyValue)
            };

            relatedToTypeFields = {
                'select[id*="relatedToTypeValue"]': new Validator('Missing related to type', checkIsNotEmptyValue)
            };

            opportunityValidationFields = {
                'select[id*="ref-select-contact-role"]': new Validator('This field should be specified', checkIsNotEmptyValue)
            };

            function initDatetimepicker(element) {
                var dateinput = noConflictJQuery(element);
                var dateinputType = dateinput.attr('swagiq-date-type');

                if (dateinputType == 'DATETIME') {
                    dateinput.datetimepicker({
                        format: 'Y-m-d H:i:00',
                        allowTimes: [
                            '00:00:00'
                            , '01:00:00'
                            , '02:00:00'
                            , '03:00:00'
                            , '04:00:00'
                            , '05:00:00'
                            , '06:00:00'
                            , '07:00:00'
                            , '08:00:00'
                            , '09:00:00'
                            , '10:00:00'
                            , '11:00:00'
                            , '12:00:00'
                            , '13:00:00'
                            , '14:00:00'
                            , '15:00:00'
                            , '16:00:00'
                            , '17:00:00'
                            , '18:00:00'
                            , '19:00:00'
                            , '20:00:00'
                            , '21:00:00'
                            , '22:00:00'
                            , '23:00:00'
                        ],
                    });
                } else {
                    var xts = dateinput.datetimepicker({
                        timepicker: false,
                        format: 'Y-m-d'
                    });
                }
            }

            function userTemplate(state) {
                if (!state.id) {
                    return state.text;
                }
                var role = state.data['UserRole'] && state.data['UserRole']['Name'] ? ', ' + state.data['UserRole']['Name'] : '';
                var title = state.data.Title || '';
                var $state = noConflictJQuery(
                        '<span value="' + state.id + '"><span class="optionBlock"><img class="optionImg" src="' + state.data.SmallPhotoUrl + '"/></span><span class="optionBlockText"> <span>' + title + '</span></br><p class="slds-truncate">' + state.text + role + '</p></span>'
                );
                return $state;
            };

            function refSelectionTemplate(state) {
                var $state = noConflictJQuery(
                        '<p class="slds-truncate" style="display:inline-block;vertical-align:middle">' + encodeText(state.text) + '</p>'
                )
                return $state;
            }

            function fieldTemplate(state) {
                if (!state.id) {
                    return state.text;
                }
                var $state = noConflictJQuery(
                        '<span value="' + state.id + '"> ' + state.text + '</span>'
                );
                return $state;
            };

            var pageModel = {
                validations: {
                    general: new FieldValidator(generalValidationFields),
                    timeBased: new FieldValidator(timeBasedValidationFields),
                    taskDetails: new FieldValidator(taskDetailsValidationFields),
                    giftSender: new FieldValidator(giftSenderValidationFields),
                    recipientAddress: new FieldValidator(recipientAddressFields),
                    recipientType: new FieldValidator(recipientTypeFields),
                    relatedToType: new FieldValidator(relatedToTypeFields),
                    opportunity: new FieldValidator(opportunityValidationFields)
                },
                products: {},
                frowButtonsVisible: false,
                taskDetailsVisible: false,
                giftSenderDetailsVisible: false,
                timeBasedDetailsVisible: false,
                universalRule: false,
                evaluationCriteriaVisible: false,
                giftVisible: false,
                criteriaVisible: false,
                sendTypeVisible: true,

                setOnSaveLoadingScreen: function (isEnabled) {
                    if (isEnabled) {
                        noConflictJQuery('#loading-screen').show();
                    } else {
                        noConflictJQuery('#loading-screen').hide();
                    }
                },
                applyDatetimePickers: function () {
                    noConflictJQuery('.swagiq-dateinput').each(function (index) {
                        var dateinput = noConflictJQuery(this);
                        dateinput.on('mouseup', function (e) {
                            initDatetimepicker(this);

                            var value = this.value;
                            if (value != '' && value !== undefined && value != null && !value.match(/[\d]*-[\d]*-[\d]*[\s]*[\d]*[:]*[\d]*[:]*[\d]*/g)) {
                                noConflictJQuery(this).datetimepicker('destroy');
                            } else {
                                noConflictJQuery(this).datetimepicker('show');
                            }
                        });
                        dateinput.on('keyup', function (e) {
                            var value = this.value;
                            if (value == '' || value === undefined || value == null) {
                                initDatetimepicker(this);
                                noConflictJQuery(this).datetimepicker('show');
                            } else {
                                noConflictJQuery(this).datetimepicker('destroy');
                            }
                        });
                    });
                },
                formatCriterionDates: function () {
                    noConflictJQuery('.swagiq-dateinput').each(function (index) {
                        var dateinput = noConflictJQuery(this);
                        var val = dateinput.val().toLowerCase();
                        if (val.indexOf('next') == -1
                                && val.indexOf('last') == -1
                                && val.indexOf('month') == -1
                                && val.indexOf('today') == -1
                                && val.indexOf('yesterday') == -1
                                && val.indexOf('tomorrow') == -1) {
                            var value = dateinput.val().replace('T', ' ').replace('.000', '');
                            dateinput.val(value);
                        }
                    });
                },
                onCriterionsUpdate: function () {
                    applyQuery();
                    reloadOptions();
                    pageModel.onCriterionsReferenceRerendered();
                    pageModel.getCriterions(pageModel.onCriterionsRerendered);
                    pageModel.onCriterionsPicklistRerendered();
                    pageModel.initFormulaEvents();
                    pageModel.applyDatetimePickers();
                    pageModel.formatCriterionDates();
                },
                initVisibilityVars: function () {
                    pageModel.timeBasedDetailsVisible = pageModel.ruleTriggerType() == 'Time Based';
                    pageModel.universalRule = pageModel.ruleTriggerType() == 'Universal';
                    pageModel.sendTypeVisible = !pageModel.universalRule;
                    pageModel.isAutoSendRule = pageModel.ruleSendType() == 'Auto Send';
                    pageModel.taskDetailsVisible = pageModel.ruleSendType() == 'Create Task' && !pageModel.universalRule;
                    pageModel.giftVisible = !pageModel.universalRule && !pageModel.taskDetailsVisible;
                    pageModel.evaluationCriteriaVisible = !pageModel.universalRule && !pageModel.timeBasedDetailsVisible;
                    pageModel.giftSenderDetailsVisible = pageModel.ruleSendType() == 'Auto Send' && !pageModel.universalRule;
                    pageModel.recipientAddressVisibility = pageModel.isRecipientAddressSupported() && pageModel.isAutoSendRule && pageModel.ruleTriggerType() != 'Universal';
                    pageModel.recipientTypeVisibility = pageModel.objectType() == 'Task';
                    pageModel.relatedToTypeVisibility = pageModel.objectType() == 'Task';
                },
                initGiftSenderUserSelect2: function () {
                    var quertyHandler = new RemoteUserHandler(true);

                    noConflictJQuery('select[id*="select-gift-sender-User"]').select2({
                        selectId: '',
                        allowClear: true,
                        multiple: false,
                        maximumSelectionSize: 1000,
                        minimumInputLength: 0,
                        width: '100%',
                        formatNoMatches: function () {

                        },
                        placeholder: "",
                        query: quertyHandler.handle,
                        templateResult: userTemplate
                    });

                    noConflictJQuery('select[id*="select-gift-sender-User"]').on("select2:select", function (e) {
                        e.params.data.text = decodeText(e.params.data.text);
                        noConflictJQuery('select[id*="select-gift-sender-User"]').html('<option selected="selected" value="' + e.params.data.id + '">' + encodeText(e.params.data.text) + '</option>');
                        noConflictJQuery('select[id*="select-gift-sender-User"]').trigger('change');
                    });

                },

                onCriterionsReferenceRerendered: function () {
                    var hiddenInputs = noConflictJQuery('[id*="ref-hidden-input"]');

                    for (var i = 0; i < hiddenInputs.length; i++) {
                        var values = hiddenInputs[i].value.split('%&%');
                        if (values) {
                            values = values.map(function (elem) {
                                return elem.trim();
                            });
                        }
                        var selectId = hiddenInputs[i].getAttribute('ref-select-id');

                        if (selectId != null && selectId !== undefined && selectId != '') {
                            var selects = noConflictJQuery('[id*="' + selectId + '"]');
                            var objectId = selects.attr('ref-obj-name');
                            if (objectId) {
                                var quertyHandler = objectId == 'User' ? new RemoteUserHandler(true) : new RemoteQueryHandler(objectId);
                                var optionTemplate = objectId == 'User' ? userTemplate : fieldTemplate;

                                if (quertyHandler && quertyHandler.handle && quertyHandler.generateSelect2Options) {
                                    selects.select2({
                                        selectId: '',
                                        allowClear: true,
                                        multiple: true,
                                        maximumSelectionSize: 1000,
                                        minimumInputLength: 0,
                                        width: '100%',
                                        formatNoMatches: function () {

                                        },
                                        placeholder: "",
                                        query: quertyHandler.handle,
                                        templateResult: optionTemplate,
                                        templateSelection: refSelectionTemplate
                                    });

                                    if (hiddenInputs[i].value != null && hiddenInputs[i].value !== undefined && hiddenInputs[i].value != '') {
                                        updateSelectedOptions(quertyHandler.generateSelect2Options, selects, values);
                                    }
                                }

                            }

                        }
                    }
                },
                initAvailableContactRoles: function (callback) {
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getContactRoles}',
                            function (result, event) {
                                if (event.statusCode == 200) {
                                    var availableRoles = JSON.parse(result);
                                    callback(availableRoles);
                                }
                            },
                            {escape: false}
                    );
                },
                initContactRoleSelect2: function (availableRoles) {
                    if (!{!isReadonly}) {
                        noConflictJQuery('[id*="opportunityContactRole"]').css('margin', '0');
                    }
                    var hiddenInputs = noConflictJQuery('[id*="ref-role-hidden-input"]');
                    if (hiddenInputs.length > 0) {

                        var value = hiddenInputs[0].getAttribute('value');
                        var valuesLst = value ? value.split('; ') : [];

                        var selectId = hiddenInputs[0].getAttribute('ref-select-id');
                        if (selectId != null && selectId !== undefined && selectId != '') {
                            var selects = noConflictJQuery('[id*="' + selectId + '"]');
                            var quertyHandler = new AvailableObjectsQueryHandler(availableRoles);
                            if (quertyHandler && quertyHandler.handle) {
                                selects.select2({
                                    selectId: '',
                                    allowClear: true,
                                    multiple: true,
                                    maximumSelectionSize: 1000,
                                    minimumInputLength: 0,
                                    width: '100%',
                                    formatNoMatches: function () {
                                    },
                                    placeholder: "",
                                    query: quertyHandler.handle
                                });

                                selects.on("select2:select", function (e) {
                                    if (e.params.data.text == 'All') {
                                        if (Object.values(selects.val()).length == Object.keys(availableRoles).length) {
                                            selects.val(null);
                                        } else {
                                            selects.val(Object.keys(availableRoles).filter(function (elem) {
                                                return elem != 'All';
                                            }));
                                        }
                                        selects.trigger('change');
                                    }
                                });

                                if (valuesLst) {
                                    selects.val(valuesLst);
                                    selects.trigger('change');
                                }
                            }
                        }
                    }
                },
                getCriterions: function (callback) {
                    var allOptions = [];
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getAvailableOptions}',
                            "{!JSENCODE(Rule__c.ObjectAPIName__c)}",
                            "{!JSENCODE(Rule__c.Recipient_Type__c)}",
                            "{!JSENCODE(Rule__c.Related_To__c)}",
                            function (result, event) {
                                if (event.type === 'exception') {
                                } else if (event.status) {
                                    for (var key in result) {
                                        allOptions.push({id: key, text: decodeText(result[key])});
                                    }
                                    callback(allOptions);
                                }
                            }
                    );
                },
                onCriterionsRerendered: function (allOptions) {
                    var hiddenInputs = noConflictJQuery('[id*="criterion-hidden-input"]');

                    for (var i = 0; i < hiddenInputs.length; i++) {
                        var inputElem = hiddenInputs[i];
                        var values = inputElem.value;
                        var selectId = inputElem.getAttribute('criterion-select-id');
                        if (selectId) {
                            var selects = noConflictJQuery('[id*="' + selectId + '"]');
                            var quertyHandler = new RemoteCriterions(allOptions);
                            selects.select2({
                                selectId: '',
                                allowClear: true,
                                closeOnSelect: true,
                                multiple: false,
                                maximumSelectionSize: 10000,
                                minimumInputLength: 0,
                                width: '100%',
                                placeholder: "",
                                query: quertyHandler.handle
                            });

                            noConflictJQuery("select[id*='" + selectId + "']").on("select2:unselect", function (e) {
                                e.preventDefault();
                                var criterionNum = e.target.getAttribute('html-criterion-template-num');
                                var inputElem = noConflictJQuery("input[criterion-select-id*='criterion-select" + criterionNum + "']");

                                var selectElem = noConflictJQuery("select[id*='criterion-select" + criterionNum + "']");
                                if (selectElem && selectElem.data('select2')) {
                                    selectElem.data('select2').options.set('disabled', true);
                                }

                                noConflictJQuery('span.select2-dropdown.select2-dropdown--above').css('display', 'none');
                                noConflictJQuery('span.select2-dropdown.select2-dropdown--below').css('display', 'none');

                                inputElem.value = "";
                                selectField(inputElem.value, criterionNum);
                            });


                            noConflictJQuery("select[id*='" + selectId + "']").on("select2:select", function (e) {
                                e.params.data.text = decodeText(e.params.data.text);
                                var criterionNum = e.target.getAttribute('html-criterion-template-num');

                                var selectElem = noConflictJQuery("select[id*='criterion-select" + criterionNum + "']");
                                selectElem.html('<option selected="selected" value="' + e.params.data.id + '">' + encodeText(e.params.data.text) + '</option>');
                                selectElem.trigger('change');

                                var inputElem = noConflictJQuery("input[criterion-select-id*='criterion-select" + criterionNum + "']")
                                inputElem.value = e.params.data.id;
                                selectField(inputElem.value, criterionNum);
                            });

                            if (values) {
                                quertyHandler.generateSelect2Option(values, function (data) {
                                    selects.val(values);
                                    selects.html('<option selected="selected" value="' + values + '">' + encodeText(data) + '</option>');
                                    selects.trigger("change");
                                });
                            }

                        }
                    }
                },
                onCriterionsPicklistRerendered: function () {
                    var hiddenInputs = noConflictJQuery('[id*="pick-hidden-input"]');

                    for (var i = 0; i < hiddenInputs.length; i++) {
                        var values = hiddenInputs[i].value.split('%&%');
                        if (values) {
                            values = values.map(function (elem) {
                                return elem.trim();
                            });
                        }
                        var selectId = hiddenInputs[i].getAttribute('ref-select-id');

                        if (selectId != null && selectId !== undefined && selectId != '') {
                            var selects = noConflictJQuery('[id*="' + selectId + '"]');
                            var objectId = selects.attr('ref-obj-name');
                            var quertyHandler = new RemoteQueryHandler(objectId);
                            selects.select2({width: '100%'});
                            if (hiddenInputs[i].value != null && hiddenInputs[i].value !== undefined && hiddenInputs[i].value != '') {
                                selects.val(values);
                                selects.trigger("change");
                            }
                        }
                    }
                },
                addPicklistValue: function (element) {
                    var val = noConflictJQuery(element).val();
                    if (val != null && val !== undefined) {
                        noConflictJQuery(element).prev().val(val.join('%&%'));
                    }
                },
                addRoleValue: function (element) {
                    var val = noConflictJQuery(element).val();
                    if (val != null && val !== undefined) {
                        noConflictJQuery(element).prev().val(val.join('; '));
                    } else {
                        noConflictJQuery(element).prev().val('');
                    }
                },
                addToFormula: function (token) {
                    var formulaInput = noConflictJQuery('[id*="formulaInputField"]');
                    var previousVal = formulaInput.val();
                    var selectionStart = formulaInput[0].selectionStart;
                    var formulaValue = formulaInput.val();
                    var insertVal;
                    if (selectionStart == 0 || formulaValue.charAt(selectionStart).match(/\s/)) {
                        insertVal = token;
                    } else {
                        insertVal = ' ' + token;
                    }
                    if (!formulaValue.charAt(selectionStart + token.length).match(/\s/)) {
                        insertVal += ' ';
                    }

                    formulaValue = [formulaValue.substring(0, selectionStart), insertVal, formulaValue.substring(selectionStart, formulaValue.length)].join('');
                    formulaValue = formulaValue.replace(/[\s]+/g, ' ');
                    formulaValue = formulaValue.trim();
                    noConflictJQuery('[id*="formulaInputField"]').val(formulaValue);
                    var selectionIndex = formulaValue.length;
                    if (token.endsWith('()')) {
                        selectionIndex = selectionStart + insertVal.trim().length;
                    }
                    setCaretToPos(noConflictJQuery('[id*="formulaInputField"]')[0], selectionIndex);
                },

                ruleTriggerType: function () {
                    if ({!isReadonly}) {
                        return noConflictJQuery('span[id*="triggerTypeValue"]').html();
                    } else {
                        return noConflictJQuery('select[id*="triggerTypeValue"]').val();
                    }
                },

                objectType: function () {
                    if ({!isReadonly}) {
                        return noConflictJQuery('span[id*="objname"]').html();
                    } else {
                        return noConflictJQuery('select[id*="objname"]').val();
                    }
                },

                isRecipientAddressSupported: function () {
                    var objects = "{!supportedObjects}";
                    var obj = pageModel.objectType().replace(' ', '');
                    return objects.indexOf(obj) != -1;
                },

                ruleSendType: function () {
                    if ({!isReadonly}) {
                        return noConflictJQuery('span[id*="rule-sendType"]').html();
                    } else {
                        return noConflictJQuery('select[id*="rule-sendType"]').val();
                    }
                },

                setTimeBasedVisibility: function (checkStatus) {

                    if (pageModel.timeBasedDetailsVisible) {
                        var checkStatus = !checkStatus ? noConflictJQuery('[id*=showTimeBasedFormula]').is(':checked') : checkStatus;
                        if (checkStatus) {
                            noConflictJQuery('[timebasedEnabled="true"]').css('display', 'block');
                        } else {
                            noConflictJQuery('[timebasedEnabled="true"]').css('display', 'none');
                        }
                        noConflictJQuery('[id*="timeBasedDetails"]').show();
                        noConflictJQuery('[id*="task-due-date-offset-field"]').hide();
                    } else {
                        noConflictJQuery('[timebasedEnabled="true"]').css('display', 'block');
                        noConflictJQuery('[id*="timeBasedDetails"]').hide();
                        noConflictJQuery('[id*="task-due-date-offset-field"]').show();
                        noConflictJQuery('[timebasedEnabled="true"]').show();
                        pageModel.showFormulaInput();
                    }

                },

                setUniversalRuleVisibility: function () {
                    if (pageModel.universalRule) {
                        noConflictJQuery('[id*="ignoreAutosend"]').show();
                        noConflictJQuery('[id*="restrictManual"]').show();
                        noConflictJQuery('[id*="restrictCreateTask"]').show();
                    } else {
                        noConflictJQuery('[id*="ignoreAutosend"]').hide();
                        noConflictJQuery('[id*="restrictManual"]').hide();
                        noConflictJQuery('[id*="restrictCreateTask"]').hide();
                    }
                },

                setEvaluationCriteriaVisibility: function () {
                    if (pageModel.evaluationCriteriaVisible) {
                        noConflictJQuery('[id*="evaluationField"]').show();
                    } else {
                        noConflictJQuery('[id*="evaluationField"]').hide();
                    }
                },

                setRecipientAddressVisibility: function () {
                    if (pageModel.recipientAddressVisibility) {
                        noConflictJQuery('[id*="recipientAddressField"]').show();
                    } else {
                        noConflictJQuery('[id*="recipientAddressField"]').hide();
                    }
                },

                setRecipientTypeVisibility: function () {
                    if (pageModel.recipientTypeVisibility) {
                        noConflictJQuery('[id*="recipientTypeDiv"]').show();
                    } else {
                        noConflictJQuery('[id*="recipientTypeDiv"]').hide();
                    }
                },

                setRelatedToTypeVisibility: function () {
                    if (pageModel.relatedToTypeVisibility) {
                        noConflictJQuery('[id*="relatedToTypeDiv"]').show();
                    } else {
                        noConflictJQuery('[id*="relatedToTypeDiv"]').hide();
                    }
                },

                setGiftSenderVisibility: function () {
                    if (pageModel.giftSenderDetailsVisible) {
                        noConflictJQuery('[id*="giftSenderDetails"]').show();
                    } else {
                        noConflictJQuery('[id*="giftSenderDetails"]').hide();
                    }
                },

                resetAssignmentFields: function () {
                    noConflictJQuery('select[id*="assignToField"]').val(null);
                    noConflictJQuery('select[id*="assignToField"]').trigger('change');
                    noConflictJQuery('select[id*="assignationType"]').val(null);
                    noConflictJQuery('select[id*="assignationType"]').trigger('change');
                },

                setFormElementsVisibility: function () {
                    pageModel.setTimeBasedVisibility();
                    pageModel.setUniversalRuleVisibility();
                    pageModel.setEvaluationCriteriaVisibility();
                    pageModel.setRecipientAddressVisibility();
                    pageModel.setRecipientTypeVisibility();
                    pageModel.setRelatedToTypeVisibility();
                    pageModel.setTaskDetailsVisibility();
                    pageModel.setGiftVisibility();
                    pageModel.setSendTypeVisibility();
                    pageModel.setGiftSenderVisibility();
                    pageModel.setAutoSendOptionsVisibility();
                },

                checkFormulaSyntax: function (callback) {
                    if (noConflictJQuery('[id*="ruleEvaluationTypeField"]').val() != 'Criteria met') {
                        Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.RuleController.validateFormula}',
                                noConflictJQuery('[id*="formulaInputField"]').val(),
                                noConflictJQuery('[id*="objname"]').val(),
                                function (result, e) {
                                    pageModel.isFormulaValid = result.isValid;
                                    if (pageModel.isFormulaValid) {
                                        noConflictJQuery('[id*="validationMessage"]').addClass('bg-success');
                                        noConflictJQuery('[id*="validationMessage"]').removeClass('bg-danger');
                                    } else {
                                        noConflictJQuery('[id*="validationMessage"]').removeClass('bg-success');
                                        noConflictJQuery('[id*="validationMessage"]').addClass('bg-danger');
                                    }
                                    noConflictJQuery('[id*="validationMessage"]').html(result.message);
                                    if (callback !== null && callback !== undefined) {
                                        callback();
                                    }
                                });
                    } else {
                        pageModel.isFormulaValid = true;
                        if (callback !== null && callback !== undefined) {
                            callback();
                        }
                    }
                },

                setFrowButtonsVisibility: function () {
                    var filterLogic = noConflictJQuery.trim(noConflictJQuery('[id*=filterLogicPriority]').val());
                    if (filterLogic) {
                        noConflictJQuery('[id*="filterLogicPriority"]').show();
                        noConflictJQuery('#clearFilter').show();


                    } else {
                        noConflictJQuery('[id*="filterLogicPriority"]').hide();
                        noConflictJQuery('#clearFilter').hide();

                    }

                },

                setTaskDetailsVisibility: function () {
                    if (pageModel.taskDetailsVisible) {
                        noConflictJQuery('[id*="taskDetails"]').show();
                        noConflictJQuery('[id*="detailsHeader"]').html('Task Details');
                    } else if (pageModel.isAutoSendRule && !pageModel.universalRule) {
                        noConflictJQuery('[id*="taskDetails"]').show();
                        noConflictJQuery('[id*="detailsHeader"]').html('Assignment Options');
                    } else {
                        noConflictJQuery('[id*="taskDetails"]').hide();
                    }
                },

                setAutoSendOptionsVisibility: function () {
                    if (pageModel.isAutoSendRule || pageModel.universalRule) {
                        noConflictJQuery('[id*="task_subject_field"]').hide();
                        noConflictJQuery('[id*="task_description_field"]').hide();
                        noConflictJQuery('[id*="task-due-date-offset-field"]').hide();
                        noConflictJQuery('[id*="task-status"]').hide();
                        noConflictJQuery('[id*="task_assign_to_field"]').css('margin-top', '0');
                    } else {
                        noConflictJQuery('[id*="task_subject_field"]').show();
                        noConflictJQuery('[id*="task_description_field"]').show();
                        noConflictJQuery('[id*="task-status"]').show();
                        noConflictJQuery('[id*="task_assign_to_field"]').css('margin-top', '8px');
                        if (!pageModel.timeBasedDetailsVisible) {
                            noConflictJQuery('[id*="task-due-date-offset-field"]').show();
                        }
                    }
                },

                setGiftVisibility: function () {
                    if (pageModel.giftVisible) {
                        noConflictJQuery('[id*=selectGift]').show();
                    } else {
                        noConflictJQuery('[id*=selectGift]').hide();
                    }
                },
                setSendTypeVisibility: function () {
                    if (pageModel.sendTypeVisible) {
                        noConflictJQuery('[id*="sendTypeField"]').show();
                    } else {
                        noConflictJQuery('[id*="sendTypeField"]').hide();
                    }
                },

                showFormulaInput: function () {
                    var ruleEvaluationType = noConflictJQuery('[id*="ruleEvaluationTypeField"]').val();
                    if (ruleEvaluationType == 'Criteria met') {
                        noConflictJQuery('[id*="formulaInput"]').hide();
                        noConflictJQuery('[id*=criterionSet]').show();
                    } else {
                        noConflictJQuery('[id*="formulaInput"]').show();
                        noConflictJQuery('[id*=criterionSet]').hide();
                    }
                    pageModel.setFrowButtonsVisibility();
                },

                addPickListValue: function (toId, value) {
                    var toElement = noConflictJQuery(['[id*="', toId, '"]'].join(''));
                    var elementValue = toElement.val();

                    if (elementValue !== '' && elementValue !== null) {
                        if (elementValue.indexOf(value) == -1) {
                            toElement.val([elementValue, value].join('; '));
                        }
                    } else {
                        toElement.val(value);
                    }
                },

                addPickListValueHidden: function (toId, label, fakeId, value) {
                    pageModel.addPickListValue(fakeId, value);
                    pageModel.addPickListValue(toId, label);
                },

                getObjectIdsFromCriterions: function (referenceFields) {
                    var refObjectMap = {};
                    for (var i = 0; i < referenceFields.length; i++) {
                        var idsInput = referenceFields[i];
                        refObjectMap[idsInput.id] = {};
                        refObjectMap[idsInput.id].values = idsInput.value.split('%&%');
                        refObjectMap[idsInput.id].element = idsInput;
                    }
                    return refObjectMap;
                },

                loadIdTranslationMap: function (objectIds, element, callback) {
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getIdLabelMap}',
                            objectIds,
                            function (result, e) {
                                var idTranslationMap = {};
                                for (var id in result) {
                                    idTranslationMap[id] = result[id];
                                }
                                callback(idTranslationMap, element);
                            },
                            {escape: false});
                },

                replaceIdsInputValues: function (idTranslationMap, element) {
                    for (var id in idTranslationMap) {
                        element.value = element.value.replace(id, idTranslationMap[id]);
                    }
                },

                translateObjectIds: function (referenceFields) {
                    var refObjectMap = pageModel.getObjectIdsFromCriterions(referenceFields);
                    for (var key in refObjectMap) {
                        pageModel.loadIdTranslationMap(refObjectMap[key].values, refObjectMap[key].element, pageModel.replaceIdsInputValues);
                    }
                },

                fetchProductsForStore: function (storeId) {
                    noConflictJQuery('#loading-store-screen').show();
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.fetchProducts}',
                            storeId,
                            function (result, event) {
                                if (event.status) {
                                    pageModel.fillProductList(JSON.parse(result));
                                }
                                noConflictJQuery('#loading-store-screen').hide();
                            },
                            {escape: false}
                    );
                },

                fetchProducts: function () {
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.fetchStores}',
                            function (result, event) {
                                if (!event.status) {
                                    return;
                                }
                                pageModel.availableStores = JSON.parse(result) || [];
                                var storeFilter = document.getElementById('storeFilter');
                                storeFilter.innerHTML = pageModel.availableStores.map(function (item) {
                                    return '<option value="' + item.APIKey + '">' + item.Owner + '</option>';
                                }).join('');
                                if (pageModel.availableStores.length > 0) {
                                    pageModel.fetchProductsForStore(pageModel.availableStores[0].APIKey);
                                }
                                storeFilter.addEventListener('change', function () {
                                    pageModel.fetchProductsForStore(storeFilter.value);
                                })
                            },
                            {escape: false});
                },


                searchFieldClick: function (e) {
                    e.preventDefault();
                },

                initAssignToField: function () {
                    pageModel.fetchAssignToFields(pageModel.setFieldFromAvailableAssigneFields);
                },

                setFieldFromAvailableAssigneFields: function (availableFields) {
                    var assignationType = null;
                    var fieldValue = null;
                    if ({!isReadonly}) {
                        assignationType = "{!JSENCODE(Rule__c.Assigned_To_Type__c)}";
                        fieldValue = "{!JSENCODE(Rule__c.Assigned_To_Field__c)}";
                        noConflictJQuery('span[id*="assignToField"]').html(encodeText(availableFields[fieldValue]));
                    } else {
                        assignationType = noConflictJQuery('[id*="assignationType"]').val();
                        fieldValue = noConflictJQuery('[id*="rule_assignField"]').val();
                        if (fieldValue !== undefined && !(availableFields === undefined || availableFields[fieldValue] === undefined)) {
                            noConflictJQuery('select[id*="assignToField"]').html('<option selected="selected" value="' + fieldValue + '">' + encodeText(availableFields[fieldValue]) + '</option>');
                            noConflictJQuery('select[id*="assignToField"]').trigger('change');
                        } else {
                            noConflictJQuery('select[id*="assignToField"]').val(null);
                            noConflictJQuery('select[id*="assignToField"]').trigger('change');
                        }
                    }

                    if (!{!isReadonly}) {
                        var quertyHandler = assignationType == 'User' ? new RemoteUserHandler(false) : new AvailableObjectsQueryHandler(availableFields);
                        var optionTemplate = assignationType == 'User' ? userTemplate : fieldTemplate;

                        noConflictJQuery('select[id*="assignToField"]').select2({
                            selectId: '',
                            allowClear: true,
                            multiple: false,
                            minimumInputLength: 0,
                            width: '100%',

                            formatNoMatches: function () {

                            },

                            placeholder: "",
                            query: quertyHandler.handle,
                            templateResult: optionTemplate

                        });

                        noConflictJQuery('select[id*="assignToField"]').on("select2:select", function (e) {
                            e.params.data.text = decodeText(e.params.data.text);
                            noConflictJQuery('select[id*="assignToField"]').html('<option selected="selected" value="' + e.params.data.id + '">' + encodeText(e.params.data.text) + '</option>');
                            noConflictJQuery('select[id*="assignToField"]').trigger('change');
                        });
                    }
                },

                setDueDateOffset: function (element) {
                    var value = element.value;
                    var errorBlockId = element.getAttribute('error-message-block');
                    if (value == null || value === undefined || value == '') {
                        element.value = 0;
                        value = element.value;
                    }
                    if (isValidDay(value)) {
                        noConflictJQuery('input[id*="due-date-offset-field-original"]').attr('value', element.value);
                        noConflictJQuery('input[id*="taskdetails-duedate"]').attr('value', element.value);
                        noConflictJQuery('input[id*="time-due-date-offset-field"]').attr('value', element.value);
                        noConflictJQuery('input[id*="due-date-offset-field-original"]').val(element.value - 0);
                        noConflictJQuery('input[id*="taskdetails-duedate"]').val(element.value - 0);
                        noConflictJQuery('input[id*="time-due-date-offset-field"]').val(element.value - 0);
                        noConflictJQuery('[id*="' + errorBlockId + '"]').html('');
                        pageModel.isDueDateValid = true;
                    } else {
                        pageModel.isDueDateValid = false;
                        noConflictJQuery('[id*="' + errorBlockId + '"]').html('Value must be an integer number greater than or equal to 0');
                    }
                },

                fetchAssignToFields: function (callback) {
                    var assignationType = noConflictJQuery('[id*="assignationType"]').val();
                    var objectName = noConflictJQuery('[id*="objname"]').val();
                    if ({!isReadonly}) {
                        assignationType = "{!JSENCODE(Rule__c.Assigned_To_Type__c)}";
                        objectName = "{!JSENCODE(Rule__c.ObjectAPIName__c)}";
                    } else {
                        assignationType = noConflictJQuery('[id*="assignationType"]').val();
                        objectName = noConflictJQuery('[id*="objname"]').val();
                    }
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getAvailableAssignmentOptions}',
                            assignationType, objectName,
                            function (result, event) {
                                if (event.statusCode == 200) {
                                    var availableFields = JSON.parse(result);
                                    var optionsHtml = '';
                                    callback(availableFields);
                                }
                            },
                            {escape: false}
                    );
                },

                fillAssignedToFields: function () {
                    pageModel.fetchAssignToFields(pageModel.setFieldFromAvailableAssigneFields);
                },

                fillProductList: function (products) {
                    if (products && products.length == 0) {
                        document.getElementById('productList').innerHTML = '<p>No products for store</p>';
                        return;
                    }
                    var productList = '<li class="product-entry"><span></span></li>';
                    var selectedProduct = noConflictJQuery('[id*=gift-id-id]').val();
                    var productStore = noConflictJQuery('[id*=apiKey]').val();

                    for (var i = 0; i < products.length; i++) {
                        var productName = products[i].Name;
                        pageModel.products[products[i].ID] = products[i].Name;
                        var onclickEvt = ['pageModel.setGiftIdName(\"', products[i].ID, '\")'].join('');

                        if (!productStore && selectedProduct && selectedProduct == products[i].ID) {
                            noConflictJQuery('[id*=apiKey]').val(products[i].APIKey);
                        }

                        var onclickEvt = ['pageModel.setGiftIdName(\"', products[i].ID, '\",\"', products[i].APIKey, '\")'].join('');

                        productList += ['<li class=\'product-entry slds-dropdown__item\'><a href=\'#void\' onclick=\'', onclickEvt, '\'><p>',
                            ['<img class=\'product-logo\' src=\'https:', products[i].ImageURL, '\' width=\'40\' height=\'40\'/>'].join(''),
                            ['<label class=\'product-label\'>', productName, '</label>'].join(''),
                            '</p></a></li>'].join('');
                    }
                    document.getElementById('productList').innerHTML = productList;
                    noConflictJQuery('.product-search').on('click', pageModel.searchFieldClick);
                },

                setGiftIdName: function (giftId, apiKey) {
                    noConflictJQuery('input[id*="gift-name-id"]').val(pageModel.products[giftId]);
                    noConflictJQuery('textarea[id*="gift-id-id"]').val(giftId);
                    noConflictJQuery('label[id*="selectGift-label"]').html('Selected Gift');
                    noConflictJQuery('a[id*="selectGift"]').html(pageModel.products[giftId]);
                    noConflictJQuery('[id*=apiKey]').val(apiKey);
                    document.getElementById('gift-wrapper').classList.add('slds-hide');
                },

                showStoreContainer: function () {
                    document.getElementById('gift-wrapper').classList.remove('slds-hide');
                },

                setGiftUiName: function (giftName) {
                    if (noConflictJQuery('input[id*="gift-name-id"]').val() !== undefined && noConflictJQuery('input[id*="gift-name-id"]').val() !== '') {
                        noConflictJQuery('label[id*="selectGift-label"]').html('Selected Gift');
                        noConflictJQuery('a[id*="selectGift"]').html(noConflictJQuery('input[id*="gift-name-id"]').val());
                    }
                },

                clearGifts: function () {
                    noConflictJQuery('label[id*="selectGift-label"]').html('Select Gift');
                    noConflictJQuery('a[id*="selectGift"]').html('Gifts...');
                    noConflictJQuery('input[id*="gift-name-id"]').val('');
                    noConflictJQuery('textarea[id*="gift-id-id"]').val('');
                },

                initPopups: function () {
                    for (var popupId in helpTextsModel) {
                        if (popupId == 'add-filter-logic') {
                            noConflictJQuery('#' + popupId).popover({
                                content: helpTextsModel[popupId], placement: "top", html: true, animation: true,
                                template: '<div class="slds-popover" role="dialog" style="max-width: 600px; max-height: 250px;width:530px;height:210px;padding:0px;margin-top:-11px;position:absolute;left:-100px"><div class="slds-popover__body"><h3 class="popover-title"></h3><div class="popover-content"'
                                + 'style="width:100%;padding:0px;"></div></div></div>',
                                trigger: "hover"
                            });
                        } else if (popupId == 'ruleCrteriaImage') {
                            noConflictJQuery('#' + popupId).popover({
                                content: helpTextsModel[popupId], placement: "top", html: true, animation: true,
                                template: '<div class="slds-popover slds-nubbin--bottom" role="dialog" style="max-width: 600px; max-height: 500px;width:600px;height:500px;padding:0px;margin-top:-20px;position:absolute;"><div class="slds-popover__body"><h3 class="popover-title"></h3><div class="popover-content"'
                                + 'style="width:100%;padding:0px;"></div></div></div>',
                                trigger: "hover"
                            });
                        } else {
                            noConflictJQuery('#' + popupId).popover({
                                content: helpTextsModel[popupId],
                                placement: "top",
                                animation: true,
                                trigger: "click",
                                template: '<div class="slds-popover slds-nubbin--bottom" style="position:absolute;margin-top:-11px;width:auto;max-width:320px;" role="dialog"><div class="slds-popover__body"><h3 class="popover-title"></h3><div class="popover-content slds-text-align--left"'
                                + '></div></div></div>'
                            });
                        }
                    }
                },
                setReadonly: function () {
                    noConflictJQuery('.pfl-swagiq input').attr('disabled', 'disabled');
                    noConflictJQuery('[id*="giftSenderDetails"] .slds-input').attr('disabled', 'disabled');
                    noConflictJQuery('.pfl-swagiq input[type="checkbox"]').attr('disabled', 'disabled');
                    noConflictJQuery('.pfl-swagiq input[type="radio"]').attr('disabled', 'disabled');
                    noConflictJQuery('.pfl-swagiq select').attr('disabled', 'disabled');
                    noConflictJQuery('.pfl-swagiq textarea').attr('readonly', 'readonly');
                    noConflictJQuery('[id*="rowControlButtons"]').html('');
                    noConflictJQuery('.field.slds-input').attr('readonly', 'readonly');
                    for (var helpId in helpTextsModel) {
                        noConflictJQuery('#' + helpId).hide();
                    }
                },

                isNameValid: true,
                isDueDateValid: true,
                isFormulaValid: true,
                isTriggerTypeValid: true,
                isSendTypeValid: true,

                populateUserInfo: function () {
                    var userId = noConflictJQuery('select[id*="select-gift-sender-User"]').val();
                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getSelectedAutosenderUserInfo}',
                            userId,
                            function (result, event) {

                                if (event.statusCode == 200) {

                                    var resultSenderFirstName = result['firstName'];
                                    var resultSenderLastName = result['lastName'];
                                    var resultSenderPhone = result['phone'];
                                    var resultSenderEmail = result['email'];
                                    var resultSenderCompany = result['company'];
                                    var resultSenderCountry = result['country'];
                                    var resultSenderState = result['state'];
                                    var resultSenderCity = result['city'];
                                    var resultSenderPostalCode = result['zip'];
                                    var resultSenderAddressLine1 = result['addressline1'];
                                    var resultSenderAddressLine2 = result['addressline2'];

                                    noConflictJQuery('input[id*="gift-sender-FirstName"]').val(resultSenderFirstName);
                                    noConflictJQuery('input[id*="gift-sender-LastName"]').val(resultSenderLastName);
                                    noConflictJQuery('input[id*="gift-sender-Phone"]').val(resultSenderPhone);
                                    noConflictJQuery('input[id*="gift-sender-Email"]').val(resultSenderEmail);
                                    noConflictJQuery('input[id*="gift-sender-Company"]').val(resultSenderCompany);
                                    noConflictJQuery('input[id*="gift-sender-Country"]').val(resultSenderCountry);
                                    noConflictJQuery('input[id*="gift-sender-State"]').val(resultSenderState);
                                    noConflictJQuery('input[id*="gift-sender-City"]').val(resultSenderCity);
                                    noConflictJQuery('input[id*="gift-sender-PostalCode"]').val(resultSenderPostalCode);
                                    noConflictJQuery('input[id*="gift-sender-AddressLine1"]').val(resultSenderAddressLine1);
                                    noConflictJQuery('input[id*="gift-sender-AddressLine2"]').val(resultSenderAddressLine2);
                                    pageModel.validations.giftSender.validateFields();
                                }
                            },
                            {escape: false}
                    );
                },

                isReadyForSave: function () {
                    var triggerType = pageModel.ruleTriggerType();
                    var sendType = pageModel.ruleSendType();
                    var retValue = pageModel.validations.general.validateFields();
                    var objectAPINAme = pageModel.objectType();
                    if ('Universal' != triggerType) {
                        if ('Time Based' == triggerType) {
                            var timeBasedValid = pageModel.validations.timeBased.validateFields();
                            retValue = retValue && timeBasedValid;
                        }
                        if ('Create Task' == sendType) {
                            var createTaskValid = pageModel.validations.taskDetails.validateFields();
                            retValue = retValue && createTaskValid;
                        } else if ('Auto Send' == sendType) {
                            var giftSenderValid = pageModel.validations.giftSender.validateFields();
                            retValue = retValue && giftSenderValid;
                            if (pageModel.isRecipientAddressSupported()) {
                                var recAddressValid = pageModel.validations.recipientAddress.validateFields();
                                retValue = retValue && recAddressValid;
                            }
                        }
                    }

                    if (objectAPINAme == 'Task') {
                        var recipientTypeValid = pageModel.validations.recipientType.validateFields(),
                                relatedToTypeValid = pageModel.validations.relatedToType.validateFields();

                        retValue = retValue && recipientTypeValid & relatedToTypeValid;
                    }

                    if (objectAPINAme == 'Opportunity') {
                        var opportunityFieldValid = pageModel.validations.opportunity.validateFields();
                        retValue = retValue && opportunityFieldValid;
                    }
                    return retValue;
                },

                initFormulaEvents: function () {
                    pageModel.setFrowButtonsVisibility();
                    noConflictJQuery('#add-filter-logic').click(function (e) {
                        if (noConflictJQuery('[id*="filterLogicPriority"]').css('display') == 'none') {
                            noConflictJQuery('[id*="filterLogicPriority"]').show();
                            noConflictJQuery('#clearFilter').show();

                        } else {
                            noConflictJQuery('[id*="filterLogicPriority"]').hide();
                            noConflictJQuery('#clearFilter').hide();
                        }

                    });

                },

                init: function () {
                    if ({!isReadonly}) {
                        pageModel.setReadonly();
                        pageModel.formatCriterionDates();
                    }
                    pageModel.translateObjectIds(noConflictJQuery('input[id*="ref-dropdown-"]'));
                    pageModel.translateObjectIds(noConflictJQuery('input[id*="id-dropdown-"]'));

                    pageModel.setGiftUiName();
                    pageModel.initVisibilityVars();
                    pageModel.initAssignToField();
                    pageModel.setTimeBasedVisibility();
                    pageModel.setTaskDetailsVisibility();
                    pageModel.showFormulaInput();
                    pageModel.setFormElementsVisibility();
                    pageModel.initAvailableContactRoles(pageModel.initContactRoleSelect2);
                    noConflictJQuery('#select-offset-field').val(noConflictJQuery('input[id*="input-offset-field"]').val());
                    if (!{!isReadonly}) {
                        pageModel.fetchProducts();
                        pageModel.initGiftSenderUserSelect2();

                        noConflictJQuery('[id*="assignationType"]').on('change', pageModel.fillAssignedToFields);

                        noConflictJQuery('[id*="assignToField"]').on('change', function (e) {
                            noConflictJQuery('[id*="rule_assignField"]').val(e.target.value);
                            noConflictJQuery('[id*="rule_assignField"]').change();
                        });

                        noConflictJQuery('[id*="check-formula"]').on('click', function (e) {
                            pageModel.checkFormulaSyntax();
                        });

                        noConflictJQuery('.formula-builder-value').on('click', function (e) {
                            pageModel.addToFormula(e.target.getAttribute('formulaValue'));
                        });

                        noConflictJQuery('select[id*="triggerTypeValue"]').on('change', function (e) {
                            pageModel.initVisibilityVars();
                            pageModel.setFormElementsVisibility();
                        });

                        noConflictJQuery('[id*="sendType"]').on('change', function (e) {
                            pageModel.initVisibilityVars();
                            pageModel.setFormElementsVisibility();
                            pageModel.resetAssignmentFields();
                        });

                        noConflictJQuery('[id*="ruleEvaluationTypeField"]').on('change', pageModel.showFormulaInput);

                        noConflictJQuery('#select-offset-field').on('change', function (e) {
                            noConflictJQuery('input[id*="input-offset-field"]').val(e.target.value);
                        });

                        noConflictJQuery('select[id*="select-gift-sender-User"]').on('change', function (e) {
                            noConflictJQuery('input[id*="gift-sender-User"]').val(e.target.value);
                            pageModel.populateUserInfo();
                        });

                        pageModel.initPopups();
                    }
                    pageModel.onCriterionsUpdate();
                }

            };

            function applyQuery() {
                noConflictJQuery('.referenceQuery .chzn-search input').keyup(function (e) {
                    if (String.fromCharCode(e.keyCode) == null) {
                        return;
                    }

                    var target = jQuery(e.target),
                            q = target.val();
                    options = '';

                    var qSelect = target.parents('.referenceQuery').find('select');
                    var fullName = qSelect.find('option').data('fullname');
                    var partlyName = fullName.split('.');

                    Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.RuleController.getOptionsByQuery}',
                            q, partlyName[0], partlyName[1],
                            function (result, event) {
                                if (q == target.val()) {
                                    options = '<option data-fullname="' + fullName + '"></option>';
                                    var index;
                                    var objId;
                                    if (result.length > 0) {
                                        objId = result[0].Id;
                                        objId = objId.substring(0, 3);
                                    }
                                    if (objId == '005') {
                                        for (index = 0; index < result.length; ++index) {
                                            options += '<option data-fullname="' + fullName + '" value="' + result[index].Id + '">';
                                            if (result[index].ManagerId != null && result[index].ManagerId != '') {
                                                options += result[index].Name + ' (' + result[index].Manager.Name + ')';
                                            } else {
                                                options += result[index].Name + ' (No manager)';
                                            }
                                            options += '</option>';
                                        }
                                    } else {
                                        for (index = 0; index < result.length; ++index) {
                                            options += '<option data-fullname="' + fullName + '" value="' + result[index].Id + '">' + result[index].Name + ' (' + result[index].OwnerId + ')' + '</option>';
                                        }
                                    }

                                    qSelect.html(options).trigger('liszt:updated');
                                    target.val(q);
                                }
                            },
                            {escape: false}
                    );
                });
            }

            function reloadOptions() {
                noConflictJQuery('.query11').each(function () {
                    noConflictJQuery(this).next().val(noConflictJQuery(this).val());
                    noConflictJQuery(this).next().trigger('liszt:updated');
                });
            }


            noConflictJQuery(document).ready(function () {
                reloadOptions();
                pageModel.init();
                convertCheckBoxToLDS();

            });

            function convertCheckBoxToLDS() {
                var Row = document.getElementsByClassName("convertToLSD");
                try {
                    for (var k = 0; k < Row.length; k++) {
                        var colTds = Row[k].getElementsByTagName("td");
                        for (var i = 0; i < colTds.length; i++) {
                            var inrHtml = colTds[i].innerHTML;
                            var chkId = inrHtml.substring(inrHtml.indexOf("id=") + 4, inrHtml.indexOf("\"", inrHtml.indexOf("id=") + 4));
                            var chkBx = inrHtml.substring(inrHtml.indexOf("<input"), inrHtml.indexOf(">") + 1);
                            var chkLable = colTds[i].getElementsByTagName("label")[0].textContent;
                            var typeOfInput = colTds[i].getElementsByTagName("input")[0].getAttribute("type");
                            var newChkBox = '<label class="slds-' + typeOfInput + '" for="' + chkId + '">' + chkBx +
                                    '<span class="slds-' + typeOfInput + '--faux"></span>' +
                                    '<span class="slds-form-element__label">' + chkLable + '</span>' +
                                    '</label>';
                            colTds[i].innerHTML = newChkBox;
                        }
                    }
                } catch (err) {
                    console.log(err);
                }

            }

            function cancelClick(link) {
                if (link) {
                    if (typeof sforce !== 'undefined' && sforce && sforce.one) {
                        sforce.one.navigateToURL(link, true);
                    } else {
                        window.open(link, "_self");
                    }
                }
            }

            function checkExisting() {
                if (!{!isReadonly}) {
                    try {
                        pageModel.setOnSaveLoadingScreen(true);
                        pageModel.checkFormulaSyntax(function () {
                            if (pageModel.isReadyForSave()) {
                                saveRule();
                            } else {
                                pageModel.setOnSaveLoadingScreen(false);
                            }
                        });
                    } catch (e) {
                        pageModel.setOnSaveLoadingScreen(false);
                    }
                }
            }

            function clearFilter() {
                noConflictJQuery('[id*="filterLogicPriority"]').val('');
            }
            function updateSelectedOptions(handler, selects, values) {
                return handler(values, function (results) {
                    selects.val(results.map(function (elem) {
                        return elem['id'];
                    }));
                    selects.trigger("change");
                });
            };


        </script>
    </div>

</apex:page>