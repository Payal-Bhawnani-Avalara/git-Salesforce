<apex:page id="NotePassthroughTokenRefresh" controller="Evernote.EvernotePassthroughController" standardStylesheets="false" sidebar="false" showHeader="false" docType="html-5.0">
<apex:includeScript value="{!$Resource.Evernote__ThriftCombined}"  />
<apex:stylesheet value="{!$Resource.Evernote__EnSfdcStyles}" />
<apex:stylesheet value="{!$Resource.Evernote__WaitStyles}" />
<c:EvernoteConstants />
<c:TextResource />
<c:EvernoteJsLibrary />
<c:ErrorNotification />
<c:EvernoteTokenComponent />
<c:EvernoteLogger />    
<c:PopupWait />
<script type="text/javascript">
var textResource = new TextResource();    
var enLibrary = new EvernoteLibrary();
var errorHandler = new EvernoteErrorHandler();
var storeClients = new StoreClients(setupAfterStoreClientsLoaded, displayErrorMessageSafely, getSsoAuthentication);
var waitPanel;
var storeClientReady = false;    
var docComponentsReady = false;
var enLogger;    

document.addEventListener("DOMContentLoaded", documentReady);

function documentReady(event) {
	waitPanel = new WaitPanel();
    waitPanel.activate();

    docComponentsReady = true;
    viewNoteIfReady();
}   
    
function setupAfterStoreClientsLoaded() {    
    storeClientReady = true;
    viewNoteIfReady();
}

function viewNoteIfReady() {
	if (docComponentsReady && storeClientReady) {
        viewNote();
    }
}    

async function viewNote() {
	var noteGuid = enLibrary.getValueFromQueryString('n');	
	var isPersonal = enLibrary.getValueFromQueryString('p');
	var fromActivityLog = enLibrary.getValueFromQueryString('al');
	var sfdcId = enLibrary.getValueFromQueryString('sfdc');

	try {
		var hasRights = await doesUserHaveRightsToNote(noteGuid, isPersonal);
		if (!hasRights) {
			displayErrorMessage(textResource.texts.linkedNotes.error.noViewing);
			return;
		}
	} catch (err) {
		displayErrorMessage(err);
		return;
	}
	
    var shard;
	if (isPersonal) {
    	shard = storeClients.getUserShardId();
	} else {
		shard = storeClients.getBizShardId();
	}

	if (sfdcId) {
    		enLogger = new EvernoteLogger(sfdcId);
    		enLogger.setEnUserId(storeClients);
    		var qualifier = LoggingNoteQualifier.Integration;
    		if (fromActivityLog) {
    			qualifier = LoggingNoteQualifier.ActivityLog;
    		}
		enLogger.recordNoteEvent(noteGuid, LoggingNoteOperation.Open, qualifier);
    }

	var baseUrl = '{!baseUrl}';
    window.top.location.replace(baseUrl
    		+ enLibrary.getNoteEditorPath(baseUrl, noteGuid, shard, isPersonal));        
}

async function doesUserHaveRightsToNote(noteGuid, isPersonal) {
	var token;
	if (isPersonal) {
		token = await storeClients.getUserToken(); 
	} else {
		token = await storeClients.getBizToken(); 
	}
    var cardsMeta = await enLibrary.getNoteDetails(storeClients, [noteGuid], token, isPersonal);
    return enLibrary.isNonEmptyArray(cardsMeta);
}    

function getSsoAuthentication(uid, uemail) {
	enLibrary.deleteCookie(StoreClientConstants.UserTokenKey);
	var destination = enLibrary.getSsoLoginUrl(uid, '{!JSENCODE(baseUrl)}',
						'{!JSENCODE(longTokenCreated)}', encodeURIComponent(window.location.href));
	window.top.location.replace(destination);
}

function displayErrorMessageSafely(error) {
    if (document.readyState === 'loading') {
        document.addEventListener("DOMContentLoaded", () => {	 displayErrorMessage(error); });
        return;
    }
	displayErrorMessage(error);
}    
</script>    

<apex:outputPanel id="mainPanel" layout="block" styleClass="mainPanel">
<apex:form >
	<apex:actionFunction name="displayErrorMessage" action="{!displayErrorMessage}" immediate="true"
                             reRender="mainPanel" oncomplete="waitPanel.deactivate()">
		<apex:param name="errorMessage" value=""/>
    </apex:actionFunction>
</apex:form>

<c:EvernoteAuthenticationComponent id="errorMessageComponent" rendered="{!showErrorMessage}" ErrorMessage="{!errorMessage}"
                                         SalesforceRecordId=""  HideButtons="true" />
</apex:outputPanel>                                           
    
</apex:page>