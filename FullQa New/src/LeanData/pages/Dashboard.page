<apex:page sideBar="false" standardStylesheets="false" docType="html-5.0" controller="LeanData.DashboardBaseController" extensions="LeanData.RemotingRouter,LeanData.RoundRobinSettingController,LeanData.TaggingFieldController">
    <apex:stylesheet value="{!$Resource.LeanData__style}"/>
    <!-- Bootstrap Core CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'css/bootstrap.css')}" />
    <!-- Custom CSS -->
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'css/bootstrap-multiselect.css')}" />
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" />
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__magellan_app, 'css/magellan.css')}"/>
    <!-- Fonts -->
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:100,200,300,400,500,600,700' rel='stylesheet' type='text/css' />
    <apex:stylesheet value="{!$Resource.LeanData__loading_spinner}"/>
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/1.10.16-jquery.dataTables.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.LeanData__magellan_app, 'scss/magellan.css')}"/>
    <style>
        /******************************
         ***** BEGIN REVAMPED CSS *****
         ******************************/
        .page-content {
            background: #EEEFEF;
        }
        
        .main-content {
            height: 100%;
            min-height: 745px;
            padding-left: 230px;
            width: 100%;
        }

        .authorization-div {
            background-color: #FFF;
            border-bottom: 1px solid var(--lt-grey-2);
        }

        .header {
            background-color: #4D4D4D;
            font-size: 19px;
            width: 100%;
        }

        .header-title {
            color: var(--dk-grey-2) !important; /*set to be same color as background*/
            font-size: 21.5px;
            line-height: 55px;
            margin-left: 270px;
        }

        .left-sidebar {
            background: #70797b;
            height: calc(100% - 55px);
            padding-top: 25px;
            position: absolute;
            width: 230px;
            overflow: scroll;
        }
        .left-sidebar::-webkit-scrollbar {
            height: 0px !important;
            width: 5px !important;
        }
        .left-sidebar::-webkit-scrollbar-thumb {
            border-radius: 0px;
            background-color: #70797b;
            -webkit-box-shadow: inset 0 0 4px rgba(0,0,0,0.3);
        }
        .left-sidebar::-webkit-scrollbar-track {
            border-radius: 0px;
            background-color: #828a8c;
            -webkit-box-shadow: inset 0 0 2px rgba(0,0,0,0.3);
        }

        .dg_inner-wrapper {
            background: #FFF;
            min-height: 800px;
            padding: 10px 30px 50px 40px;
            width: 1115px;
        }
        
        .dg_inner-wrapper-header {
            color: #000000;
            border-bottom: 1px solid var(--lt-grey-2);
            font-size: 19px;
            padding-bottom: 10px;
            width: 100%;
        }

        .dg_inner-wrapper-header-legacy {
            color: #000000;
            border-bottom: 1px solid var(--lt-grey-2);
            font-size: 19px;
            padding-bottom: 10px;
            width: 100%;
            height: 50px;
            text-align: center;
            line-height: 50px;
        }

        /* Begin CSS used on Template Only 
        ----------------------------------
        */
        .bs {
            line-height: 1;
            font-family: 'Open Sans', sans-serif;
            font-weight: 200;
            font-size: 16px;
            display: table;
            width: 100%;
        }
        
        .bs .loadingOverlay {    
            width: calc(100% - 230px);
            position: absolute;
            margin-left: 0px;
            margin-top: 0px;
            height: calc(100% - 55px);
            z-index: 5;
            background: rgba(140, 142, 143, 0.8);
        }
        
        .bs .loadingParent {
            width: 200px;
            margin-left: auto;
            margin-right: auto;
            margin-top: 150px;
        }
        
        .bs .page-content {
            width: 100%;
            min-height: 800px;
            padding: 0px 0px;
            float: left;
            position: relative;
        }
        
        .bs .fix-header {
            position: fixed;
            top: 0;
            opacity: 0.9;
            z-index: 9999;
        }
        
        .bs .logo {
            display: block;
            float: left;
            margin-left: 40px;
            margin-top: 7px;
            cursor: pointer;
        }
        
        .bs .package-logo {
            width: 180px;
            margin-left: 20px;
            margin-top: 0;
        }
        
        .bs .package-logo img {
            width: 180px;
            position: relative;
            top: 7px;
        }
        
        .bs .left-sidebar-title {
            color: #65d2bd;
            padding: 0 0 9px 35px;
            font-size: 15px;
            border-bottom: 1px white solid;
            margin-bottom: 20px;
        }
        
        .bs .left-sidebar-goprevious {
            
            background: url("{!URLFOR($Resource.LeanData__DashboardImages, 'Double_Arrow_Icon.png')}") no-repeat 99%;
            background-position: 64px 6px;
            background-size: 10px;
            font-size: 12px;
            color: white;
            cursor: pointer;
            padding: 5px 25px 5px 80px;
            margin: 5px 0 5px -35px;
        }
        
        .bs .left-sidebar-goprevious:hover {
            background: #828a8c url("{!URLFOR($Resource.LeanData__DashboardImages, 'Double_Arrow_Icon.png')}") no-repeat 99%;
            background-position: 64px 6px;
            background-size: 10px;
        }

        .bs .left-sidebar-button {
            text-decoration: none !important;
            overflow: hidden;
            display:block;
            width: 100%;
            color: white;
            font-size: 13px;
            padding-left: 10px;
            padding-top: 8px;
            padding-bottom: 8px;
            background: #70797b;
            cursor: pointer;
        }
        
        .bs .left-sidebar .nav-click {
            position: relative;
        }
        
        .bs .left-sidebar > .left-sidebar-button:nth-child(even) {
            border-top: 1px solid #778082;
        }
        
        .bs .left-sidebar-button:hover {
            background: #828a8c;
            color: white;
        }
        .bs .left-sidebar-button:focus {
            color: white;
        }
        
        .bs .left-sidebar-button-active {
            background: #70797b;
        }

        .bs .left-sidebar-button-active:hover {
            background: #828a8c;
        }

        .bs .left-sidebar-button-title {    
            margin-left: 7px;
            display: inline-block;
            line-height: 17px;
            height: 100%;
        }

        .bs .left-sidebar-button-img {
            display: inline-block;
        }

        .bs .left-sidebar-button-img .icon{
            width: 22px;
            height: 22px;
            position: relative;
            bottom: 2px;
        }

        .bs .left-sidebar-subnav-section {
            line-height: 1.2;
        }

        .bs .left-sidebar-button-active .left-sidebar-button-title img.dg_sidebar-expand-arrow,
        .bs .left-sidebar-subnav-item-active .left-sidebar-subnav-item-title img.dg_sidebar-expand-arrow,
        .bs .left-sidebar-subsubnav-item-active .left-sidebar-subsubnav-item-title img.dg_sidebar-expand-arrow,
        .bs .left-sidebar-subsubsubnav-item-active .left-sidebar-subsubsubnav-item-title img.dg_sidebar-expand-arrow {
            display: none !important;
        }
        .bs .left-sidebar-button-active .left-sidebar-button-title img.dg_sidebar-expand-arrow-active,
        .bs .left-sidebar-subnav-item-active .left-sidebar-subnav-item-title img.dg_sidebar-expand-arrow-active,
        .bs .left-sidebar-subsubnav-item-active .left-sidebar-subsubnav-item-title img.dg_sidebar-expand-arrow-active,
        .bs .left-sidebar-subsubsubnav-item-active .left-sidebar-subsubsubnav-item-title img.dg_sidebar-expand-arrow-active {
            display: inline !important;
        }

        .bs .left-sidebar-subnav-item {
            text-decoration: none !important;
            display:block;
            color: white;
            font-size: 12px;
            padding: 5px 15px 5px 55px;
            cursor: pointer;
        }

        .bs .left-sidebar-button-active {
            background-color: #6a7274 !important;
        }
        .bs .left-sidebar-subnav-section-active {
            background-color: #6a7274 !important;
        }

        .bs .left-sidebar-button-active .left-sidebar-button-title {
            color: var(--ld-lt-green-2);
        }

        .bs .left-sidebar-subnav-item .left-sidebar-subnav-item-title {
            display:block;
            padding: 0px;
        }

        .bs .left-sidebar-subnav-item:last-child {
        }

        .bs .left-sidebar-subnav-item:hover {
            background: #828a8c;
            color: white;
        }
        .bs .left-sidebar-subnav-item:focus {
            color: white;
        }
        
        .bs .left-sidebar-subnav-item-active .left-sidebar-subnav-item-title {
            color: var(--ld-lt-green-2);
        }
        
        .bs .left-sidebar-subnav-item-active:hover .left-sidebar-subnav-item-title {
            background: #828a8c;
        }

        .bs .left-sidebar-subsubnav-section {
            line-height: 1.2;
        }

        .bs .left-sidebar-subsubnav-item {
            text-decoration: none !important;
            display:block;
            color: white;
            font-size: 12px;
            padding: 5px 0px 5px 65px;
            cursor: pointer;
        }

        .bs .left-sidebar-subsubnav-item .left-sidebar-subsubnav-item-title {
            display:block;
            padding: 0px;
        }

        .bs .left-sidebar-subsubnav-item:hover {
            background: #828a8c;
            color: white;
        }
        .bs .left-sidebar-subsubnav-item:focus {
            color: white;
        }
        
        .bs .left-sidebar-subsubnav-item-active .left-sidebar-subsubnav-item-title  {
            color: var(--ld-lt-green-2);
        }
        
        .bs .left-sidebar-subsubnav-item-active:hover .left-sidebar-subsubnav-item-title  {
            background: #828a8c;
        }

        .bs .left-sidebar-subsubsubnav-item {
            text-decoration: none !important;
            display:block;
            color: white;
            font-size: 12px;
            padding: 5px 0px 5px 70px;
            cursor: pointer;
        }

        .bs .left-sidebar-subsubsubnav-item:hover {
            background: #828a8c;
            color: white;
        }
        .bs .left-sidebar-subsubsubnav-item:focus {
            color: white;
        }
        
        .bs .left-sidebar-subsubsubnav-item-active {
            color: var(--ld-lt-green-2);
        }
        
        .bs .left-sidebar-subsubsubnav-item-active:hover {
            background: #828a8c;
            color: var(--ld-lt-green-2);
        }
        .bs .left-sidebar-subsubsubnav-item-active:focus {
            color: var(--ld-lt-green-2);
        }

        a.expandMenu {
            position: absolute;
            right: 16px;
        }

        .bs .disabledLink {
            cursor: not-allowed !important;
            color: var(--med-grey-1) !important;
        }
        
        .bs .nav-click.disabledLink .icon_inactive, .bs .nav-click:not(.disabledLink) .icon_disabled, .bs .nav-click.left-sidebar-button-active .icon_disabled {
            display: none;
        }

        .bs .dg_sidebar-expand-arrow{
            margin-left: 10px;
            margin-bottom: 2px;
            width: 4.5px;
            height: 9.5px;
        }

        .bs .dg_outer-wrapper {
            background: white;
            border: 1px solid var(--lt-grey-2);
            border-radius: 7.5px;
            width: 100%;
            margin-bottom: 20px;
        }

        .bs .dg_outer-wrapper:after {
            content: '';
            display: block;
            clear: both;
        }
        
        .bs .dg_outer-wrapper-header {
            width: 100%;
            height: 50px;
            font-size: 19px;
            color: #000000;
            text-align: center;
            line-height: 50px;
            border-bottom: 1px solid #9da8bf;
            display: inline-block;
        }
        
        .bs .dg_outer-wrapper-content {
            padding: 20px 20px 0 20px;
        }

        .bs .dg_inner-wrapper-header-right {
            float: right;
            font-size: 11px;
            padding-right: 17.5px;
            cursor: pointer;
        }

        .bs .dg_inner-wrapper-subheader {
            font-size: 16px;
            font-weight: 200;
        }

        .bs .dg_upperright-absolute {     
            margin-top: -75px;
            float: right;
            margin-right: 30px;
            position: relative;
            font-size: 11px;
            top: 35px;
        }
        
        .bs .dg_inner-wrapper-content {
            width: 100%;
            margin-top: 20px;
            margin-bottom: 20px;
        }
        
        .bs .dg_inner-wrapper-content:after {
            content: '';
            display: block;
            clear: both;
        }
        
        .bs .dg_floated-item {
            float: left;
            margin-right: 20px
        }
        
        .bs .dg_item-title {
            font-size: 16px;
            color: #555555;
            margin-bottom: 20px;
        }
        
        .bs .dg_status-column {
            width: 33%;
            height: 150px;
            float:left;
            padding: 5px;
        }
        
        .bs .dg_status-column-title {
            font-size: 16px;
            margin: 15px 0;
            color: #555;
            font-weight: 400;
            text-align: center;
        }

        .bs .dg_status-column-info {
            margin-top: 22.5px;
            width: 310px;
            height: 90px;
            margin-left:auto;
            margin-right:auto;
            color: #555;
            font-size:12.5px;
            line-height: 18px;
            text-align: justify;
            text-justify: inter-word;
        }

        .bs .dg_status-column:not(:first-child) {
            border-left: 1px solid var(--lt-grey-2);
        }
        
        .bs .dg_status-column-sub {
            height: 50%;
            display: flex;
            align-items: center;
        }
        
        .bs .dg_status-column-sub:not(:first-child) {
            border-top: 1px solid var(--lt-grey-2);
        }
        
        .bs .dg_products-enabled {
            width: max-content; 
            width: intrinsic;
            width: -moz-max-content;
            margin-left: auto;
            margin-right: auto;
        }
        .bs .dg_products-enabled-item {
            margin-bottom: 10px;
        }
        
        .bs .dg_products-enabled-item-child {
            margin-left: 28px;
        }

        .bs .dg_products-enabled-item-checkbox {
            margin-bottom: 5px;
        }

        .bs .dg_products-enabled-item-title {
            color: #555;
            font-size: 16px;
            margin-left: 5px;
        }
        
        .bs .dg_products-info {
            margin-top:  30px;
            text-align: center;
        }
        
        .bs .dg_products-info-item {
            display: inline-block;
            width: 200px;
            margin: 0 auto;
        }
        
        .bs .dg_products-info-item-title {
            color: #555;
            font-size: 12.5px;
            margin-bottom: 3px;
        }
        
        .bs .dg_products-info-item-content {
            font-size: 30px;
            color: #555;
            margin-bottom: 3px;
        }

        .bs .dg_section {
            float: left;
            margin-left: 65px;
            height: max-content; 
            height: intrinsic;
            height: -moz-max-content;

            width: 160px;
            margin-top: 57.5px;
        }

        .bs .dg_section-nav {
            width: 185px;
            height: 135px;
            cursor: pointer;
            position: relative;
        }
        
        .bs .dg_section-nav-title {
            margin-top: 22.5px;
            color: #4D4D4D;
            text-align: center;
            font-weight: 400;
            font-size: 13px;
            
        }
        
        .bs .dg_section-nav-image {
            margin-left:auto;
            margin-right:auto;
            display:block;
        }

        .bs .dg_section-subbox {
            margin-left: auto;
            margin-right: auto;
            width: max-content;
            width: intrinsic;
            width: -moz-max-content;
        }

        .bs .dg_section-subbox-item {    
            font-size: 12.5px;
            margin-bottom: 5px;
            color: #555;
            display: block;
        }

        a.dg_section-subbox-item:focus {
            text-decoration: none;
            color: #555;
        }

        .bs .dg_section-subbox-item:hover {
            color: #1abc9c;
            cursor: pointer;
            text-decoration: none
        }
        
        .dg_inner-wrapper-content h5 {
            font-size: 16px;
            line-height:45px;
        }
        
        .dg_inner-wrapper-content h6 {
            font-size: 12px;
            font-weight: 400;
            line-height:25px;
        }
        
        .dg_inner-wrapper-content p {
            font-size: 12px;
            margin-bottom: 27.5px;
            color: var(--dk-grey-2);
            line-height:20px;
        }
        
        .bs .dg_date-input {
            width: 90px;
            text-align: center;
            color: #555;
            height: 24px;
            line-height: 0px;
            font-size: 13px;
            font-weight: 200;
            margin-right: 5px;
        }
        
        .bs .dg_date-text {
            font-weight: 600;
            font-size: 11px;
        }

        .bs .dg_date-label {
            background-size: 16.5px 20px;
            background-repeat: no-repeat;
            width: 20px;
            height: 29px;
            cursor: pointer;
            position: absolute;
            background-image: url("{!URLFOR($Resource.LeanData__DashboardImages, 'Calendar_Icon.png')}");
        }

        .bs .dg_date-label:hover {
            background-image: url("{!URLFOR($Resource.LeanData__DashboardImages, 'Calendar_Icon_hover.png')}");
        }


        .bs .btn {
            font-weight: 200;
        }

        .bs .dg_centeredfooter {
            margin: 35px auto;
            display: table;
        }

        .bs .dg_main-button {
            cursor: pointer;
            font-size: 14px;
            font-weight: 200;
            font-family: 'Open Sans';
            width: max-content;
            width: intrinsic;
            width: -moz-max-content;
            min-width:150px;
            padding: 0px 20px;
            line-height: 37.5px;
            border-radius: 3px;
            text-align:center;
        }
        
        .bs .dg_main-button {
            color: white;
            background: var(--ld-green);
            border: none;
        }
        
        .bs .dg_main-button:hover {
            opacity: .5;
        }

        .bs .dg_button {
            margin-left:20px;
            display:block;
            float:left;
        }

        .bs a.dg_main-button:hover,
        .bs a.dg_main-button:active,
        .bs a.dg_main-button:visited,
        .bs a.dg_main-button:focus {
            color: white;
            text-decoration: none;
        }

        .bs .dg_sub-button {
            width:190px;
            color: var(--dk-grey-2);
            background: var(--white);
            border:1px solid var(--lt-grey-2);
        }

        .bs .dg_sub-button:hover {
            background: var(--lt-grey-2);
            border-color: var(--lt-grey-2);
        }
        
        .bs .headerSortUp {
            background: #f0f8ff url("{!URLFOR($Resource.LeanData__Reporting_Images, 'Up_Arrow_Icon.png')}") no-repeat 99%;
            background-size: 9.5px 5.5px;
        }
        
        .bs .headerSortDown {
            background: #f0f8ff url("{!URLFOR($Resource.LeanData__Reporting_Images, 'Down_Arrow_Icon.png')}") no-repeat 99%;
            background-size: 9.5px 5.5px;
        }
        
        .bs .dg_inner-wrapper-content::-webkit-scrollbar {
            -webkit-appearance: none;
            width: 7px;
        }
        
        .bs .dg_inner-wrapper-content::-webkit-scrollbar-thumb {
            border-radius: 4px;
            background-color: rgba(0, 0, 0, .5);
            -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
        }
        
        /* Table Styling */        
        .bs .dg_details-table-innerdiv {
            max-height: 230px;
            height: 230px;
            overflow: auto;
        }
        
        
        .bs .dg_details-table-innerdiv::-webkit-scrollbar {
            -webkit-appearance: none;
            width: 7px;
        }
        
        .bs .dg_details-table-innerdiv::-webkit-scrollbar-thumb {
            border-radius: 4px;
            background-color: rgba(0, 0, 0, .5);
            -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
        }
        
        .bs .dg_details-table-div table {
            font-family: 'Open Sans', sans-serif;
            width: 100%;
            table-layout: fixed;
            font-size: 11px;
        }
        
        .bs .dg_details-table-div th {
            background-color: var(--lt-grey-2);
            font-weight: 600;
            vertical-align: middle !important;
            border-bottom: none !important;
            padding: 5px 5px 5px 25px !important;
            font-family: 'Open Sans', sans-serif;
        }
        
        .bs .dg_details-table-div th a {
            cursor: pointer !important;
        }
        
        .bs .dg_details-table-div th a:hover {
            text-decoration: none !important;
        }
        
        .bs .dg_details-table-div td {
            border-top: 1px solid var(--lt-grey-2);
            padding: 5px 5px 5px 25px;
            font-family: 'Open Sans', sans-serif;
        }

        .bs .dg_details-table-div tr {
            height: 37.5px;
        }

        .bs .dg_details-table-div tr:nth-child(odd) {
            background-color: var(--white);
        }

        .bs .dg_details-table-pagination {
            float: right;
            margin-top: 20px;
            font-size: 12.5px;
            font-weight: 200;
            color: #555555;
        }
        
        .bs .dg_details-table-pagination-page {
            padding: 5px;
            cursor: pointer;
        }

        .bs .dg_details-table-pagination-page:hover {
            color: var(--ld-green);
        }
        
        .bs .dg_details-table-pagination-page-active {
            color: black;
            font-weight: 400;
        }
        /* End of table styling. */
        
        .dg_axis-choices-div {
            position: absolute;
            margin-left: 270px;
        }
        
        .bs .dg_y-axis-choice {
            z-index: 100;
        }
        
        .bs .dg_x-axis-choice {
            z-index: 100;
        }
        
        .bs .bs .dg_highchart {
            width: 850px;
            height: 530px;
            margin: 35px auto 20px auto;
        }
        
        .bs .dg_saveclose-nav {
            margin: 12.5px 20px 37.5px 0;
            clear: both;
            float: right;
        }
        
        .bs .customHeaderContent-right {
            float: right;
            margin: 12.5px 37.5px 0 0;
        }
        
        .bs .customHeaderContent-right-information {
            height: 18px;
            width: 18px;
            position: relative;
            top: 15px;
        }
        
        .bs .customHeaderContent-right-wizard {
            height: 28.5px;
            width: 165px;
            margin-right: 37.5px;
        }
        
        .bs .settingsLink {
            display: block;
            margin-bottom: 5px;
            cursor: pointer;
            width: intrinsic;
        }
        
        .bs .settingsLinkIcon {
            cursor: pointer;
            position: relative;
            top: -2px;
            width: 20px;
            height: 20px;
        }
        
        .bs .settingsLinkLabel {
            cursor: pointer;
            margin-left: 5px;
            font-size: 11px;
            color: #5e7178;
            font-weight: 400;
        }
        
        .bs .settingsLinkLabel:hover {
            text-decoration: underline;
        }
        
        .bs .settingsLinkStatus {
            margin-left: 5px;
            display: block;
        }
        
        .bs .selectList {
            border-radius: 0px !important;
            background: white !important;
            padding: 5px 10px !important;
            color: #5e7178 !important;
        }
        
        .bs .settings-nav {
            margin-top: 55px;
        }
        
        .bs select {
            border-radius: 0px;
            padding: 5px 8px;
            box-shadow: none;
            -webkit-appearance: menulist;
        }
        
        .bs .dg_picklist,
        .multiselect {
            font-size: 12px !important;
            width: 250px;
            height: 30px !important;
            border-radius: 0px;
            border: 1px solid var(--lt-grey-2);
        }
        
        .bs .darkBlueBG {
            background: #1b527f;
        }
        
        .bs .yellowBG {
            background: #ffc708;
        }
        
        .bs .blueBG {
            background: #45b7e6;
        }
        
        .bs .open-sans-light {
            font-family: open-sans-light;
        }
        
        @font-face {
            font-family: open-sans-light;
            src: url("{!URLFOR($Resource.LeanData__OpenSansLight)}");
        }
        
        .funnelBG {
            background: url("{!URLFOR($Resource.LeanData__Reporting_Images, 'Funnel_1.png')}") no-repeat;
            background-size: 100%;
        }
        
        .bs .dg_styled-select select {
            background: transparent;
            width: 100%;
            padding: 0px 25px 0px 5px;
            line-height: 14px;
            font-size: 13px;
            border: 0;
            border-radius: 0;
            height: 44px;
            -webkit-appearance: none;
            -moz-appearance: none;
        }
        
        .bs .dg_styled-select {
            width: 280px;
            background: url("{!URLFOR($Resource.LeanData__Reporting_Images, 'Down_Arrow_Icon.png')}") no-repeat right #fff;
            background-size: 9.5px 5.5px;
            border: 1px solid var(--lt-grey-2);
            background-position: right 10px top 12px;
            line-height: 12px;
        }
        
        .bs .dropdown-toggle {
            width: 100%;
            border: none;
            background: transparent;
            text-align: left;
            -webkit-box-shadow: none !important;
            box-shadow: none !important;
        }
        
        .bs .dropdown-toggle:hover {
            background: transparent;
        }
        
        .bs .dropdown-toggle:focus {
            background: transparent;
            -webkit-box-shadow: none !important;
            box-shadow: none !important;
        }
        
        .bs .btn-group {
            width: 100%;
        }
        
        .bs .btn-group > .btn:first-child:active {
            background: transparent;
        }
        
        .bs .dropdown-menu {
            width: 100%;
        }
        
        .dropdown-toggle .caret {
            display: none;
        }
        
        .bs .multiselect-container>li>a>label {
            padding-left: 20px;
        }   

        .bs .dropdown-menu > .active > a, .bs .dropdown-menu > .active > a:hover, .bs .dropdown-menu > .active > a:focus {
            background-color: #ffffff;
            color:black;
        }

        .bs .dg_wordbreak {
            word-wrap: break-word;
        }

        .bs .dg-button-blue {
            float:left;
            width:75px;
            height:27.5px;
            cursor: pointer;
            color: #ffffff;
            font-size: 11px;
            font-weight: 200;
            font-family: 'Open Sans';
            text-align: center;
            line-height: 25px;
            border-radius: 5px;
            background: #1b527f;
            border: 1px solid #9da8bf;
        }
        
        .bs .fileName{
            align-content: left;
            font-size:13px;
            font-weight:400;
            font-family: "Open Sans";
            color: #555555;
            margin-top:8px;
            margin-right:20px;
            float:left;
        }
        .bs .SubHeader {
            justify-content:center;
            align-items:center;
            font-size: 12px;
            font-weight: 200;
            font-family: 'Open Sans';
            color: #000000;
            line-height: 20px;
        }
        /* BS Multiselect Dropdown margin. */
        ul li, ol li {
            margin-left: 0;
        }
        
        /* CUSTOM RADIO BUTTON AND CHECKBOX STYLING. */
        /* Hide real checkbox and radio buttons. */
        input.styledInput[type=checkbox]:not(old),
        input.styledInput[type=radio   ]:not(old){
            display:none;
        }

        input.styledInput[type=radio]:not(old) + label,
        input.styledInput[type=checkbox]:not(old) + label {
            padding-left: 28px;
            cursor: pointer;
            font-weight: 200;
            font-size: 12.5px;
            color: #555;
        }

        /* Radio button styling. */
        input.styledInput[type=radio]:not(old) + label {
            height: 15px;
        }

        input.styledInput[type=radio]:not(old) + label{
            background   : url("{!URLFOR($Resource.LeanData__DashboardImages, 'Radial_Button_unselected.png')}") no-repeat 0 0;
            background-size: 15px;
        }

        input.styledInput[type=radio]:not(old):checked + label{
            background   : url("{!URLFOR($Resource.LeanData__DashboardImages, 'Radial_Button_selected.png')}") no-repeat 0 0;
            background-size: 15px;
        }

        /* Checkbox styling. */
        input.styledInput[type=checkbox]:not(old) + label {
            height: 20px;
            line-height: 20px;
        }

        input.styledInput[type=checkbox]:not(old) + label, label + input.styledInput[type=checkbox]:not(old) {
            background   : url("{!URLFOR($Resource.LeanData__DashboardImages, 'Checkmark_Icon_unselected.png')}") no-repeat 0 0;
            background-size: 20px;
        }
        
        input.styledInput[type=checkbox]:not(old):checked + label, label + input.styledInput[type=checkbox]:not(old):checked {
            background   : url("{!URLFOR($Resource.LeanData__DashboardImages, 'Checkmark_Icon_selected.png')}") no-repeat 0 0;
            background-size: 20px;
        }

        /* Calendar style changes. */
        .ui-datepicker-header {
            background: #EEEFEF;
        }

        .ui-widget {
            font-family: open-sans-light !important;
            font-weight: 200 !important;
        }

        .ui-state-default {
            text-align: center;
        }

        .ui-state-active {
            background: #65d2bd;
        }

        .ui-icon {
            background-image: url("{!URLFOR($Resource.LeanData__DashboardImages, 'ui-icons_222222_256x240.png')}") !important;
        }

        .bs .pagination-item {
            width: 40px;
            text-align: center;
            cursor: pointer;
        }

        .bs .selected-page {
            font-weight: bold;
        }

        .bs .pagination-back {
            width: 80px;
            text-align: center;
            background-repeat: no-repeat;
            background-image: url("/resource/1504032208000/DashboardImages/Logs/pagination_arrow_unselected_icon_L.png");
            padding-left: 10px;
            background-position: 10px;
        }

        .bs .pagination-back:hover {
            background-image: url("/resource/1504032208000/DashboardImages/Logs/pagination_arrow_selected_icon_L.png");
        }

        .bs .pagination-next {
            width: 60px;
            text-align: center;
            background-repeat: no-repeat;
            background-image: url("/resource/1504032208000/DashboardImages/Logs/pagination_arrow_unselected_icon_R.png");
            background-position: 44px;
        }

        .bs .pagination-next:hover {
            background-image: url("/resource/1504032208000/DashboardImages/Logs/pagination_arrow_selected_icon_R.png");
        }

        .stencil-dropdown-item .upsell-label {
          /*fill: #e09d0d;*/
          fill : red;
        }

        .upsell-container {
          display: none;
          background-color: var(--lt-grey-2);
          border: 1px solid var(--med-grey-1);
          font-family: "Open Sans", sans-serif;
          font-weight: var(--light);
          font-size: 16px;
          padding: 20px 20px 10px 20px;
          cursor: auto;
          max-width: 470px;
        }
        
        .left-sidebar-popover-container .upsell-container, .home-component-popover-container .popover .upsell-container {
            display: block;
            border: none; 
            position: initial;
            margin-bottom: 0;
            max-width: 470px;
        }
        
        .left-sidebar-popover-container .popover, .home-component-popover-container .popover {
            background-color: var(--lt-grey-2);
            border-radius: 0;
            max-width: none;
        }
        
        .left-sidebar-popover-container .popover-content, .home-component-popover-container .popover .popover-content {
            padding: 0;
        }
        
        .left-sidebar-popover-container .popover.right > .arrow:after {
            border-right-color: var(--lt-grey-2);
        }

        .home-component-popover-container .popover.top > .arrow:after {
            border-top-color: var(--lt-grey-2);
        }
        
        .upsell-for-stencil {
          width: 470px;
          position: absolute;
          top: 0;
          right: 100;
        }
        #node-properties-wrapper .upsell-for-inspector {
          width: 435px;
          position: absolute;
          top: 0;
          left: 0;
          margin-bottom: 20px;
          z-index: 1;
        }
        #node-properties-wrapper .upsell-for-inspector .upsell-title {
          font-family: "Open Sans", sans-serif;
          font-size: 16px;
        }
        #node-properties-wrapper .upsell-for-inspector .upsell-body {
          font-family: "Open Sans", sans-serif;
          font-size: 12px;
        }
        #node-properties-wrapper .upsell-for-inspector .upsell-link {
          font-family: "Open Sans", sans-serif;
          font-size: 15px;
        }
        .upsell-container .upsell-ribbon {
          position: absolute;
          width: 60px;
          top: 0px;
          right: 0px;
          cursor: pointer;
        }
        .upsell-content {
          padding: 20px 20px 10px 20px;
        }
        .upsell-container .upsell-title {
          font-weight: var(--regular) !important;
          font-size: 14px !important;
          color: var(--dk-grey-2) !important;
        }
        .upsell-container .upsell-body {
          padding: 14px 0 17px 0!important;
          font-size: 12px!important;
          font-weight: var(--light) !important;
          color: var(--lt-grey-2) !important;
        }
        .upsell-container .upsell-link {
          background-color: var(--ld-green) !important;
          height: 25px! important;
          color: var(--white) !important;
          padding: 0 20px 0 20px!important;
          text-align: center!important;
          display: table!important;
          margin: 0 auto!important;
          font-size: 15px!important;
          height: auto!important;
          padding: 8px 20px!important;
          text-decoration: none !important;
        }

        .stencil-dropdown-item-upgrade-text {
          fill: black;
          stroke: black;
          stroke-width: 0.6px;
        }
        .stencil-hover g:not(.disabled-stencil) rect {
          fill: rgba(129, 211, 169, 1); /*rgb is essentially ld-lt-green-2*/
        }
        .disabled-stencil {
          cursor: pointer;
        }

        .tagging-multi-tiebreaker-toggle.disable-multiple-tiebreakers .multi-tiebreaker-toggle {
            opacity: 0.4;
            pointer-events: none;
        }

        .upsell-container {
            margin-bottom: 30px;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }
        .tagging-multi-tiebreaker-toggle .upsell-container {
            z-index: 3;
            width: 470px;
        }

        .send-notification .upsell-container {
          width: 410px;
        }
        .send-notification .collapsible-section {
          clear: both;
        }
        .feature-is-added .added-wide-badge {
          display: inline;
        }
        .feature-in-package .added-wide-badge {
          display: none;
        }
        .feature-is-enabled .upsell-wide-badge {
          display: none;
        }
        .feature-is-disabled .collapsible-section {
          opacity: 0.3;
          pointer-events: none;
        }
        .feature-is-disabled .upsell-wide-badge {
          display: inline;
        }
        .feature-is-disabled .collapsible-section {
          opacity: 0.3;
          pointer-events: none;
        }
        .upsell-wide-badge,
        .added-wide-badge {
          position: relative !important;
          padding: 0px 3px !important;
          height: 12px !important;
          background-color: var(--ld-lt-green-2) !important;
          font-size: 9px !important;
          color: #4d4d4d !important;
          margin-left: 10px !important;
          cursor: pointer !important;
        }
        .enable-multiple-tiebreakers .upsell-wide-badge {
          display: none;
        }
        .disable-multiple-tiebreakers .upsell-wide-badge {
          display: inline;
        }

        #advanced-settings-wrapper {
          clear: both;
        }
        
        .bs .label-ld-upgrade {
            font-size: 9px;
            border-radius: 0;
            color: var(--dk-grey-2);
            background-color: var(--ld-lt-green-2);
            margin-left: 5px;
            cursor: pointer;
            font-weight: var(--regular);
            padding-left: 3px;
            padding-right: 3px;
        }
        
        .bs .label-ld-added {
            font-size: 9px;
            line-height: 12px;
            border-radius: 0;
            color: var(--ld-lt-green-2)
            background-color: var(--dk-grey-2);
            margin-left: 5px;
            padding-left: 3px;
            padding-right: 3px;
            cursor: pointer;
            font-weight: var(--regular);
        }

        .bs .active .checkbox {
            background : url("{!URLFOR($Resource.LeanData__DashboardImages, 'Checkmark_Icon_selected.png')}") no-repeat 0 0;
            background-size:15px;
            background-position-x: 3px;
            background-position-y: 5px;
        }

        .bs .checkbox {
            background : url("{!URLFOR($Resource.LeanData__DashboardImages, 'Checkmark_Icon_unselected.png')}") no-repeat 0 0;
            background-size:15px;
            background-position-x: 3px;
            background-position-y: 5px;
        }

    </style>

    <div class="bs">
        <apex:form >
            <apex:pageMessages id="pm" />

            <!-- AF to change the active component/page. Triggers Loading status.-->
            <apex:actionFunction action="{!setActivePage}" name="setActivePageAF" rerender="mainContent" status="loadingComponent" oncomplete="clearModalDiv();initComponent();">
                <apex:param name="activePage" assignTo="{!activePage}" value=""/>

                <!-- used for segment-->
                <apex:param name="parameters" assignTo="{!parameters}" value=""/>
            </apex:actionFunction>
            
            <!-- AF To set active page to Upsell -->
            <apex:actionFunction action="{!setDashboardUpsell}" name="setDashboardUpsellAF" rerender="mainContent" status="loadingComponent" oncomplete="clearModalDiv();initComponent();">
                <apex:param name="activePage" assignTo="{!activePage}" value=""/>

                <!-- used for segment-->
                <apex:param name="parameters" assignTo="{!parameters}" value=""/>
            </apex:actionFunction>

            <!-- AF to set Edge settings. Triggered by the View and Merge duplicates pages. -->
            <apex:actionFunction action="{!setEdgeSettingsAndReturn}" name="setEdgeSettingsAndReturnAF" rerender="x" status="loadingComponent" oncomplete="j$('#settingsSavedModal').modal('show');">
                <apex:param name="edgeSettings" assignTo="{!edgeSettings}" value=""/>
            </apex:actionFunction>
            
            <!-- AF to update email list. Triggered by the Admin page. -->
            <apex:actionFunction action="{!saveEmailList}" name="saveEmailListAF" rerender="x" status="loadingComponent" oncomplete="j$('#settingsSavedModal').modal('show');">
                <apex:param name="monitoringEmailAddress" assignTo="{!monitoringEmailAddress}" value=""/>
                <apex:param name="isLeanDataEmailChecked" assignTo="{!isLeanDataEmailChecked}" value=""/>
            </apex:actionFunction>

            <div class="page-content">
                <!-- .header -->
                <div class="header">
                    <div class="logo" onclick="returnHome();">
                        <img width="150" src="{!URLFOR($Resource.Reporting_Images, 'LD_logo.png')}" alt="Logo" />
                    </div>
                    <div class="header-title open-sans-light"/>
                </div>
                <div class="left-sidebar"/>
                <div class="left-sidebar-popover-container"></div>

                <apex:outputPanel id="mainContent" layout="block" styleClass="main-content">
                
                    <!-- Loading action status. -->
                    <apex:actionStatus id="loadingComponent">
                        <apex:facet name="start">
                            <div class="loadingOverlay">
                                <div class="loadingParent">
                                    <div class="sk-circle">
                                        <div class="sk-circle1 sk-child"></div>
                                        <div class="sk-circle2 sk-child"></div>
                                        <div class="sk-circle3 sk-child"></div>
                                        <div class="sk-circle4 sk-child"></div>
                                        <div class="sk-circle5 sk-child"></div>
                                        <div class="sk-circle6 sk-child"></div>
                                        <div class="sk-circle7 sk-child"></div>
                                        <div class="sk-circle8 sk-child"></div>
                                        <div class="sk-circle9 sk-child"></div>
                                        <div class="sk-circle10 sk-child"></div>
                                        <div class="sk-circle11 sk-child"></div>
                                        <div class="sk-circle12 sk-child"></div>
                                    </div>
                                </div>
                            </div>
                        </apex:facet>
                    </apex:actionStatus>
                    
                    <!-- Dynamic component. Each tab has its own component. -->
                    <apex:dynamicComponent componentValue="{!pageComponent}"/>

                    <!-- Settings page. Defined statically, because we want to preserve the state of the fields after navigating away. The page also makes use of rerender, which would not work inside a dynamic component. -->

                    <!-- <c:DashboardClaritySettings rendered="{!(activePage == 'attribution' || activePage == 'attribution-general')}" /> -->

                    <!-- All the ones below make use of rerender. To refactor.-->
                    <!-- <c:DashboardClarityCustomFields rendered="{!activePage == 'attribution-AS-CFM'}" />
                    <c:DashboardClarityOpportunityStages rendered="{!activePage == 'attribution-AS-OSM'}" />
                    <c:DashboardClarityCampaignWeighting rendered="{!(activePage == 'attribution-CW' || activePage == 'attribution-CW-CTW')}" />
                    <c:DashboardClarityCMSW rendered="{!activePage == 'attribution-CW-CMSW'}" /> -->
                    <!-- <c:DashboardClarityCustomFilters rendered="{!(activePage == 'attribution-AS' || activePage == 'attribution-AS-CF')}" /> -->
                </apex:outputPanel>
            </div>
        </apex:form>

        <div id="defaultModalDiv"></div>
        <div id="modalDiv"></div>
        
    </div> <!-- .bs -->
    
    <c:UtilJS />
    <c:ModalJS />
    <script type="text/javascript">
    Visualforce.remoting.timeout = 120000; // Set timeout at page level
    </script>
    <!-- jQuery Version 1.11.1 -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/jquery.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__JqueryUI, 'jquery-ui-1.11.4.custom/jquery-ui.min.js')}" />
    <!-- Bootstrap Core JavaScript -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/bootstrap.js')}" />
    <!-- JavaScript -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__bootstrap_v3_3_4, 'js/bootstrap-multiselect.js')}" />
    
    <!-- download -->
    <apex:includeScript value="{!$Resource.LeanData__download}"/>
 
    <!-- JQuery Rotate - used for sidebar arrows -->
    <apex:includeScript value="{!$Resource.LeanData__jQueryRotate}"/>
    
    <!-- Highcharts -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__highcharts, 'js/highcharts.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__highcharts, 'js/highcharts-more.js')}" />
    
    <!-- Backbone -->
    <!-- Initialize Backbone Router Before the rest of the application -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__magellan_app, 'javascript/lodash-3.10.1.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__magellan_app, 'javascript/backbone-1.2.1.min.js')}" />

    <!-- Autonumeric -->
    <apex:includeScript value="{!$Resource.LeanData__autonumeric_min}"/>
    <apex:includeScript value="{!$Resource.LeanData__viewJSResource}"/>
    
    <apex:includeScript value="{!$Resource.LeanData__htmlSanitizer}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/1.10.16-jquery.dataTables.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/dataTables.editor.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/dataTables.editor.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/2.0.0-fixedColumns.dataTables.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/2.3.2-keyTable.dataTables.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/2.17.0-moment.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.LeanData__DataTables, 'DataTables/1.10.12-sorting-datetime-moment.js')}"/>
    
    <script>
        if ('{!isGaDisabled}'!='true') {
            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', 'UA-50205525-1', 'auto');
        }
    </script>

    <!-- This paginator component is used exclusively in the logs pages in order to render the logs tables. It has to be included here. -->
    <c:javascriptPaginator /> 
    <script>
        /*
            The following JS is used across all components. It therefore
            needs to be declared first.
        */

        // jQuery
        j$ = jQuery.noConflict();
        
        // Namespace
        ns = '{!nameSpace}';

        // User TimeZone
        userTimeZone = '{!userTimeZone}';
        userTimeZoneOffset = '{!userTimeZoneOffset}';
        loggedInUserId = '{!userId}';
        autoNavigateToMembers = {!autoNavigateToMembers};
        /*
            Dashboard specific
            ------------------
        */

        DashboardController = function () { 
            /* View object retrieved through interpolation. It contains data used throughout all the components. Data is retrieved as part of the original page request, with no additional AJAX calls be required. */
            this.viewObject = JSON.parse('{!JSENCODE((viewObject))}');

            this.originalLatestDate = new Date();
            this.originalEarliestDate = new Date(new Date().setDate(this.originalLatestDate.getDate() - 90));

            this.latestDate = this.originalLatestDate;
            this.earliestDate = this.originalEarliestDate;
            
            this.viewObject.upsellContainerHtml = '<div class="upsell-container">' +
                    '<img class="upsell-ribbon" src="{!URLFOR($Resource.LeanData__DashboardImages, 'Upgrade_Sash.png')}"/>' + 
                    '<div class="upsell-content"> <div class="upsell-title"><%=upsell.title%></div> ' +
                    '<div class="upsell-body"><%=upsell.body%></div> ' +
                    '<a href="<%=upsell.location%>" target="_blank" style="text-decoration:none">' +
                    '<span class="upsell-link ld-primary-small-button"><%=upsell.action%></span></a> </div> </div>';
            this.viewObject.addedContainerHtml = '<div class="upsell-container">' +
                    '<img class="upsell-ribbon" src="{!URLFOR($Resource.LeanData__DashboardImages, 'added-sash-badge_2x.png')}"/>' +
                    '<div class="upsell-content"> <div class="upsell-title"><%= feature %> Has Been Added to Your Subscription</div> ' +
                    '<div class="upsell-body"><%= feature %> is not part of your <%= package %>. <%= feature %> has been added a la carte for your current subscription period.</div> ' +
                    '<a href="<%=location%>" target="_blank">' +
                    '<span class="upsell-link"><%=action%></span></a> </div> </div>';
            this.viewObject.upsellContainerTemplate = _.template(this.viewObject.upsellContainerHtml);
            this.viewObject.addedContainerTemplate = _.template(this.viewObject.addedContainerHtml);
        };
        
        /* This method gets called every time a new page is loaded, in order to set its dynamic content. */
        DashboardController.prototype.populateVariableDomElements = function () {
            this.initDateIntervals();
            this.populateStatuses();
            this.populateOrgDefaultStatuses();
        };


        /* Initiates DatePickers based on this.earliestDate and this.latestDate. */
        DashboardController.prototype.initDateIntervals = function () {
            j$('#dailywrapper-initial-date').datepicker('destroy');
            j$( "#dailywrapper-initial-date" ).datepicker({minDate: this.originalEarliestDate, maxDate: this.latestDate});
            j$( "#dailywrapper-initial-date" ).datepicker("setDate", this.earliestDate);


            j$('#dailywrapper-end-date').datepicker('destroy');
            j$( "#dailywrapper-end-date" ).datepicker({minDate: this.earliestDate, maxDate: this.originalLatestDate});
            j$( "#dailywrapper-end-date" ).datepicker("setDate", this.latestDate);

            j$('.dailywrapper-date-interval').text(this.earliestDate.toLocaleDateString() + ' - ' + this.latestDate.toLocaleDateString());
        }

        /* Change the value of earliestDate and latestDate based on datePicker values, and reevaluate dynamic content of the page. */
        DashboardController.prototype.renewDateInterval = function () {

            this.earliestDate = j$( "#dailywrapper-initial-date" ).datepicker("getDate");
            this.latestDate = j$( "#dailywrapper-end-date" ).datepicker("getDate");

            this.populateVariableDomElements();
        }

        DashboardController.prototype.populateOrgDefaultStatuses = function () {
            j$('#enableOpenLinksInNewTab').prop('checked', this.viewObject.orgDefaultStatuses['enableOpenLinksInNewTab']);
            j$('#enableAllowUserColumnCustomizations').prop('checked', this.viewObject.orgDefaultStatuses['enableAllowUserColumnCustomizations']);
            j$('#enableDisableActions').prop('checked', this.viewObject.orgDefaultStatuses['enableDisableActions']);

            j$('#enableDuplicateLeadsContacts').prop('checked', this.viewObject.orgDefaultStatuses['enableDuplicateLeadsContacts']);
            j$('#enableRelatedLeads').prop('checked', this.viewObject.orgDefaultStatuses['enableRelatedLeads']);
            j$('#enableRelatedLeadsNewAccountButton').prop('checked', this.viewObject.orgDefaultStatuses['enableRelatedLeadsNewAccountButton']);
            j$('#enableMatchedAccounts').prop('checked', this.viewObject.orgDefaultStatuses['enableMatchedAccounts']);
            j$('#disenableStatusEditing').prop('checked', this.viewObject.orgDefaultStatuses['disenableStatusEditing']);
            j$('#enableDuplicateLeadsContactView').prop('checked', this.viewObject.orgDefaultStatuses['enableDuplicateLeadsContactView']);
            j$('#enableDuplicateAccounts').prop('checked', this.viewObject.orgDefaultStatuses['enableDuplicateAccounts']);
            j$('#enableRelatedAccounts').prop('checked', this.viewObject.orgDefaultStatuses['enableRelatedAccounts']);
            j$('#enableMatchedLeads').prop('checked', this.viewObject.orgDefaultStatuses['enableMatchedLeads']);
            j$('#enableMassConvert').prop('checked', this.viewObject.orgDefaultStatuses['enableMassConvert']);

            j$('#enableCustomConvertLink').prop('checked', this.viewObject.orgDefaultStatuses['enableCustomConvertLink']);
            j$('.customConvertLink').val(this.viewObject.orgDefaultStatuses['customConvertLink']);
        }

        DashboardController.prototype.populateStatuses = function () {
            /* View Settings 
            ----------------
            */
            j$('#enableOpenLinksInNewTab').attr('checked', this.viewObject.statuses['enableOpenLinksInNewTab']);
            j$('#enableAllowUserColumnCustomizations').attr('checked', this.viewObject.statuses['enableAllowUserColumnCustomizations']);
            j$('#enableDisableActions').attr('checked', this.viewObject.statuses['enableDisableActions']);

            j$('#enableDuplicateLeadsContacts').attr('checked', this.viewObject.statuses['enableDuplicateLeadsContacts']);
            j$('#enableRelatedLeads').attr('checked', this.viewObject.statuses['enableRelatedLeads']);
            j$('#enableRelatedLeadsNewAccountButton').attr('checked', this.viewObject.statuses['enableRelatedLeadsNewAccountButton']);
            j$('#enableMatchedAccounts').attr('checked', this.viewObject.statuses['enableMatchedAccounts']);
            j$('#disenableStatusEditing').attr('checked', this.viewObject.statuses['disenableStatusEditing']);
            j$('#enableDuplicateLeadsContactView').attr('checked', this.viewObject.statuses['enableDuplicateLeadsContactView']);
            j$('#enableDuplicateAccounts').attr('checked', this.viewObject.statuses['enableDuplicateAccounts']);
            j$('#enableRelatedAccounts').attr('checked', this.viewObject.statuses['enableRelatedAccounts']);
            j$('#enableMatchedLeads').attr('checked', this.viewObject.statuses['enableMatchedLeads']);
            j$('#enableMassConvert').attr('checked', this.viewObject.statuses['enableMassConvert']);

            j$('#enableCustomConvertLink').attr('checked', this.viewObject.statuses['enableCustomConvertLink']);
            j$('.customConvertLink').val(this.viewObject.settings['customConvertLink']);

            /*  --------------------
                End of View Settings
            */


            /* Merge Duplicates Settings
            ----------------------------
            */
            j$('.dedupeNewLeads').attr('checked', this.viewObject.statuses['dedupeNewLeads']);
            j$('.dedupeExistingLeads').attr('checked', this.viewObject.statuses['dedupeExistingLeads']);
            j$('.lcDedupeOn').attr('checked', this.viewObject.statuses['lcDedupeOn']);
            j$('.llDedupeOn').attr('checked', this.viewObject.statuses['llDedupeOn']);
            j$('[name=isEmailMatchDupes]').val(this.viewObject.statuses['isEmailMatchDupes']? '1':'0');
            j$('[name=emailMergePreference]').val(this.viewObject.statuses['emailMergePreference']? '1' : '0');
            j$('[name=prioritizeDupeContacts]').val(this.viewObject.statuses['prioritizeDupeContacts']? '1' : '0');
            if(this.viewObject.settings['dedupeMasterFieldLL']) j$('[name=dedupeMasterFieldLL]').val(this.viewObject.settings['dedupeMasterFieldLL']);
            if(this.viewObject.settings['dedupePreferenceFieldLL']) j$('[name=dedupePreferenceFieldLL]').val(this.viewObject.settings['dedupePreferenceFieldLL']);
            if(this.viewObject.settings['dedupeMasterOperatorLL']) j$('[name=dedupeMasterOperatorLL]').val(this.viewObject.settings['dedupeMasterOperatorLL']);
            if(this.viewObject.settings['dedupePreferenceOperatorLL']) j$('[name=dedupePreferenceOperatorLL]').val(this.viewObject.settings['dedupePreferenceOperatorLL']);
            if(this.viewObject.settings['dedupeMasterFieldLC']) j$('[name=dedupeMasterFieldLC]').val(this.viewObject.settings['dedupeMasterFieldLC']);
            if(this.viewObject.settings['dedupePreferenceFieldLC']) j$('[name=dedupePreferenceFieldLC]').val(this.viewObject.settings['dedupePreferenceFieldLC']);
            if(this.viewObject.settings['dedupeMasterOperatorLC']) j$('[name=dedupeMasterOperatorLC]').val(this.viewObject.settings['dedupeMasterOperatorLC']);
            if(this.viewObject.settings['dedupePreferenceOperatorLC']) j$('[name=dedupePreferenceOperatorLC]').val(this.viewObject.settings['dedupePreferenceOperatorLC']);
            if(this.viewObject.settings['overwriteCondition']) j$('[name=overwriteCondition]').val(this.viewObject.settings['overwriteCondition']);
            
            /*  --------------------
                End of Merge Duplicates Settings
            */
            
           /* Attribution Settings
            ----------------------------
            */
            if(!this.viewObject.statuses['hasClarityFrontend']) {
                j$('.clarityFrontendOn').hide();
            }
            if(!this.viewObject.statuses['hasOppAnalyzer']) {
                j$('.hasOppAnalyzer').hide();
            }

            if(!this.viewObject.statuses['hasCampaignInfluenceReporting']) {
                j$('.hasCampaignInfluenceReporting').hide();
            }
            if(!this.viewObject.statuses['hasCustomAttributionEnabled']) {
                j$('.hasCustomAttributionEnabled').hide();
            }
            /*  --------------------
                End of Attribution Settings
            */

            if(!this.viewObject.statuses['hasCCIOManagement']){
                j$('.hasCCIOManagement').hide();
            }

            if(!this.viewObject.statuses['hasLiveRouting']){
              j$('.hasLiveRouting').hide();
            }
            
            /* Admin Settings
               --------------
            */
            j$('.isLeanDataEmailChecked').attr('checked', this.viewObject.statuses['isLeanDataEmailChecked']);
            j$('.monitoringEmailAddress').val(this.viewObject.settings['monitoringEmailAddress']);

            /*  --------------------
                End of Admin Settings
            */

            j$('.main').attr('checked', this.viewObject.statuses['isGlobalChecked']);
            if(!this.viewObject.statuses['isGlobalChecked'])
                j$('.options').hide();
            else {
              j$('#alwaysON').attr('checked', this.viewObject.statuses['alwaysON']);
              j$('#fallbackON').attr('checked', this.viewObject.statuses['fallbackON']);
            }
        }

        DashboardController.prototype.initializeProductFeatures = function() {
            if (this._alreadyInitializedProductFeatures) return;
            this._alreadyInitializedProductFeatures = true;
            /**************************
             * Product Packages 
             *************************/
            this.ENTERPRISE_PACKAGE = 'enterprise package on';
            this.PROFESSIONAL_PACKAGE = 'professional package on';
            this.BASIC_PACKAGE = 'basic package on';
            this.UNLICENSED_PACKAGE = 'unlicensed package on';
            
            // feature keys
            this.HAS_ROUTING_PRODUCT = 'has routing product';
            this.CONTACT_ROUTING_ACTIVE = 'contact routing active';
            this.ACCOUNT_ROUTING_ACTIVE = 'account routing active';
            this.OPPORTUNITY_ROUTING_ACTIVE = 'opportunity routing active';
            this.ACCOUNT_CREATION_NODE = 'routing account creation on';
            this.ROUTING_DEPLOYMENT_HISTORY = 'routing deployment history on';
            this.L2L_NODE = 'routing lead to lead on';
            this.L2O_NODE = 'routing lead to opportunity on';
            this.ROUTING_EMAIL_NOTIFICATIONS = 'routing notifications on';
            this.TERRITORY_ROUTING = 'territory management on';
            this.VIEW_ON = 'on demand allowed';
            this.HAS_TAGGING_PRODUCT = 'has tagging product';
            this.ACCOUNT_SCORING_ON = 'account scoring on';
            this.LIST_ANALYZER_ON = 'list analyzer on?';
            this.BUYER_PERSONA_ENABLED = 'buyer persona enabled?';
            this.MULTI_TIEBREAKERS_ON = 'matching multi-tiebreakers on';
            this.ATTRIBUTION_ON = 'attribution on?';
            this.CREATE_OPP_NODE = 'create opportunity on?';

            this.FEATURE_ENABLED_AS_A_LA_CARTE = 2;
            this.FEATURE_ENABLED_IN_PACKAGE = 1;
            this.FEATURE_DISABLED = 0;

            
            /*******************************
             * Features Configuration Object
             ******************************/
            this.FEATURE_CONFIG = {};
            this.FEATURE_CONFIG[this.HAS_ROUTING_PRODUCT] = {
                selector: '.routing-product',
                featureName: 'Routing',
                upsell: { 'title': 'Looking to Route Leads to the Right Owner? Learn about Basic', 'body': 'Support and automate any global lead routing process to instantly assign engaged leads to the right reps. Assign lead ownership by matched account, contact, or other existing leads.', 'action': 'Learn about Basic', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.CONTACT_ROUTING_ACTIVE] = {
                selector: '.contact-routing',
                featureName: 'Contact Routing',
                upsell: { 'title': 'Looking to Route Contacts to the Right Owner? Learn about Professional', 'body': 'Support and automate any global contact routing process to instantly assign engaged contacts to the right reps. Assign contact ownership when a contact becomes qualified, or simply mirror your existing lead routing process.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.ACCOUNT_ROUTING_ACTIVE] = { 
                selector: '.account-routing',
                featureName: 'Account Routing',
                upsell: { 'title': 'Looking to Route Accounts to the Right Owner? Learn about Enterprise', 'body': 'Support and automate any global account routing process to instantly assign marketing qualified accounts to the right reps. Assign account ownership when a nurtured account becomes engaged or marketing qualified.', 'action': 'Learn about Enterprise', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.OPPORTUNITY_ROUTING_ACTIVE] = { 
                selector: '.opportunity-routing',
                featureName: 'Opportunity Routing',
                upsell: { 'title': 'Looking to Route Opportunities to the Right Owner? Learn about Enterprise', 'body': 'Support and automate any global opportunity routing process to instantly assign opportunities that need attention to the right reps. Assign opportunity ownership when an opportunity changes stages.', 'action': 'Learn about Enterprise', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.ACCOUNT_CREATION_NODE] = {
                selector: '.routing-account-creation',
                featureName: 'Account Creation',
                upsell: { 'title': 'Looking to Create Accounts in Your Routing Flow? Learn about Professional', 'body': 'Create accounts for high priority leads where an account doesn’t exist to support your accounts-based sales and marketing strategies.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.ROUTING_DEPLOYMENT_HISTORY] = {
                selector: '.routing-deployment-history',
                featureName: 'Deployment History',
                upsell: {'title': 'View and Manage Previously Deployed Routing Flows. Learn about Professional', 'body': 'View Routing Insights and instantly revert to a previously deployed Routing flow version.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.L2L_NODE] = {
                selector: '.routing-lead-to-lead',
                featureName: 'Lead-to-Lead Routing',
                upsell: {'title': 'Perform Account-Based Marketing and Sales. Learn about Professional', 'body': 'Match to existing leads to assign leads to reps who are already working leads from an existing company (even if an account doesn’t exist yet).', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.L2O_NODE] = {
                selector: '.routing-lead-to-opportunity',
                featureName: 'Lead-to-Opportunity Routing',
                upsell: {'title': 'Route a Lead to an Active Opportunity. Learn about Professional', 'body': 'Match leads to existing opportunities so you can assign leads to reps who are actively working opportunities.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };

            this.FEATURE_CONFIG[this.CREATE_OPP_NODE] = {
                selector: '.routing-create-opportunity',
                featureName: 'Create Opportunity',
                upsell: {'title': 'Looking to Create Opportunities in Your Routing Flow? Learn about Professional', 'body': 'Support your account-based strategy by creating opportunities for high priority accounts where one doesn\'t exist.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            // For L2L_NODE, so that we have different body text for L2L Action Node
            this.FEATURE_CONFIG['assign owner lead'] = {
                selector: '.routing-lead-to-lead',
                featureName: 'Lead-to-Lead Routing',
                upsell: {'title': 'Perform Account-Based Marketing and Sales. Learn about Professional', 'body': 'Route leads to reps who are already working leads from an existing company even if an account doesn’t exist yet.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            // For L2O_NODE, so that we have different body text for L2O Action Node
            this.FEATURE_CONFIG['assign owner opportunity'] = {
                selector: '.routing-lead-to-opportunity',
                featureName: 'Lead-to-Opportunity Routing',
                upsell: {'title': 'Route a Lead to an Active Opportunity. Learn about Professional', 'body': 'Assign leads to reps who are actively working opportunities.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.ROUTING_EMAIL_NOTIFICATIONS] = {
                selector: '.routing-notifications',
                featureName: 'Email Notifications',
                upsell: {'title': 'Get Notified About Important Buying Signals. Learn about Professional', 'body': 'Alert sales reps and account executives when there are important buying signals or a high priority lead becomes engaged.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };

            this.FEATURE_CONFIG[this.TERRITORY_ROUTING] = {
                selector: '.territory-routing',
                featureName: 'Route To Territory',
                upsell: { 'title': 'Looking to Route to Territories? Learn about Professional', 'body': 'Support and automate any global routing process to instantly assign engaged prospects and customers to the right reps. Assign ownership by matching to territories.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.VIEW_ON] = {
                selector: '.matching-view',
                featureName: 'View',
                upsell: {'title': 'Equip the Team to See Everyone in a Single View', 'body': 'Allows your sales and marketing teams to immediately see results from account-based marketing programs and account activity. Your account executives and inside sales team can see which leads match into accounts without having to search, saving dozens of hours per month.', 'action': 'Freemium Feature', 'location': '//learn.leandatainc.com/h/i/254497563-leandata-view/258966'}
            };
            
            this.FEATURE_CONFIG[this.HAS_TAGGING_PRODUCT] = {
                selector: '.matching-product',
                featureName: 'Tagging',
                upsell: {'title': 'Uncover Hidden Connections. Learn about Basic', 'body': 'Connect leads to accounts to build a foundation for account-based sales and marketing.', 'action': 'Learn about Matching', 'location': '//www.leandatainc.com/matching'}
            };
            
            this.FEATURE_CONFIG[this.ACCOUNT_SCORING_ON] = {
                selector: '.account-scoring',
                featureName: 'Account Scoring',
                upsell: {'title': 'Looking to Prioritize Your Accounts? Learn about Professional', 'body': 'Leverage Account Scoring to identify your most important accounts.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.LIST_ANALYZER_ON] = {
                selector: '.list-analyzer',
                featureName: 'List Analyzer',
                upsell: {'title': 'Segment Your Lists Before You Upload. Learn about Basic', 'body': 'Prioritize and segment lists prior to uploading them into your Marketing Automation or Salesforce systems.', 'action': 'Learn about Basic', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.BUYER_PERSONA_ENABLED] = {
                selector: '.buyer-persona',
                featureName: 'Buyer Persona',
                upsell: {'title': 'Segment Your Leads and Contacts by Buyer Persona. Learn about Professional', 'body': 'Precisely segment and understand who you are marketing to.', 'action': 'Learn about Professional', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.MULTI_TIEBREAKERS_ON] = {
                selector: '.matching-multi-tiebreakers',
                featureName: 'Multiple Tie-breakers',
                upsell: {'title': 'Looking for Additional Match Segmentation? Learn about Enterprise', 'body': 'Further segment your Lead-to-Account matches with the industry’s leading matching.', 'action': 'Learn about Enterprise', 'location': '//www.leandatainc.com/packaging'}
            };
            
            this.FEATURE_CONFIG[this.ATTRIBUTION_ON] = {
                selector: '.attribution-product',
                featureName: 'Attribution',
                upsell: {'title': 'Looking for Marketing Attribution? Learn about Attribution', 'body': 'Measure and optimize marketing revenue impact.', 'action': 'Learn about Attribution', 'location': '//www.leandatainc.com/attribution-reporting'}
            };

            /******************************
             * Package Configuration Object
             *****************************/
            this.PACKAGE_CONFIG = {};
            this.PACKAGE_CONFIG[this.ENTERPRISE_PACKAGE] = {
                logo: "{!URLFOR($Resource.LeanData__magellan_app, 'images/ld-logo-white_enterprise_2x.png')}",
                packageName: 'Enterprise Account',
                nextTierPackage: null
            };
            
            this.PACKAGE_CONFIG[this.PROFESSIONAL_PACKAGE] = {
                logo: "{!URLFOR($Resource.LeanData__magellan_app, 'images/ld-logo-white_professional_2x.png')}",
                packageName: 'Professional Account',
                nextTierPackage: this.ENTERPRISE_PACKAGE
            };
            
            this.PACKAGE_CONFIG[this.BASIC_PACKAGE] = {
                logo: "{!URLFOR($Resource.LeanData__magellan_app, 'images/ld-logo-white_basic_2x.png')}",
                packageName: 'Basic Account',
                nextTierPackage: this.PROFESSIONAL_PACKAGE
            };
            
            this.PACKAGE_CONFIG[this.UNLICENSED_PACKAGE] = {
                logo: "{!URLFOR($Resource.LeanData__magellan_app, 'images/ld-logo-white_freemium_2x.png')}",
                packageName: 'Freemium Account',
                nextTierPackage: this.BASIC_PACKAGE
            };
           
            // Toggling logo depending on package 
            var packageConfig = this.PACKAGE_CONFIG[this.viewObject.productPackage];
            var logoImgSrc = packageConfig ? packageConfig['logo'] : this.PACKAGE_CONFIG[this.UNLICENSED_PACKAGE]['logo'];
            if (this.viewObject.statuses['hasMatching'] && this.viewObject.productPackage == this.UNLICENSED_PACKAGE) {
                // this is to remove the "freemium" logo if they have tagging and no routing, per Aaron and Product
                logoImgSrc = this.PACKAGE_CONFIG[this.BASIC_PACKAGE]['logo'];
            }
            j$('.logo img').attr('src', logoImgSrc).closest('div.logo').toggleClass('package-logo', true);

            _.each(this.FEATURE_CONFIG, function (featureConfig, settingKey) {
                var featureSelector = featureConfig['selector'];
                var htmlContent = '';

                if (this.viewObject.packageFeatures[settingKey] === this.FEATURE_ENABLED_AS_A_LA_CARTE) {
                    var addedLabel = j$('<span class="label label-default label-ld-added ld-promo">ADDED</span>');
                    j$(featureSelector).not('.disabledLink').find('.product-badge').html(addedLabel);
                    
                    htmlContent = this.viewObject.addedContainerTemplate({
                        feature: featureConfig['featureName'],
                        package: packageConfig['packageName'],
                        action: 'Learn More',
                        location: "//www.leandatainc.com/packaging"
                    });
                } else if (this.viewObject.packageFeatures[settingKey] === 0) {
                    disableGivenClass('.left-sidebar ' + featureSelector + ', .left-sidebar ' + featureSelector + ' + div a.nav-click');
                    var upgradeButton = j$('<span class="label label-default label-ld-upgrade ld-promo">UPGRADE</span>');
                    j$(featureSelector).find('.product-badge').html(upgradeButton);
                    
                    htmlContent = this.viewObject.upsellContainerTemplate(featureConfig);
                }

                j$(featureSelector).find('.ld-promo').popover({
                    placement: 'right',
                    container: '.left-sidebar-popover-container',
                    content: htmlContent,
                    html: true,
                    trigger: 'manual',
                    template: '<div class="popover" role="tooltip"><div class="arrow"></div>' +
                    '<h3 class="popover-title">' +
                    '</h3><div class="popover-content"></div></div>'
                }).on("click", function () {
                    var _this = this;
                    j$(this).popover("show");
                    j$('#' + j$(this).attr('aria-describedby')).on("mouseleave", function () {
                        j$(_this).popover('hide');
                    });
                }).on("mouseleave", function () {
                    var _this = this;
                    setTimeout(function () {
                        if (!j$(".popover:hover").length) {
                            j$(_this).popover("hide")
                        }
                    }, 300);
                });
            }, this);
            
        }

        j$(document).click(function(event) {
            if(!j$(event.target).closest('.added-wide-badge, .upsell-wide-badge').length) {
                if(j$('.upsell-container').is(":visible")) {
                    j$('.upsell-container').hide();
                }
            }
        });

        DashboardController.prototype.showPackagingPopup = function(target, popupType) {
            var $target = j$(target);
            var featureName = $target.data("feature");

            if(popupType === 'upsell') {
                var upsellHtml = dashboardController.viewObject.upsellContainerTemplate({upsell: dashboardController.FEATURE_CONFIG[featureName].upsell});
            } else if (popupType === 'added') {
                var accountName = dashboardController.PACKAGE_CONFIG[dashboardController.viewObject.productPackage]["packageName"];
                var featureTitle = dashboardController.FEATURE_CONFIG[featureName].featureName;
                var upsellHtml = dashboardController.viewObject.addedContainerTemplate({
                    feature: featureTitle,
                    package: accountName,
                    action: "Learn More",
                    location: "//www.leandatainc.com/packaging"
                });
            }

            j$('.upsell-container').remove();
            var upsellToast = j$(upsellHtml).appendTo(target);
            upsellToast.show();

        }

        // DashboardBase Remote Methods
        DashboardController.prototype.retrieveSObjectFields = function(objectType, updatableFields, callback) {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.DashboardBaseController.retrieveSObjectFields}', objectType, updatableFields,
                callback, 
                { escape: false }
            );
        }

        // DashboardBase Remote Methods
        DashboardController.prototype.setLongTextSetting = function(key, value) {
            j$('.loadingOverlay').parent().css('display', 'block');
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.DashboardBaseController.setLongTextSetting}', key, value,
                function() {
                    j$('.loadingOverlay').parent().css('display', 'none');
                    j$('#settingsSavedModal').modal('show');
                }
            );
        }

        function numberWithCommas(x) {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        // Instantiate dashboard
        dashboardController = new DashboardController();

        /*  -------------------------
            End of Dashboard specific
        */

        /* JS BELOW IS GENERIC. IT IS NOT TIED PARTICULARLY TO THE DASHBOARD. 
            Features:
                - Historic state preservation
                - URL driven navigation
                - AJAX driven component updates
                - FIXED header
        */
       
       //Global Variables used for building the nav's CSS values. They should be the same as the styles used above.
       var IMG = '-img';
       var ACTIVE = '-active';
       var TITLE = '-title';
       var ACTIVE_ICON = 'icon_active';
       var INACTIVE_ICON = 'icon_inactive';
       var ARROW = 'dg_sidebar-expand-arrow';
       var ARROW_SPECIFIC = '-expandarrow';
       var LEFT_SIDEBAR = 'left-sidebar';
       var SECTION = '-section';
       var ITEM = '-item';
       var BUTTON = '-button';
       var NAV = '-nav';
       var SUBNAV = '-subnav';
       var SUBSUBNAV = '-subsubnav';
       var SUBSUBSUBNAV = '-subsubsubnav';

       //Global Variables used for building the navbar and sidebar object accessing
       var LEFT_SIDEBAR_BUTTON = LEFT_SIDEBAR + BUTTON;
       var LEFT_SIDEBAR_SUBNAV = LEFT_SIDEBAR + SUBNAV;
       var LEFT_SIDEBAR_SUBSUBNAV = LEFT_SIDEBAR + SUBSUBNAV;
       var LEFT_SIDEBAR_SUBSUBSUBNAV = LEFT_SIDEBAR + SUBSUBSUBNAV;
       var NAVS = 'navs';
       var CHILD = 'subnavs';
       var SUBCHILD = 'subsubnavs';
       var SUBSUBCHILD = 'subsubsubnavs';
    
        //Set Authorization Link for All Dashboard Components
        var globalAuthorizationLink = dashboardController.viewObject['isSandbox'] ? 'https://edge.leandatainc.com/auth/salesforcesandbox?instance_url=' + dashboardController.viewObject['sfInstance'] : 'https://edge.leandatainc.com/auth/salesforce';
        
        if(dashboardController.viewObject['isManagedByOverlord']){
            globalAuthorizationLink = dashboardController.viewObject['isSandbox'] ? 'https://test.salesforce.com/services/oauth2/authorize?' : 'https://login.salesforce.com/services/oauth2/authorize?';         
            globalAuthorizationLink += '&state=' + dashboardController.viewObject['overlordState'];
            globalAuthorizationLink += '&response_type=code&client_id=3MVG9A2kN3Bn17hsx_bwj24IbvT.42LAiTdWbki1MhVMuHgwXiMkFFFfB.86e7EKi4ZsGRFwxpnBnZisdmyfa&redirect_uri=https://leandata.secure.force.com/oauthcallback';
        }

        /* Sidebar Objects 
            - Every nav and subnav have its own key, which needs to be unique locally
            - Multi-word keys follow camelCase format 
            - Abbreviated keys are all uppercase e.g. ATRR
            - Nested Page/Component key are separated by dashes e.g. router-lead-logs
            - When adding/editing a page, change the respective key string in DashboardBaseController.cls
            - For pages that are not in dashboard buttons (only accessible from certain pages), insert them into 
                DashboardBaseController.cls and respective component pages.
        */
        
        dashboardSidebar = {
            instance: 'dashboardSidebar', title: 'Main' , navs: {
                home: {name: 'Home', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Home_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Home_Icon_selected.png')}', path:'#'},
                matching: {name: 'Matching', classes: 'matching-product', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Account_Scoring_Icon_Unselected.png')}', activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Account_Scoring_Icon_Selected.png')}', disabledSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Matching_Icon_Disabled.png')}', subnavs: {
                    CM: {name: 'Tagging Finder', classes: 'workflowConfigurator flowbuilderOn', path:'#matching/tagging_finder'},
                    MTB: {name: 'Tagging Tie-Breakers', classes: 'workflowConfigurator requiresReadWrite', path:'#matching/tagging_settings'},
                    accountScoring: {name: 'Account Scoring', classes: 'account-scoring', subsubnavs: { 
                        FM: {name: 'Field Selection', classes: 'requiresReadWriteOrCustom', path:'#matching/account_scoring'},
                        SM: {name: 'Score Modifiers', classes: 'requiresReadWriteOrCustom', path:'#matching/account_scoring/modifiers'}
                    }},
                    LA: {name: 'List Analyzer', classes: 'list-analyzer requiresReadWrite listAnalyzerPage', subsubnavs:{
                        AL: {name: 'Analyze Leads', classes: 'requiresReadWrite listAnalyzerPage'},
                        MAF: {name: 'Matched Account Fields', classes: 'requiresReadWrite listAnalyzerPage'},
                    }},
                    BP: {name: 'Buyer Persona', classes: 'buyer-persona requiresReadWrite', path:'#matching/buyer_persona'}, 
                    MS: {name: 'Match Settings', classes: 'match-settings requiresReadWrite', path:'#matching/match_settings'},
                    AS: {name: 'Advanced Settings', classes: '', subsubnavs: {
                        MAF: {name: 'Mapped Account Fields', classes: 'requiresReadWrite', path:'#matching/tagging_account_fields'},
                        OTM: {name: 'One-Time Tagging', classes: 'requiresReadWrite', path:'#matching/one_time_tagging'}
                    }},
                    }
                },
                router: {name: 'Routing', classes: 'routing-product', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'RC_Icon.png')}', activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'RC_Icon_selected.png')}', disabledSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'RC_Icon_disabled.png')}', subnavs: {
                    lead: { name: 'Leads', classes: '', subsubnavs: {
                        FB: {name: 'FlowBuilder', classes: 'workflowConfigurator requiresReadWrite', path:'#routing/lead/flowbuilder'},
                        DM: {name: 'Routing Insights', classes: 'workflowConfigurator requiresReadWrite', path:'#routing/lead/insights/live'},
                        logs: {name: 'Audit Logs', classes: '', path:'#routing/lead/audit_logs'},
                        DH: {name: 'Deployment History', classes: 'routing-deployment-history workflowConfigurator requiresReadWrite', path:'#routing/lead/deployment_history'},
                        OTR: {name: 'One-Time Routing', classes: 'workflowConfigurator requiresReadWrite'},
                        AS: {name: 'Advanced Settings', classes: '', path: '#routing/lead/merge_duplicates', subsubsubnavs: {
                            MD: {name: 'Merge Duplicates', classes: 'requiresReadWrite', path: '#routing/lead/merge_duplicates'},
                            ATM: {name: 'Account Teams', classes: 'requiresReadWrite'},
                            OM: {name: 'Owner Mappings', classes: 'requiresReadWrite'},
                            NAC: {name: 'Account Creation', classes: 'routing-account-creation requiresReadWrite', path:'#routing/lead/account_creation'}
                        }}
                    }},
                    contact: { name: 'Contacts', classes: 'contact-routing', subsubnavs: {
                        FBC: {name: 'FlowBuilder', classes: 'workflowConfigurator requiresReadWrite', path:'#routing/contact/flowbuilder'},
                        DM: {name: 'Routing Insights', classes: 'workflowConfigurator requiresReadWrite', path:'#routing/contact/insights/live'},
                        logs: {name: 'Audit Logs', classes: '', path:'#routing/contact/audit_logs'},
                        DH: {name: 'Deployment History', classes: 'routing-deployment-history workflowConfigurator requiresReadWrite', path:'#routing/contact/deployment_history'},
                        OTR: {name: 'One-Time Routing', classes: 'workflowConfigurator requiresReadWrite'},
                        AS: {name: 'Advanced Settings', classes: '', subsubsubnavs: {
                            ATM: {name: 'Account Teams', classes: 'requiresReadWrite'},
                            OM: {name: 'Owner Mappings', classes: 'requiresReadWrite'}
                        }}
                    }},
                    account: { name: 'Accounts', classes: 'account-routing isAccountRoutingActive', subsubnavs: {
                        FB: { name: 'FlowBuilder', classes: 'workflowConfigurator requiresReadWrite', path:'#routing/account/flowbuilder' },
                        DM: {name: 'Routing Insights', classes: 'workflowConfigurator requiresReadWrite', path:'#routing/account/insights/live'},
                        logs: { name : 'Audit Logs', classes: '', path:'#routing/account/audit_logs'},
                        DH: { name: 'Deployment History', classes: 'routing-deployment-history workflowConfigurator requiresReadWrite', path:'#routing/account/deployment_history'},
                        OTR: { name: 'One-Time Routing', classes:'requiresReadWrite' },
                        AS: {name: 'Advanced Settings', classes: '', subsubsubnavs: {
                            ATM: { name: 'Account Teams', classes: 'requiresReadWrite' },
                            OM: { name: 'Owner Mapping', classes: 'requiresReadWrite' }
                        }}
                    }},
                    opportunity: { name: 'Opportunities', classes: 'opportunity-routing isOpportunityRoutingActive', subsubnavs: {
                        FB: { name: 'FlowBuilder', classes: 'workflowConfigurator requiresReadWrite', path:'#routing/opportunity/flowbuilder' },
                        DM: { name: 'Routing Insights', classes: 'workflowConfigurator requiresReadWrite', path:'#routing/opportunity/insights/live' },
                        logs: { name: 'Audit Logs', classes: '', path:'#routing/opportunity/audit_logs' },
                        DH: { name: 'Deployment History', classes: 'routing-deployment-history workflowConfigurator requiresReadWrite', path:'#routing/opportunity/deployment_history' },
                        OTR: { name: 'One-Time Routing', classes: 'requiresReadWrite' },
                        AS: { name: 'Advanced Settings', classes: '', subsubsubnavs: {
                            ATM: { name: 'Account Teams', classes: 'requiresReadWrite' },
                            OM: { name: 'Owner Mapping', classes: 'requiresReadWrite' }
                        }}
                    }},
                    territoryBB: { name: 'Territory Management', classes: 'requiresReadWrite territory-routing-BB isTerritoryRoutingBBActive', path:"#territory_segments"},
                    roundRobin: { name: 'Round Robin', classes: 'round-robin', path:'#routing/round_robin', subsubnavs: {
                        RRP: {name: 'Pools', classes: '', path:'#routing/round_robin_pools'},
                        RRM: {name: 'Members', classes: '', path:'#routing/round_robin_members'},
                        RRS: {name: 'Schedules', classes: '', path:'#routing/round_robin_schedules'},
                         RRR: {name: 'Live Routing', classes: 'requiresReadWrite hasLiveRouting', path:'#routing/round_robin_live_routing'},
                    }}
                }},
                attribution: {name: 'Attribution', classes:'attribution-product', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Reporting_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Reporting_Icon_selected.png')}', disabledSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'ATT_Icon_disabled.png')}', subnavs: {
                    general: {name: 'General Settings', classes: 'requiresReadWrite', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Set_Up_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Set_Up_Icon_selected.png')}'},
                    wizard: {name: 'Wizard', classes: 'requiresReadWrite', href: '/apex/Reporting_Wizard', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'AN_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'AN_Icon_selected.png')}'},
                    scheduler: {name: 'Scheduler', classes: 'requiresReadWrite'},
                    CAM: {name: 'Custom Attribution Model', classes: 'hasAttribution hasCustomAttributionEnabled requiresReadWrite'},
                    CW: {name: 'Campaign Weighting', classes: '', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Reporting_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Reporting_Icon_selected.png')}', subsubnavs: {
                        CTW: {name: 'Campaign Types', classes: 'requiresReadWrite'},
                        CMSW: {name: 'Campaign Member Statuses', classes: 'requiresReadWrite'}
                    }},
                    oneTimeRun: {name: 'One Time Run', classes: 'requiresReadWrite'},
                    SH: {name: 'Settings Change Logs', classes: 'hasAttribution requiresReadWrite', path:'#attribution/settings_history'},
                    RH: {name: 'Attribution Runs', classes: 'hasAttribution requiresReadWrite', path:'#attribution/run_history'},
                    oppAnalyzer: {name: 'Opportunity Analyzer', classes: 'hasOppAnalyzer'},
                    clarity: {name: 'Clarity', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Clarity_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Clarity_Icon_selected.png')}', classes: 'clarityFrontendOn', subsubnavs: {
                        overview: {name: 'Overview', classes: 'clarityFrontendOn requiresReadWrite'},
                        bookings: {name: 'Bookings', classes: 'clarityFrontendOn', subsubsubnavs: {
                            main: {name: 'Main', classes: 'requiresReadWrite clarityFrontendOnnrequiresReadWrite'},
                            segment: {name: 'Segment', classes: 'requiresReadWrite clarityFrontendOn'}
                        }},
                        pipeline: {name: 'Pipeline', classes: 'requiresReadWrite'}
                    }},
                    TA: {name: 'Target Accounts', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Target_Account_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Target_Accounts_Icon_Selected.png')}', classes: 'clarityFrontendOn', subsubnavs: {
                        main: {name: 'Main', classes: 'clarityFrontendOn requiresReadWrite'},
                        segment: {name: 'Segment', classes: 'clarityFrontendOn requiresReadWrite'}
                    }},
                    CIR: {name: 'Campaign Influence Reporting', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Reporting_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Reporting_Icon_selected.png')}', classes: 'hasCampaignInfluenceReporting', subsubnavs: {
                        CIS: {name: 'Campaign Influence Summary', href: '/apex/CampaignInfluenceReport', classes: 'requiresReadWrite hasCampaignInfluenceReporting'},
                        wizard: {name: 'Wizard', href: '/apex/CampaignToOpportunity', classes: 'requiresReadWrite hasCampaignInfluenceReporting'},
                        CTW: {name: 'Campaign Type Weighting', href: '/apex/campaignInfluenceAdvancedSettings?mode=CampaignTypeWeighting', classes: 'requiresReadWrite hasCampaignInfluenceReporting'},
                        RAF: {name: 'Revenue Attribution Field', href: '/apex/campaignInfluenceAdvancedSettings?mode=CustomAttributionValue', classes: 'requiresReadWrite hasCampaignInfluenceReporting'}
                    }},
                    AS: {name: 'Advanced Settings', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Settings_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Settings_Icon_Selected.png')}', classes: '', subsubnavs: { 
                        CF: {name: 'Custom Filters', classes: 'requiresReadWrite'},
                        CC: {name: 'Campaign Costs', classes: 'requiresReadWrite'},
                        OSM: {name: 'Opportunity Stage Mappings', classes: 'requiresReadWrite'},
                        CFM: {name: 'Custom Field Mappings', classes: 'requiresReadWrite'},
                        OCA: {name: 'Opportunity Cohort Analysis', classes: 'clarityFrontendOn requiresReadWrite'}
                    }}
                }},
                view: {name: 'View', classes: 'matching-view', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'View_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'View_Icon_selected.png')}', subnavs: {
                    general: {name: 'General', classes: 'requiresReadWriteOrCustom'}, 
                    layout: {name: 'Layout', classes: '', subsubnavs: {
                        leads: {name: 'Leads', classes: 'requiresReadWriteOrCustom'}, 
                        contacts: {name: 'Contacts', classes: 'requiresReadWriteOrCustom'}, 
                        accounts: {name: 'Accounts', classes: 'requiresReadWriteOrCustom'}, 
                        RL: {name: 'Related Leads', classes: 'requiresReadWriteOrCustom'}, 
                        MC: {name: 'Mass Convert', classes: 'requiresReadWriteOrCustom'} 
                    }}
                }},
                admin: {name: 'Admin', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Settings_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Settings_Icon_Selected.png')}', subnavs: {
                    general: {name: 'Settings', classes: 'requiresReadWrite'},
                    MA: {name: 'CCIO Management', classes: 'hasMatching requiresReadWrite hasCCIOManagement'},
                    MP: {name: 'Permissions', classes: 'requiresReadWrite'},
                    UM: {name: 'Routing Usage', classes: 'requiresReadWrite', path:'#admin/usage_metrics'}
                }},
                help: {name: 'Help', inactiveSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Help_Icon.png')}' , activeSrc: '{!URLFOR($Resource.LeanData__DashboardImages, 'Help_Icon_selected.png')}', path:'#help'}
            }
        };


        // Load main.html into the app wrapper
        window.initializeMagellanAppPage = function(page, params){
            if(typeof params == 'undefined'){
                params = {}
            }
            setActivePageAF(page, JSON.stringify(params));
        }


        var main_intervalFunction;
        var modalDirtyFlag;
        var modalDirtyConfirmed;
        var modalDestination;
        var modalParameters;
        /**
         * Changes Component based on input page id and parameters
         * @param  {String} page        Current page ID
         * @param  {Object} parameters 
         */
        window.changePage = function changePage(page, parameters) {
            if (page !== 'router-lead-FB' && page !== 'router-contact-FBC') showLoadingOverlay();
            if(modalDirtyFlag && modalDirtyConfirmed) {
                modalDestination = page;
                modalParameters = parameters;
                j$('#dirtyModal').modal('show');
            } else {
                // clear interval jobs
                clearInterval(main_intervalFunction);

                if(parameters == undefined) {
                    parameters = {};
                    location.search.substr(1).split("&").forEach(function(item) {
                        var param = item.split("=");
                        if(param[0] != 'page') {  
                            parameters[param[0]] = param[1];
                        }
                    });
                }
                
                setActiveNav(page);
                
                if ('scrollRestoration' in history) {
                  history.scrollRestoration = 'manual';
                }
                  //setActivePageAF is used to load apex components into the frame.
                  setActivePageAF(page, JSON.stringify(parameters));
                  StoreState(page, parameters);
            }
        }
        
        initializeMagellanInitializers();
        initializeMagellanNavigation();
        
        // use this function to use Backbone router that wont require a full page refresh.
        // use this when going from a static resource page to another static resource page.
        // initializers.js on magellan_app.zip needs to run before the Router is setup.
        function changeHashPage(page){
                var hashPath = Magellan.Navigation.getPathFromPage(page);
                
                var paramList = window.location.search.substring(1).split('&');
                var newPage = '';
                
                _.each(paramList, function(param){
                    if(param.split('=')[0] === 'page') newPage = param.split('=')[1];
                });
                
                if(newPage !== page && newPage !== ''){
                    window.history.replaceState({}, document.title, "/apex/Dashboard");
                } else if(newPage !== page && paramList.length > 2){
                    window.history.replaceState({}, document.title, "/apex/Dashboard");
                }

                var okToNavigate = Magellan.Navigation.navigate(hashPath);
                if (!okToNavigate && window.location.hash) {
                    setActiveNav(Magellan.Navigation.getPageFromPath(window.location.hash), false);
                    return;
                }
                setActiveNav(page);
        }

        /**
         * Retrieves/Constructs the page name based on the sidebar nav object names. Different tiers are concatenated by spaces.
         * @param  {String} page            Current page ID
         * @param  {Boolean} lastPageOnly   If true, returns only last Tab Name instead of Full Name
         * @return {String}                 Page Name
         */
        function retrievePageName(page, lastPageOnly, returnArray){
            var breadcrumb = page.split('-');
            
            var fullName = "";
            var pageName = "";
            var pageNames = [];
            var sObjectType;

            if(dashboardSidebar[NAVS].hasOwnProperty(breadcrumb[0])){
                pageName = dashboardSidebar[NAVS][breadcrumb[0]].name;
                fullName = pageName;
                pageNames.push(pageName);
                if(breadcrumb.length > 1 && hasKey(breadcrumb[0]) &&
                    dashboardSidebar[NAVS][breadcrumb[0]][CHILD].hasOwnProperty(breadcrumb[1])){
                    pageName = dashboardSidebar[NAVS][breadcrumb[0]][CHILD][breadcrumb[1]].name;
                    fullName += " " + pageName;
                    sObjectType = _.capitalize(breadcrumb[1]);
                    pageNames.push(pageName);
                    if(breadcrumb.length > 2 && hasKey(breadcrumb[0], breadcrumb[1]) &&
                        dashboardSidebar[NAVS][breadcrumb[0]][CHILD][breadcrumb[1]][SUBCHILD].hasOwnProperty(breadcrumb[2])){
                        pageName = dashboardSidebar[NAVS][breadcrumb[0]][CHILD][breadcrumb[1]][SUBCHILD][breadcrumb[2]].name;
                        fullName += " " + pageName;
                        pageNames.push(pageName);
                        if(breadcrumb.length === 4 && hasKey(breadcrumb[0], breadcrumb[1], breadcrumb[2]) &&
                            dashboardSidebar[NAVS][breadcrumb[0]][CHILD][breadcrumb[1]][SUBCHILD][breadcrumb[2]][SUBSUBCHILD].hasOwnProperty(breadcrumb[3])){
                            pageName = dashboardSidebar[NAVS][breadcrumb[0]][CHILD][breadcrumb[1]][SUBCHILD][breadcrumb[2]][SUBSUBCHILD][breadcrumb[3]].name;
                            fullName += " " + pageName;
                            pageNames.push(pageName);
                        }
                    }
                }
            }
            
            if(pageName == 'FlowBuilder'){pageName = sObjectType + ' ' + pageName;}

            if(returnArray) return (lastPageOnly?[pageName]:pageNames);
            return (lastPageOnly?pageName:fullName.trim());
        }
        
        /**
         * Use history.pushstate to add current page to history.
         * @param {String} page       Current page ID
         * @param {Object} parameters Page Params
         */
        function StoreState(page, parameters) {
            if(page == 'matching-BP' && dashboardController.viewObject.statuses['hasBuyerPersona']) {
                return;
            } else if ((page == 'attribution-CIR-CTW' || page == 'attribution-CIR-RAF') && dashboardController.viewObject.statuses['hasCampaignInfluenceReporting'] && dashboardController.viewObject.statuses['hasAttribution']) {
                return;
            } else if (page == 'attribution-wizard' && dashboardController.viewObject.statuses['hasAttribution']) {
                return;
            }

            var sObj = {page: page, parameters: parameters};
                title = "",
                url = "?page=" + page;

                for (var key in parameters) {
                    if(key!='page') { 
                        url += '&' + key + '=' + parameters[key];
                    }
                }
                
                if (page === 'router-lead-DH' && window.location.hash) url += window.location.hash;

                // push new state
                if(Magellan.Navigation.PAGE_HASHPATH_COLLECTION.filter(function(e) {return e.page == page}).length == 0){
                    history.pushState(sObj, title, url);
                }
                
        }
        
        // Constructs and initializes the sidebar
        function initializeSidebar() {
            //First Tier Menus
            if(dashboardSidebar.hasOwnProperty(NAVS) && {! !autoNavigateToMembers }) {
                var $navSection = j$('.' + LEFT_SIDEBAR);
                for(var key in dashboardSidebar[NAVS]) {
                    var navObj = dashboardSidebar[NAVS][key];
                    $navSection.append(buildButtonDiv(navObj, key, CHILD, NAV, LEFT_SIDEBAR_BUTTON, true));
                    if(navObj.hasOwnProperty(CHILD)) {
                        var $subnavSection = j$("<div>", {class: LEFT_SIDEBAR_SUBNAV + SECTION + ' ' + key + SUBNAV + SECTION, style: "display:none"});
                        //Second Tier Menus
                        for(var subkey in navObj[CHILD]) {
                            var subnavObject = navObj[CHILD][subkey];
                            var subKeyString = constructKeyString(key, subkey);

                            $subnavSection.append(buildButtonDiv(subnavObject, subKeyString, SUBCHILD, SUBNAV, LEFT_SIDEBAR_SUBNAV + ITEM, false));
                            if(subnavObject.hasOwnProperty(SUBCHILD)){
                                var $subsubnavSection = j$("<div>", {class: LEFT_SIDEBAR_SUBSUBNAV + SECTION + ' ' + subKeyString + SUBSUBNAV + SECTION, style: "display:none"});
                                //Third Tier Menus
                                for(var subsubkey in subnavObject[SUBCHILD]) {
                                    var subsubnavObject = subnavObject[SUBCHILD][subsubkey];
                                    var subsubKeyString = constructKeyString(subKeyString, subsubkey);
                                    $subsubnavSection.append(buildButtonDiv(subsubnavObject, subsubKeyString, SUBSUBCHILD, SUBSUBNAV, LEFT_SIDEBAR_SUBSUBNAV + ITEM, false));
                                    if(subsubnavObject.hasOwnProperty(SUBSUBCHILD)){
                                        var $subsubsubnavSection = j$("<div>", {class: LEFT_SIDEBAR_SUBSUBSUBNAV + SECTION + ' ' + subsubKeyString + SUBSUBSUBNAV + SECTION, style: "display:none"});
                                        //Fourth Tier Menus
                                        for(var subsubsubkey in subsubnavObject[SUBSUBCHILD]){
                                            $subsubsubnavSection.append(buildButton(subsubnavObject[SUBSUBCHILD][subsubsubkey], constructKeyString(subsubKeyString, subsubsubkey), SUBSUBSUBNAV + ' ' + LEFT_SIDEBAR_SUBSUBSUBNAV + ITEM, subsubnavObject[SUBSUBCHILD][subsubsubkey].name));
                                        }
                                        $subsubnavSection.append($subsubsubnavSection);
                                    }
                                }
                                $subnavSection.append($subsubnavSection);
                            }
                            $navSection.append($subnavSection);
                        }
                    }
                }
            }
            dashboardController.initializeProductFeatures();
        }

        /**
         * Constructs and returns keys and subkeys joined by dashes
         * @param  {String} key             Required
         * @param  {String} subkey          Optional
         * @param  {String} subsubkey       Optional
         * @param  {String} subsubsubkey    Optional
         * @return {String}                 Concatenated key string
         */
        function constructKeyString(key, subkey, subsubkey, subsubsubkey){
            if(subkey === undefined && subsubkey === undefined && subsubsubkey === undefined) return key;
            if(subsubkey === undefined && subsubsubkey === undefined) return (key + '-' + subkey);
            if(subsubsubkey === undefined) return (key + '-' + subkey + '-' + subsubkey);
            
            return (key + '-' + subkey + '-' + subsubkey + '-' + subsubsubkey);
        }

        /**
         * Builds a nav button div with onclick event, classes, text, icons, expand arrows
         * @param  {Object} nav         Nav object
         * @param  {String} key         Dash separated page ID
         * @param  {String} child       Child nav name
         * @param  {String} navClass    Class for current nav
         * @param  {Stirng} buttonClass Class for button object
         * @param  {Boolean} withIcon   If icons should be included
         * @return {jQuery Object}             
         */
        function buildButtonDiv(nav, key, child, navClass, buttonClass, withIcon){
            var $buttonDiv = buildButton(nav, key, navClass + " " + buttonClass);
            var $buttonSpan = j$("<span>", {class: buttonClass + TITLE + ' nav-link-title', text: nav.name});
            if(withIcon){
                var $imgParent = j$("<div>", {class: buttonClass + IMG}); 
                var $imgInactive = j$("<img>", {src: nav.inactiveSrc, class: "icon " + INACTIVE_ICON});
                var $imgActive = j$("<img>", {src: nav.activeSrc, class: "icon " + ACTIVE_ICON, style:"display:none"});
                var $imgDisabled = j$("<img>", {src: nav.disabledSrc, class: "icon icon_disabled"});
                $imgParent.append($imgInactive);
                $imgParent.append($imgActive);
                if (nav.disabledSrc) $imgParent.append($imgDisabled);
                $buttonDiv.append($imgParent);
            }
            if(nav.hasOwnProperty(child)) {
                $buttonDiv.addClass('noOpenPage');
                var $expandArrowAnchor = j$("<a>", {href:'#', target:"_blank", class:  'expandMenu', text: ('')});

                var $expandArrow = j$("<img>", {class: ARROW + ' ' + key + ARROW_SPECIFIC, src: "{!URLFOR($Resource.LeanData__magellan_app, 'images/Subnav_Arrow.png')}"});
                var $expandArrowActive = j$("<img>", {class: ARROW + ' ' + ARROW + '-active ' + key + ARROW_SPECIFIC, src: "{!URLFOR($Resource.LeanData__magellan_app, 'images/Subnav_Arrow_Active.png')}", style:"display:none"});
                
                $expandArrowAnchor.append($expandArrow);
                $expandArrowAnchor.append($expandArrowActive);
                $buttonSpan.append($expandArrowAnchor);
            }
            $buttonSpan.append('<span class="product-badge"></span>');
            $buttonDiv.append($buttonSpan);
            return $buttonDiv;
        }

        /**
         * Builds a nav button with onclick event, classes and text
         * Example of built object: <div onclick="changePage('home') class='home-nav'> Home </div>"
         * @param  {Object} nav       Nav object to be parsed
         * @param  {String} keyString Page link ID for link to new page and class purposes
         * @param  {String} navclass  Extra classes
         * @param  {String} label     Text for nav page
         * @return {jQuery Object}    
         */
        function buildButton(nav, keyString, navclass, label){
            var navButton;
            if(nav.hasOwnProperty('href'))
                navButton = j$("<a>", {href:nav.href, target:'_blank', class: keyString + navclass + " " + (nav.classes || ''), text: (label || '')});
            else
                navButton = j$("<a>", {href:"#", name: keyString, class: keyString + navclass + " nav-click " + (nav.classes || ''), text: (label || '')});
            
            if (navButton.is('.left-sidebar-subsubsubnav-item')) navButton.append('<span class="product-badge"></span>');
            return navButton;
        }

        function arrowClickHandler(event, element){
            event.stopPropagation();
            event.preventDefault();
            var childrenContainer = j$(element).parent().parent().next();
            
            if(childrenContainer.hasClass('expanded')){
                childrenContainer.removeClass('expanded');
                childrenContainer.slideUp();
                j$(element).children().removeClass('rotatedArrow');
                j$(element).children().rotate({angle: 90, animateTo: 0});    
            } else {
                childrenContainer.addClass('expanded');
                childrenContainer.slideDown();
                j$(element).children().addClass('rotatedArrow');
                j$(element).children().rotate({angle: 0, animateTo: 90});    
            }
        }

        function navClickHandler(event, element){
            event.preventDefault(); //for opening dashboard with tab
            if(event.metaKey){ //for opening tab with cmd + left click
                window.open('?page='+element.name, "", "_blank");
            } else {
                changePage(element.name);
            }
        }
        
        /**
         * Uses keyChildExists to do condition checking if key exists
         * @param  {String}  key       Required
         * @param  {String}  subkey    Optional
         * @param  {String}  subsubkey Optional 
         * @return {Boolean}           
         */
        function hasKey(key, subkey, subsubkey){
            if(subkey === undefined && subsubkey === undefined) 
                return keyChildExists(dashboardSidebar[NAVS], key, CHILD);
            if(subsubkey === undefined) 
                return keyChildExists(dashboardSidebar[NAVS], key, CHILD) && keyChildExists(dashboardSidebar[NAVS][key][CHILD], subkey, SUBCHILD);
            return keyChildExists(dashboardSidebar[NAVS], key, CHILD) && keyChildExists(dashboardSidebar[NAVS][key][CHILD], subkey, SUBCHILD) && keyChildExists(dashboardSidebar[NAVS][key][CHILD][subkey][SUBCHILD], subsubkey, SUBSUBCHILD);
        }

        /**
         * Checks if input object has property of navKey and if navKey has property of child
         * @param  {Object} obj    Required
         * @param  {String} navKey Required
         * @param  {String} child  Optional
         * @return {Boolean}        
         */
        function keyChildExists(obj, navKey, child){
            return obj.hasOwnProperty(navKey) && obj[navKey].hasOwnProperty(child);
        }
        
        function getPermissionSet(){
            return {
                'hasRouter':dashboardController.viewObject.statuses['hasRouter'],
                'hasMatching':dashboardController.viewObject.statuses['hasMatching'],
                'hasAttribution':dashboardController.viewObject.statuses['hasAttribution'],
                'hasReadWriteAccess':dashboardController.viewObject.statuses['hasReadWriteAccess']
            }
        }

        var $rotatedArrow;
        var $subRotatedArrow;
        var $subsubRotatedArrow;
        var leandataDebuggerOn = false;
        
        /**
         * Master method for setting active class on current pages/nav, 
         * rotating arrows and hiding/showing of subnavs
         * @param {String} navString   Required
         * @param {String} titleString Optional
         */
        function setActiveNav(navString, titleString) {
            
            // GA Tracker
//            clearActive();
            gaTrack(retrievePageName(navString, false, true), 'Page Change');

            if(leandataDebuggerOn) {
                debugger;
            }
            
            // Hacky way to remove header title text: a non-empty string must be input otherwise the entire header will not be initialized
            // color is set to the same as background to make `:` invisible
            if (titleString !== false) j$(".header-title").text(':').css('color', 'var(--dk-grey-2) !important');

            navString = navString.split("-");
            var navitem = navString[0] + "-nav";
            var subnav = navString[0] + SUBNAV + SECTION;
            j$('.' + ACTIVE_ICON).css('display','none');
            j$('.' + INACTIVE_ICON).css('display','');
                
            j$('.' + LEFT_SIDEBAR_BUTTON).removeClass(LEFT_SIDEBAR_BUTTON + ACTIVE);

            j$('.' + navitem).find('.' + ACTIVE_ICON).css('display', '');
            j$('.' + navitem).find('.' + INACTIVE_ICON).css('display', 'none');
            
            j$('.' + navitem).addClass(LEFT_SIDEBAR_BUTTON + ACTIVE);
            $rotatedArrow = subnavHandler(subnav, $rotatedArrow, LEFT_SIDEBAR_SUBNAV + SECTION, hasKey(navString[0]), navString[0]);
            var keyString;
            if(navString.length > 1){
                keyString = constructKeyString(navString[0], navString[1]);
                j$('.' + LEFT_SIDEBAR_SUBNAV + ITEM).removeClass(LEFT_SIDEBAR_SUBNAV + ITEM + ACTIVE);
                j$('.' + LEFT_SIDEBAR_SUBNAV + SECTION).removeClass(LEFT_SIDEBAR_SUBNAV + SECTION + ACTIVE);
                var subnavitem = keyString + SUBNAV;
                var subsubnav = keyString + SUBSUBNAV + SECTION;
                j$('.' + subnavitem).addClass(LEFT_SIDEBAR_SUBNAV + ITEM + ACTIVE);
                j$('.' + subnav).addClass(LEFT_SIDEBAR_SUBNAV + SECTION + ACTIVE);
                $subRotatedArrow = subnavHandler(subsubnav, $subRotatedArrow, LEFT_SIDEBAR_SUBSUBNAV + SECTION, hasKey(navString[0], navString[1]), keyString);
            }
            if(navString.length > 2){
                keyString = constructKeyString(keyString, navString[2]);
                j$('.' + LEFT_SIDEBAR_SUBSUBNAV + ITEM).removeClass(LEFT_SIDEBAR_SUBSUBNAV + ITEM + ACTIVE);
                var subsubnavitem = keyString + SUBSUBNAV;
                var subsubsubnav = keyString + SUBSUBSUBNAV + SECTION;
                j$('.' + subsubnavitem).addClass(LEFT_SIDEBAR_SUBSUBNAV + ITEM + ACTIVE);
                $subsubRotatedArrow = subnavHandler(subsubsubnav, $subsubRotatedArrow, LEFT_SIDEBAR_SUBSUBSUBNAV + SECTION, hasKey(navString[0], navString[1], navString[2]), keyString);
            }
            if(navString.length === 4){
                j$('.' + LEFT_SIDEBAR_SUBSUBSUBNAV + ITEM).removeClass(LEFT_SIDEBAR_SUBSUBSUBNAV + ITEM + ACTIVE);
                var subsubsubnavitem = constructKeyString(keyString, navString[3]) + SUBSUBSUBNAV;
                j$('.' + subsubsubnavitem).addClass(LEFT_SIDEBAR_SUBSUBSUBNAV + ITEM + ACTIVE);
            }

            // Populate variable dom elements.
            dashboardController.populateVariableDomElements();
            
            //j$("html, body").animate({ scrollTop: headerOffset }, "slow");
            //console.log(j$("html, body").scrollTop());

            // Disabled ReadWrite permission links
            if(!dashboardController.viewObject.statuses['hasReadWriteAccess']) {
                disableGivenClass('.requiresReadWrite');

                if(!dashboardController.viewObject.statuses['enableAllowUserColumnCustomizations']) {
                    disableGivenClass('.requiresReadWriteOrCustom');
                }
            }

            /**
             * If the current nav has a subnav that is not visible
             * (user came from diferent nav), rotate previous arrow anti-clockwise,
             * show current subnav section and return new rotated arrow.
             * @param  {String} subnavString 
             * @param  {jQuery Object} $arrowObj    
             * @param  {String} subnavClass  
             * @param  {Boolean} hasChildren    
             * @param  {String} arrowClass   
             * @return {jQuery Object}              
             */
            function subnavHandler(subnavString, $arrowObj, subnavClass, hasChildren, arrowClass){
                if(!j$('.' + subnavString).is(":visible") || (!j$('.' + subnavClass).hasClass('expanded') && j$('.' + subnavString).is(":visible")) ) {
                    //if visible but no expanded class, means it's supposed to be open but the close all method had removed the expanded class already.
                    if(subnavClass == 'left-sidebar-subnav-section'){
                        if($arrowObj != null) {
                            // Using jQuery rotate.
                            $arrowObj.rotate({angle: 90, animateTo: 0});
                            $arrowObj = null;
                        }
                        j$('.' + subnavClass).slideUp();
                    }

                    // If sidebar has subnavs.
                    if(hasChildren) {
                        // Slide down the div.
                        j$('.' + subnavString).slideDown();
                        j$('.' + subnavString).addClass('expanded');
                        // Store arrow object for future anti-clockwise rotation. Use jQuery rotate.
                        $arrowObj = j$('.' + arrowClass + '-expandarrow');
                        $arrowObj.rotate({angle: 0, animateTo: 90});
                        $arrowObj.addClass('rotatedArrow');
                    }
                }
                return $arrowObj;
            }
        }

        function disableGivenClass(givenClass) {
            j$(givenClass).addClass('disabledLink');
            j$(givenClass).attr('disabled', 'disabled');
            j$(givenClass).attr('for','');
            j$(givenClass).attr('onClick','');
            j$(givenClass).attr('href','#/');
            j$(givenClass).removeAttr('target');
        }

        // For Magellan
        function dirtyFlowBuilderUnloadEventHandler(event) {
            if (typeof Magellan !== "undefined" && typeof Magellan.Controllers !== "undefined" && typeof Magellan.Controllers.GUI !== "undefined" && Magellan.Controllers.GUI.graphHasChanged()) {
                if (event) {
                    event.returnValue = "randomString";
                }
                return "randomString";
            } else {
                return null;
            } 
        }
   
        /* 
            Called when user hits the back button. Pops state of the history
            stack, and sets the current page to the previous page.
        */
        window.addEventListener("popstate", function(e) {
            if (typeof Magellan !== "undefined" && typeof Magellan.Controllers !== "undefined" && typeof Magellan.Controllers.GUI !== "undefined" && typeof chosenGraphId !== "undefined" && chosenGraphId !== null && Magellan.Controllers.GUI.graphHasChanged()) {
                var clickAway = confirm("Are you sure you want to leave this graph?", "You have unsaved changes that will be lost. Press OK to leave or Cancel to stay on the page.");
                if (!clickAway) {
                    // Stay on the current page.
                    history.pushState(history.state, "", window.location.href);
                    return;
                } else {
                    // This probably needs a tighter check
                    chosenGraphId = null;
                }
            }
            if ('scrollRestoration' in history) {
                history.scrollRestoration = 'manual';
            }
            
            if (e.state) setActivePageAF(e.state.page, JSON.stringify(e.state.parameters));
        });

        j$('#settingsSavedModal').on('hidden.bs.modal', function (e) {
            window.history.back();
        });

        j$(document).ready(function() {

            if(getParameterByName('leandatadebugger') == '1') {
                leandataDebuggerOn = true;
            }
            
            // Display loading animation.
            j$('.loadingOverlay').parent().css('display', 'block');

            postLoadInitialization();
            initializeDefaultModals();
        });

        function initializeDefaultModals(){
            j$('#defaultModalDiv').append(createModal('settingsSaved', 'Settings Saved', '<div class="modal-body"><p>Your settings have been successfully saved.</p><p class="lean">The LeanData Team</p></div>', null, null, null, null, null, 40));
            j$('#defaultModalDiv').append(createModal('error', 'Error Occurred', '', null, null, null, null));
        }

        function clearModalDiv(){
            j$('#modalDiv').empty();
        }

        function showErrorModal(msg){
            j$('#errorModalText').text(msg);
            j$('#errorModal').modal('show');
        }

        //Kurt - leaving both parent and child div's for now to prevent regression of a few one off references to only the child div that we have in our code base.
        function showLoadingOverlay(){
            j$('.loadingOverlayParent').parent().css('display', 'block');
            j$('.loadingOverlay').parent().css('display', 'block');
        }

        function hideLoadingOverlay(){
            j$('.loadingOverlayParent').parent().css('display', 'none');
            j$('.loadingOverlay').parent().css('display', 'none');
        }
        
        function returnHome(){
            Magellan.Navigation.navigate('#');
            closeAll();
        }

        function postLoadInitialization() {
            
            /* Set page to parameter provided, or default to Home. */
            var page = getParameterByName('page') || 'home';
            initializeSidebar();

            j$('.nav-click').click(function(event){
                event.stopPropagation();
                event.preventDefault();
                if (j$(this).hasClass('disabledLink')) return;
                //check for noOpenPage class
                if(j$(this).hasClass('noOpenPage')){
                    arrowClickHandler(event, j$(this).find('.expandMenu'));
                }
                else{
                    closeAll(event,this);
                    var that = this;
                    if(Magellan.Navigation.PAGE_HASHPATH_COLLECTION.filter(function(e) {return e.page == that.name}).length > 0){
                         changeHashPage(that.name)
                    }else{
                         navClickHandler(event,this);
                    }
                    event.preventDefault();
                    event.stopPropagation();
                }
            });

            // support tab click open in new tab on salesforce classic
            // and prevent the new tab from opening in lightning experience
            j$('.nav-click').mousedown(function(event){
                if(typeof sforce == 'undefined'){
                      switch (event.which){
                        case 1:
                            break;
                        case 2:
                            var that = this;
                            if(Magellan.Navigation.PAGE_HASHPATH_COLLECTION.filter(function(e) {return e.page == that.name}).length > 0){
                               j$(this).attr('href', Magellan.Navigation.getPathFromPage(j$(this).attr('name')));
                            }else{
                                j$(this).attr('href', '?page=' + j$(this).attr('name'));
                            }
                            break;
                        case 3:
                            var that = this;
                            if(Magellan.Navigation.PAGE_HASHPATH_COLLECTION.filter(function(e) {return e.page == that.name}).length > 0){
                               j$(this).attr('href', Magellan.Navigation.getPathFromPage(j$(this).attr('name')));
                            }else{
                                j$(this).attr('href', '?page=' + j$(this).attr('name'));
                            }
                            break;
                        default:
                            console.log('click type not supported');
                    }
                }
            })

            j$('.expandMenu').click(function(event){
                event.stopPropagation();
                event.preventDefault();
                if (j$(this).parent().parent().hasClass('disabledLink')) return;
                arrowClickHandler(event,this);
            });

        }

        function clearActive(){
            j$('.' + LEFT_SIDEBAR_SUBNAV + ITEM).removeClass(LEFT_SIDEBAR_SUBNAV + ITEM + ACTIVE);
            j$('.' + LEFT_SIDEBAR_SUBSUBNAV + ITEM).removeClass(LEFT_SIDEBAR_SUBSUBNAV + ITEM + ACTIVE);
            j$('.' + LEFT_SIDEBAR_SUBSUBSUBNAV + ITEM).removeClass(LEFT_SIDEBAR_SUBSUBSUBNAV + ITEM + ACTIVE);
        }

        function closeAll(event, element){
            
            var fullElementName = element?element.name:'';
            var elementNames = fullElementName.split('-');

            var classesToIgnore = '';
            var elementName = '';
            for(let i=0; i<elementNames.length; i++){
                elementName += elementNames[i];
                if(i > 0) classesToIgnore +=',';
                classesToIgnore += '.' + elementName  + SUBNAV + SECTION + ',' + '.' + elementName  + SUBSUBNAV + SECTION + ',' + '.' + elementName  + SUBSUBSUBNAV + SECTION + ',.' + elementName + ARROW_SPECIFIC;        
                elementName += '-';
            }
            j$('.expanded').not(classesToIgnore).slideUp().removeClass('expanded');
            j$('.rotatedArrow').not(classesToIgnore).removeClass('rotatedArrow').rotate({angle: 90, animateTo: 0});
            
            //remove all active css
            clearActive();
        }

        function gaTrack(title, action) {
            if ('{!isGaDisabled}'!='true') {
                var len = title.length;
                ga('set', 'dimension1', '{!JSENCODE(orgName)}' + ' - ' + '{!orgId}');
                ga('set', 'dimension2', '{!JSENCODE(userName)}' + ' - ' + '{!userId}');
                ga('set', 'dimension3', title[0]);
                ga('set', 'dimension4', len>1?title[1]:"");
                ga('set', 'dimension5', len>2?(len===4?title[2] + ' | ' + title[3]:title[2]):"");
                ga('set', 'dimension6', (dashboardController.viewObject['isSandbox']?'Yes':'No'));
                ga('send', {
                    hitType: 'event',
                    eventCategory: 'Dashboard',
                    eventAction: action      
                });
            }
        }
    </script>

    <!-- Initialize Code From Static Resource -->
    <!-- Initialize Backbone Router From magellan_app.zip -->
    <apex:includeScript value="{!URLFOR($Resource.LeanData__magellan_app, 'javascript/loadingoverlay-2.1.3.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.LeanData__magellan_app, 'router.js')}" />
</apex:page>