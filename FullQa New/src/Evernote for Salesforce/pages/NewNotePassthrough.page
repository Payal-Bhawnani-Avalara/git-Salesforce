<apex:page id="NewNotePassthrough" controller="Evernote.EvernotePassthroughController" standardStylesheets="false" sidebar="false" showHeader="false" docType="html-5.0">
<apex:includeScript value="{!$Resource.Evernote__ThriftCombined}"  />
<apex:stylesheet value="{!$Resource.Evernote__EnSfdcStyles}" />
<apex:stylesheet value="{!$Resource.Evernote__WaitStyles}" />
<c:EvernoteConstants />
<c:TextResource />
<c:EvernoteJsLibrary />
<c:EvernoteDisabler />
<c:EvernoteDefaultNotebook />
<c:ErrorNotification />
<c:EvernoteTokenComponent />
<c:EvernoteNoteLinkerComponent />
<c:EvernoteLogger />    
<c:PopupWait />
<script type="text/javascript">
var textResource = new TextResource();    
var enLibrary = new EvernoteLibrary();
var errorHandler = new EvernoteErrorHandler();
var storeClients = new StoreClients(setupAfterStoreClientsLoaded, displayErrorMessageSafely, getSsoAuthentication);
var waitPanel;
var noteLinker;    
var storeClientReady = false;
var docComponentsReady = false;    
var notebookGuid;
var sfdcId;
var sfdcRecName;
var evernoteDisabler;
var defaultNotebookPicker;
var enLogger;    

document.addEventListener("DOMContentLoaded", documentReady);

function documentReady(event) {
    waitPanel = new WaitPanel();
    waitPanel.activate();

    notebookGuid = enLibrary.getValueFromQueryString('nb');
    sfdcId = enLibrary.getValueFromQueryString('sfdc');
    evernoteDisabler = new EvernoteDisabler();

    docComponentsReady = true;
    createNewNoteIfReady();
}   
    
async function setupAfterStoreClientsLoaded() {    
    if (document.readyState === 'loading') {
        document.addEventListener("DOMContentLoaded", setupAfterStoreClientsLoaded);
        return;
    }

    sfdcRecName = await getSalesforceNameAsync();
    noteLinker = new NoteLinker(storeClients);
    storeClientReady = true;
    createNewNoteIfReady();
}

function createNewNoteIfReady() {
    if (docComponentsReady && storeClientReady) {
        createNewNote();
    }
}    

async function createNewNote() {
    // by this point, the user should be confirmed to have a notebook selected.
    var newNote
    try {
        newNote = await noteLinker.createNewNote(sfdcRecName, notebookGuid);
    } catch(err) {
        if (err.unauthorized) {
            //defaultNotebook.askUserToSelectNotebook();
            //errorHandler.displayError(err.message);
            errorHandler.displayError(err.message);
            getDefaultNotebookSelection();
        } else {
            errorHandler.displayError(err);
        }
        return;
    }
    
    enLogger = new EvernoteLogger(sfdcId);
    enLogger.setEnUserId(storeClients);
	enLogger.recordNoteEvent(newNote.guid, LoggingNoteOperation.Create);
    await noteLinker.shareNoteAndLinkWithoutLogging(sfdcRecName, newNote.guid, sfdcId);
	enLogger.recordNoteEvent(newNote.guid, LoggingNoteOperation.Pin, LoggingNoteQualifier.NewNote);
    openEditor(newNote.guid);
}
    
function getDefaultNotebookSelection() {
    if (!defaultNotebookPicker) {
        defaultNotebookPicker = new DefaultNotebook(evernoteDisabler, storeClients, waitPanel);
        defaultNotebookPicker.addListenerToNotebookSelection(notebookSelectedHandler);
    }
    defaultNotebookPicker.askUserToSelectNotebook();
}

function notebookSelectedHandler(event) {
    if (event && event.detail && event.detail.guid) {
        notebookGuid = event.detail.guid;
        createNewNote();
    }
}    

function openEditor(noteGuid) {            
	var baseUrl = '{!baseUrl}';
    var destination = enLibrary.getNoteEditorPath(baseUrl, noteGuid, storeClients.getBizShardId(), storeClients.isPersonalOnly());
    window.top.location.replace(baseUrl + destination);
}
    

async function getSalesforceNameAsync() {
    return errorHandler.wrapAsyncRpcForError((async function() {
        return await getSalesforceName();
    }).bind(this));
}
                
function getSalesforceName() {
    return new Promise((resolve, reject) => {
        Visualforce.remoting.Manager.invokeAction(
        '{!$RemoteAction.EvernotePassthroughController.getSalesforceName}',
        sfdcId,
        function(sfdcName, evt) {                                
            if (evt.status) {
                resolve(sfdcName);
            } else {
                errorHandler.rejectErrorWithDefault(
                    reject, evt,
                    textResource.texts.popup.error.salesforceName);
            }
        },
        {escape:false});    
    });
}

function getSsoAuthentication(uid, uemail) {
	enLibrary.deleteCookie(StoreClientConstants.UserTokenKey);
	var destination = enLibrary.getSsoLoginUrl(uid, '{!JSENCODE(baseUrl)}',
						'{!JSENCODE(longTokenCreated)}', encodeURIComponent(window.location.href));
	window.top.location.replace(destination);
}

function displayErrorMessageSafely(error) {
    if (document.readyState === 'loading') {
        document.addEventListener("DOMContentLoaded", () => {	 displayErrorMessage(error); });
        return;
    }
	displayErrorMessage(error);
}    
</script>    

<apex:outputPanel id="mainPanel" layout="block" styleClass="mainPanel">
<apex:form >
	<apex:actionFunction name="displayErrorMessage" action="{!displayErrorMessage}" immediate="true"
                             reRender="mainPanel" oncomplete="waitPanel.deactivate()">
		<apex:param name="errorMessage" value=""/>
    </apex:actionFunction>
</apex:form>

<c:EvernoteAuthenticationComponent id="errorMessageComponent" rendered="{!showErrorMessage}" ErrorMessage="{!errorMessage}"
                                         SalesforceRecordId=""  HideButtons="true" />
</apex:outputPanel>                                           

</apex:page>