//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2Apexv2 {
    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT || 
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class ReadOnly {
        public Line line {get;set;} 
        public ReadOnly(){

        }
        public ReadOnly(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'line') {
                            line = new Line(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'ReadOnly consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Options {
        public String optionId {get;set;} 
        public Boolean selected {get;set;} 
        public String ProductCode {get;set;} 
        public String ProductName {get;set;} 
        public Integer Quantity {get;set;} 
        public ConfigurationData configurationData {get;set;} 
        public Integer index {get;set;} 
        public ReadOnly readOnly {get;set;} 

        public Options(){

        }

        public Options(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'optionId') {
                            optionId = parser.getText();
                        } else if (text == 'selected') {
                            selected = parser.getBooleanValue();
                        } else if (text == 'ProductCode') {
                            ProductCode = parser.getText();
                        } else if (text == 'ProductName') {
                            ProductName = parser.getText();
                        } else if (text == 'Quantity') {
                            Quantity = parser.getIntegerValue();
                        } else if (text == 'configurationData') {
                            configurationData = new ConfigurationData(parser);
                        } else if (text == 'index') {
                            index = parser.getIntegerValue();
                        } else if (text == 'readOnly') {
                            readOnly = new ReadOnly(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Option4 consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    
    
    
    public class QuoteConfig {
        public Quote quote {get;set;} 
        public Product product {get;set;} 
        public List<ConfigurationData> products {get;set;} 
        public ReadOnly_Z readOnly {get;set;} 
        public Redirect redirect {get;set;} 

        public QuoteConfig(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'quote') {
                            quote = new Quote(parser);
                        } else if (text == 'product') {
                            product = new Product(parser);
                        } else if (text == 'products') {
                            products = new List<ConfigurationData>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                products.add(new ConfigurationData(parser));
                            }
                        } else if (text == 'readOnly') {
                            readOnly = new ReadOnly_Z(parser);
                        } else if (text == 'redirect') {
                            redirect = new Redirect(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class SBQQ_Opportunity2_r {
        public Attributes attributes {get;set;} 
        public String Id {get;set;} 
        public String SBQQ_PrimaryQuote_c {get;set;} 
        public String Pricebook2Id {get;set;} 
        public String AccountId {get;set;} 
        public String CurrencyIsoCode {get;set;} 

        public SBQQ_Opportunity2_r(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'SBQQ_PrimaryQuote_c') {
                            SBQQ_PrimaryQuote_c = parser.getText();
                        } else if (text == 'Pricebook2Id') {
                            Pricebook2Id = parser.getText();
                        } else if (text == 'AccountId') {
                            AccountId = parser.getText();
                        } else if (text == 'CurrencyIsoCode') {
                            CurrencyIsoCode = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'SBQQ_Opportunity2_r consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Attributes_Z {
        public String type_Z {get;set;} // in json: type

        public Attributes_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'type') {
                            type_Z = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Attributes_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Attributes {
        public String type_Z {get;set;} // in json: type
        public String url {get;set;} 

        public Attributes(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'url') {
                            url = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Attributes consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ConfigurationData {
        public String Asset_c {get;set;} 
        public String Asset_Serial_Number_c{get;set;}
        
        public ConfigurationData(){

        }
        public ConfigurationData(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Asset_c') {
                            Asset_c = parser.getText();
                        }else if (text == 'Asset_Serial_Number_c') {
                            Asset_Serial_Number_c = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'ConfigurationData consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Product {
        public String configuredProductId {get;set;} 
        public String lineItemId {get;set;} 
        public Integer lineKey {get;set;} 
        public ConfigurationAttributes configurationAttributes {get;set;} 
        public OptionConfigurations optionConfigurations {get;set;} 
        public ConfigurationData configurationData {get;set;} 

        public Product(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'configuredProductId') {
                            configuredProductId = parser.getText();
                        } else if (text == 'lineItemId') {
                            lineItemId = parser.getText();
                        } else if (text == 'lineKey') {
                            lineKey = parser.getIntegerValue();
                        } else if (text == 'configurationAttributes') {
                            configurationAttributes = new ConfigurationAttributes(parser);
                        } else if (text == 'optionConfigurations') {
                            optionConfigurations = new OptionConfigurations(parser);
                        } else if (text == 'configurationData') {
                            configurationData = new ConfigurationData(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Product consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ReadOnly_Z {
        public ConfigurationData line {get;set;} 

        public ReadOnly_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'line') {
                            line = new ConfigurationData(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'ReadOnly_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Redirect {
        public Boolean auto {get;set;} 
        public Boolean save {get;set;} 

        public Redirect(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'auto') {
                            auto = parser.getBooleanValue();
                        } else if (text == 'save') {
                            save = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Redirect consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ConfigurationAttributes {
        public Integer Total_MBPs_c {get;set;} 
        public Attributes_Z attributes {get;set;} 

        public ConfigurationAttributes(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Total_MBPs_c') {
                            Total_MBPs_c = parser.getIntegerValue();
                        } else if (text == 'attributes') {
                            attributes = new Attributes_Z(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'ConfigurationAttributes consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Quote {
        public Attributes attributes {get;set;} 
        public String Id {get;set;} 
        public String CurrencyIsoCode {get;set;} 
        public String Name {get;set;} 
        public String SBQQ_Type_c {get;set;} 
        public String SBQQ_Account_c {get;set;} 
        public Integer SBQQ_SubscriptionTerm_c {get;set;} 
        public String SBQQ_ExpirationDate_c {get;set;} 
        public String SBQQ_QuoteProcessId_c {get;set;} 
        public Integer SBQQ_NetAmount_c {get;set;} 
        public Integer SBQQ_CustomerAmount_c {get;set;} 
        public String SBQQ_PricebookId_c {get;set;} 
        public Boolean SBQQ_Unopened_c {get;set;} 
        public Integer SBQQ_LineItemCount_c {get;set;} 
        public Boolean SBQQ_OrderByQuoteLineGroup_c {get;set;} 
        public String SBQQ_PaymentTerms_c {get;set;} 
        public Integer ApplyAdditionalDiscountLast_c {get;set;} 
        public Boolean ActiveCheckbox_c {get;set;} 
        public Boolean SBQQ_Primary_c {get;set;} 
        public Boolean SBQQ_LineItemsGrouped_c {get;set;} 
        public String SBQQ_Opportunity2_c {get;set;} 
        public SBQQ_Account_r SBQQ_Account_r {get;set;} 
        public SBQQ_Opportunity2_r SBQQ_Opportunity2_r {get;set;} 
        public Integer SBQQ_CustomerDiscount_c {get;set;} 
        public Integer SBQQ_MarkupRate_c {get;set;} 
        public Integer SBQQ_PartnerDiscount_c {get;set;} 
        public String SBQQ_StartDate_c {get;set;} 
        public String SBQQ_EndDate_c {get;set;} 
        public String SBQQSC_MasterServiceContract_c {get;set;} 
        public Integer SBQQ_DistributorDiscount_c {get;set;} 
        public String SBQQ_FirstSegmentTermEndDate_c {get;set;} 
        public String SBQQ_GenerateContractedPrice_c {get;set;} 
        public String SBQQ_ContractingMethod_c {get;set;} 
        public String SBQQ_BillingFrequency_c {get;set;} 
        public Integer SBQQ_RenewalTerm_c {get;set;} 
        public Integer SBQQ_RenewalUpliftRate_c {get;set;} 
        public String SBQQ_OrderBy_c {get;set;} 
        public String SBQQ_OrderGroupID_c {get;set;} 
        public Integer ApplyPartnerDiscountFirst_c {get;set;} 

        public Quote(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'CurrencyIsoCode') {
                            CurrencyIsoCode = parser.getText();
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'SBQQ_Type_c') {
                            SBQQ_Type_c = parser.getText();
                        } else if (text == 'SBQQ_Account_c') {
                            SBQQ_Account_c = parser.getText();
                        } else if (text == 'SBQQ_SubscriptionTerm_c') {
                            SBQQ_SubscriptionTerm_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_ExpirationDate_c') {
                            SBQQ_ExpirationDate_c = parser.getText();
                        } else if (text == 'SBQQ_QuoteProcessId_c') {
                            SBQQ_QuoteProcessId_c = parser.getText();
                        } else if (text == 'SBQQ_NetAmount_c') {
                            SBQQ_NetAmount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_CustomerAmount_c') {
                            SBQQ_CustomerAmount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PricebookId_c') {
                            SBQQ_PricebookId_c = parser.getText();
                        } else if (text == 'SBQQ_Unopened_c') {
                            SBQQ_Unopened_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_LineItemCount_c') {
                            SBQQ_LineItemCount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_OrderByQuoteLineGroup_c') {
                            SBQQ_OrderByQuoteLineGroup_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_PaymentTerms_c') {
                            SBQQ_PaymentTerms_c = parser.getText();
                        } else if (text == 'ApplyAdditionalDiscountLast_c') {
                            ApplyAdditionalDiscountLast_c = parser.getIntegerValue();
                        } else if (text == 'ActiveCheckbox_c') {
                            ActiveCheckbox_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_Primary_c') {
                            SBQQ_Primary_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_LineItemsGrouped_c') {
                            SBQQ_LineItemsGrouped_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_Opportunity2_c') {
                            SBQQ_Opportunity2_c = parser.getText();
                        } else if (text == 'SBQQ_Account_r') {
                            SBQQ_Account_r = new SBQQ_Account_r(parser);
                        } else if (text == 'SBQQ_Opportunity2_r') {
                            SBQQ_Opportunity2_r = new SBQQ_Opportunity2_r(parser);
                        } else if (text == 'SBQQ_CustomerDiscount_c') {
                            SBQQ_CustomerDiscount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_MarkupRate_c') {
                            SBQQ_MarkupRate_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PartnerDiscount_c') {
                            SBQQ_PartnerDiscount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_StartDate_c') {
                            SBQQ_StartDate_c = parser.getText();
                        } else if (text == 'SBQQ_EndDate_c') {
                            SBQQ_EndDate_c = parser.getText();
                        } else if (text == 'SBQQSC_MasterServiceContract_c') {
                            SBQQSC_MasterServiceContract_c = parser.getText();
                        } else if (text == 'SBQQ_DistributorDiscount_c') {
                            SBQQ_DistributorDiscount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_FirstSegmentTermEndDate_c') {
                            SBQQ_FirstSegmentTermEndDate_c = parser.getText();
                        } else if (text == 'SBQQ_GenerateContractedPrice_c') {
                            SBQQ_GenerateContractedPrice_c = parser.getText();
                        } else if (text == 'SBQQ_ContractingMethod_c') {
                            SBQQ_ContractingMethod_c = parser.getText();
                        } else if (text == 'SBQQ_BillingFrequency_c') {
                            SBQQ_BillingFrequency_c = parser.getText();
                        } else if (text == 'SBQQ_RenewalTerm_c') {
                            SBQQ_RenewalTerm_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_RenewalUpliftRate_c') {
                            SBQQ_RenewalUpliftRate_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_OrderBy_c') {
                            SBQQ_OrderBy_c = parser.getText();
                        } else if (text == 'SBQQ_OrderGroupID_c') {
                            SBQQ_OrderGroupID_c = parser.getText();
                        } else if (text == 'ApplyPartnerDiscountFirst_c') {
                            ApplyPartnerDiscountFirst_c = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Quote consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Line {
        public Attributes attributes {get;set;} 
        public String Id {get;set;} 
        public String CurrencyIsoCode {get;set;} 
        public String SBQQ_Quote_c {get;set;} 
        public String SBQQ_RequiredBy_c {get;set;} 
        public String SBQQ_Product_c {get;set;} 
        public String SBQQ_ProductOption_c {get;set;} 
        public Integer SBQQ_Number_c {get;set;} 
        public String SBQQ_DynamicOptionId_c {get;set;} 
        public Integer SBQQ_AdditionalDiscount_c {get;set;} 
        public Boolean SBQQ_Bundled_c {get;set;} 
        public Boolean SBQQ_ComponentDiscountedByPackage_c {get;set;} 
        public String SBQQ_ComponentSubscriptionScope_c {get;set;} 
        public Integer SBQQ_CustomerPrice_c {get;set;} 
        public Integer SBQQ_DefaultSubscriptionTerm_c {get;set;} 
        public Integer SBQQ_ListPrice_c {get;set;} 
        public Integer SBQQ_OriginalPrice_c {get;set;} 
        public Integer SBQQ_NetPrice_c {get;set;} 
        public Integer SBQQ_NetTotal_c {get;set;} 
        public Boolean SBQQ_NonDiscountable_c {get;set;} 
        public Boolean SBQQ_NonPartnerDiscountable_c {get;set;} 
        public Boolean SBQQ_Optional_c {get;set;} 
        public String SBQQ_OptionType_c {get;set;} 
        public Integer SBQQ_BundledQuantity_c {get;set;} 
        public Boolean SBQQ_Bundle_c {get;set;} 
        public Integer SBQQ_PartnerPrice_c {get;set;} 
        public Boolean SBQQ_PriceEditable_c {get;set;} 
        public Integer SBQQ_ProratedListPrice_c {get;set;} 
        public String SBQQ_PricingMethod_c {get;set;} 
        public Boolean SBQQ_PricingMethodEditable_c {get;set;} 
        public Integer SBQQ_ProrateMultiplier_c {get;set;} 
        public Integer SBQQ_Quantity_c {get;set;} 
        public Integer SBQQ_SpecialPrice_c {get;set;} 
        public String SBQQ_SubscriptionBase_c {get;set;} 
        public String SBQQ_SubscriptionCategory_c {get;set;} 
        public Integer SBQQ_SubscriptionPercent_c {get;set;} 
        public String SBQQ_SubscriptionPricing_c {get;set;} 
        public String SBQQ_SubscriptionScope_c {get;set;} 
        public Boolean SBQQ_Renewal_c {get;set;} 
        public Integer SBQQ_ProratedPrice_c {get;set;} 
        public Boolean SBQQ_Taxable_c {get;set;} 
        public Integer SBQQ_Uplift_c {get;set;} 
        public Integer SBQQ_UpliftAmount_c {get;set;} 
        public Boolean SBQQ_ComponentUpliftedByPackage_c {get;set;} 
        public String SBQQ_ProductName_c {get;set;} 
        public Boolean SBQQ_Existing_c {get;set;} 
        public Integer SBQQ_OptionLevel_c {get;set;} 
        public Boolean SBQQ_CarryoverLine_c {get;set;} 
        public Boolean SBQQ_AllowAssetRefund_c {get;set;} 
        public Integer SBQQ_RegularPrice_c {get;set;} 
        public Integer MRR_c {get;set;} 
        public Integer ARR_c {get;set;} 
        public Integer Optional_Subtotal_c {get;set;} 
        public Boolean SBQQ_CostEditable_c {get;set;} 
        public Boolean SBQQ_Hidden_c {get;set;} 
        public String SBQQ_ProductCode_c {get;set;} 
        public Boolean Shippable_c {get;set;} 
        public Integer Total_MBPs_c {get;set;} 
        public Integer SBQQ_EffectiveQuantity_c {get;set;} 
        public Integer SBQQ_Markup_c {get;set;} 
        public String SBQQ_Product_r {get;set;} 
        public String SBQQ_ProductOption_r {get;set;} 
        public String SBQQ_Source_c {get;set;} 
        public Integer SBQQ_SegmentIndex_c {get;set;} 
        public String SBQQ_SegmentLabel_c {get;set;} 
        public String SBQQ_SegmentKey_c {get;set;} 
        public String SBQQ_Dimension_c {get;set;} 
        public String SBQQ_GenerateContractedPrice_c {get;set;} 
        public Integer SBQQ_AdditionalDiscountAmount_c {get;set;} 
        public Integer SBQQ_AdditionalQuantity_c {get;set;} 
        public Integer SBQQ_BatchQuantity_c {get;set;} 
        public String SBQQ_BillingType_c {get;set;} 
        public Integer SBQQ_CompoundDiscountRate_c {get;set;} 
        public Integer SBQQ_ContractedPrice_c {get;set;} 
        public Integer SBQQ_Cost_c {get;set;} 
        public String SBQQ_DiscountSchedule_c {get;set;} 
        public Integer SBQQ_DistributorDiscount_c {get;set;} 
        public String SBQQ_EndDate_c {get;set;} 
        public Integer SBQQ_MarkupRate_c {get;set;} 
        public Integer SBQQ_MarkupAmount_c {get;set;} 
        public Integer SBQQ_MaximumPrice_c {get;set;} 
        public Integer SBQQ_MinimumPrice_c {get;set;} 
        public String SBQQ_OptionDiscount_c {get;set;} 
        public Integer SBQQ_OptionDiscountAmount_c {get;set;} 
        public Integer SBQQ_PartnerDiscount_c {get;set;} 
        public String SBQQ_RenewedAsset_c {get;set;} 
        public String SBQQSC_RenewedContractLine_c {get;set;} 
        public String SBQQ_SpecialPriceType_c {get;set;} 
        public String SBQQ_StartDate_c {get;set;} 
        public Integer SBQQ_OriginalUnitCost_c {get;set;} 
        public String SBQQ_SubscribedAssetIds_c {get;set;} 
        public Integer SBQQ_SubscriptionTargetPrice_c {get;set;} 
        public Integer SBQQ_SubscriptionTerm_c {get;set;} 
        public String SBQQ_TermDiscountSchedule_c {get;set;} 
        public Integer SBQQ_UnitCost_c {get;set;} 
        public Integer SBQQ_ComponentTotal_c {get;set;} 
        public Integer SBQQ_ComponentCost_c {get;set;} 
        public Integer SBQQ_ComponentListTotal_c {get;set;} 
        public String SBQQ_DiscountScheduleType_c {get;set;} 
        public String SBQQ_PackageProductCode_c {get;set;} 
        public String SBQQ_DiscountTier_c {get;set;} 
        public Integer SBQQ_VolumeDiscount_c {get;set;} 
        public String SBQQ_BlockPrice_c {get;set;} 
        public String SBQQ_TermDiscountTier_c {get;set;} 
        public Integer SBQQ_TermDiscount_c {get;set;} 
        public Integer SBQQ_PriorQuantity_c {get;set;} 
        public Integer SBQQ_PreviousSegmentPrice_c {get;set;} 
        public Integer SBQQ_PreviousSegmentUplift_c {get;set;} 
        public Integer SBQQ_GrossProfit_c {get;set;} 
        public String SBQQ_PackageProductDescription_c {get;set;} 
        public Integer SBQQ_UpgradedQuantity_c {get;set;} 
        public String SBQQ_BillingFrequency_c {get;set;} 
        public String SBQQ_ChargeType_c {get;set;} 
        public String SBQQ_OriginalQuoteLineId_c {get;set;} 
        public String SBQQ_TaxCode_c {get;set;} 
        public String SBQQ_UpgradedAsset_c {get;set;} 
        public String SBQQSC_UpgradedContractLine_c {get;set;} 
        public String Service_Level_c {get;set;} 
        public String SBQQ_Description_c {get;set;} 
        public String SBQQ_Favorite_c {get;set;} 
        public Integer Current_Quantity_c {get;set;} 
        public String Subscription_Upgrade_Source_c {get;set;} 
        public Integer MBPs_c {get;set;} 
        public String Asset_c {get;set;} 
        public String Asset_Serial_Number_c {get;set;} 
        public String SBQQ_RequiredBy_r {get;set;} 
        public String SBQQ_Group_r {get;set;} 
        public String SBQQ_Quote_r {get;set;} 
        public String SBQQ_TermDiscountSchedule_r {get;set;} 
        public String SBQQ_DiscountSchedule_r {get;set;} 
        public String SBQQ_ContractedPrice_r {get;set;} 

        public Line(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'CurrencyIsoCode') {
                            CurrencyIsoCode = parser.getText();
                        } else if (text == 'SBQQ_Quote_c') {
                            SBQQ_Quote_c = parser.getText();
                        } else if (text == 'SBQQ_RequiredBy_c') {
                            SBQQ_RequiredBy_c = parser.getText();
                        } else if (text == 'SBQQ_Product_c') {
                            SBQQ_Product_c = parser.getText();
                        } else if (text == 'SBQQ_ProductOption_c') {
                            SBQQ_ProductOption_c = parser.getText();
                        } else if (text == 'SBQQ_Number_c') {
                            SBQQ_Number_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_DynamicOptionId_c') {
                            SBQQ_DynamicOptionId_c = parser.getText();
                        } else if (text == 'SBQQ_AdditionalDiscount_c') {
                            SBQQ_AdditionalDiscount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_Bundled_c') {
                            SBQQ_Bundled_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_ComponentDiscountedByPackage_c') {
                            SBQQ_ComponentDiscountedByPackage_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_ComponentSubscriptionScope_c') {
                            SBQQ_ComponentSubscriptionScope_c = parser.getText();
                        } else if (text == 'SBQQ_CustomerPrice_c') {
                            SBQQ_CustomerPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_DefaultSubscriptionTerm_c') {
                            SBQQ_DefaultSubscriptionTerm_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_ListPrice_c') {
                            SBQQ_ListPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_OriginalPrice_c') {
                            SBQQ_OriginalPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_NetPrice_c') {
                            SBQQ_NetPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_NetTotal_c') {
                            SBQQ_NetTotal_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_NonDiscountable_c') {
                            SBQQ_NonDiscountable_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_NonPartnerDiscountable_c') {
                            SBQQ_NonPartnerDiscountable_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_Optional_c') {
                            SBQQ_Optional_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_OptionType_c') {
                            SBQQ_OptionType_c = parser.getText();
                        } else if (text == 'SBQQ_BundledQuantity_c') {
                            SBQQ_BundledQuantity_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_Bundle_c') {
                            SBQQ_Bundle_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_PartnerPrice_c') {
                            SBQQ_PartnerPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PriceEditable_c') {
                            SBQQ_PriceEditable_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_ProratedListPrice_c') {
                            SBQQ_ProratedListPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PricingMethod_c') {
                            SBQQ_PricingMethod_c = parser.getText();
                        } else if (text == 'SBQQ_PricingMethodEditable_c') {
                            SBQQ_PricingMethodEditable_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_ProrateMultiplier_c') {
                            SBQQ_ProrateMultiplier_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_Quantity_c') {
                            SBQQ_Quantity_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_SpecialPrice_c') {
                            SBQQ_SpecialPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_SubscriptionBase_c') {
                            SBQQ_SubscriptionBase_c = parser.getText();
                        } else if (text == 'SBQQ_SubscriptionCategory_c') {
                            SBQQ_SubscriptionCategory_c = parser.getText();
                        } else if (text == 'SBQQ_SubscriptionPercent_c') {
                            SBQQ_SubscriptionPercent_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_SubscriptionPricing_c') {
                            SBQQ_SubscriptionPricing_c = parser.getText();
                        } else if (text == 'SBQQ_SubscriptionScope_c') {
                            SBQQ_SubscriptionScope_c = parser.getText();
                        } else if (text == 'SBQQ_Renewal_c') {
                            SBQQ_Renewal_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_ProratedPrice_c') {
                            SBQQ_ProratedPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_Taxable_c') {
                            SBQQ_Taxable_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_Uplift_c') {
                            SBQQ_Uplift_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_UpliftAmount_c') {
                            SBQQ_UpliftAmount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_ComponentUpliftedByPackage_c') {
                            SBQQ_ComponentUpliftedByPackage_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_ProductName_c') {
                            SBQQ_ProductName_c = parser.getText();
                        } else if (text == 'SBQQ_Existing_c') {
                            SBQQ_Existing_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_OptionLevel_c') {
                            SBQQ_OptionLevel_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_CarryoverLine_c') {
                            SBQQ_CarryoverLine_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_AllowAssetRefund_c') {
                            SBQQ_AllowAssetRefund_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_RegularPrice_c') {
                            SBQQ_RegularPrice_c = parser.getIntegerValue();
                        } else if (text == 'MRR_c') {
                            MRR_c = parser.getIntegerValue();
                        } else if (text == 'ARR_c') {
                            ARR_c = parser.getIntegerValue();
                        } else if (text == 'Optional_Subtotal_c') {
                            Optional_Subtotal_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_CostEditable_c') {
                            SBQQ_CostEditable_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_Hidden_c') {
                            SBQQ_Hidden_c = parser.getBooleanValue();
                        } else if (text == 'SBQQ_ProductCode_c') {
                            SBQQ_ProductCode_c = parser.getText();
                        } else if (text == 'Shippable_c') {
                            Shippable_c = parser.getBooleanValue();
                        } else if (text == 'Total_MBPs_c') {
                            Total_MBPs_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_EffectiveQuantity_c') {
                            SBQQ_EffectiveQuantity_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_Markup_c') {
                            SBQQ_Markup_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_Product_r') {
                            SBQQ_Product_r = parser.getText();
                        } else if (text == 'SBQQ_ProductOption_r') {
                            SBQQ_ProductOption_r = parser.getText();
                        } else if (text == 'SBQQ_Source_c') {
                            SBQQ_Source_c = parser.getText();
                        } else if (text == 'SBQQ_SegmentIndex_c') {
                            SBQQ_SegmentIndex_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_SegmentLabel_c') {
                            SBQQ_SegmentLabel_c = parser.getText();
                        } else if (text == 'SBQQ_SegmentKey_c') {
                            SBQQ_SegmentKey_c = parser.getText();
                        } else if (text == 'SBQQ_Dimension_c') {
                            SBQQ_Dimension_c = parser.getText();
                        } else if (text == 'SBQQ_GenerateContractedPrice_c') {
                            SBQQ_GenerateContractedPrice_c = parser.getText();
                        } else if (text == 'SBQQ_AdditionalDiscountAmount_c') {
                            SBQQ_AdditionalDiscountAmount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_AdditionalQuantity_c') {
                            SBQQ_AdditionalQuantity_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_BatchQuantity_c') {
                            SBQQ_BatchQuantity_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_BillingType_c') {
                            SBQQ_BillingType_c = parser.getText();
                        } else if (text == 'SBQQ_CompoundDiscountRate_c') {
                            SBQQ_CompoundDiscountRate_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_ContractedPrice_c') {
                            SBQQ_ContractedPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_Cost_c') {
                            SBQQ_Cost_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_DiscountSchedule_c') {
                            SBQQ_DiscountSchedule_c = parser.getText();
                        } else if (text == 'SBQQ_DistributorDiscount_c') {
                            SBQQ_DistributorDiscount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_EndDate_c') {
                            SBQQ_EndDate_c = parser.getText();
                        } else if (text == 'SBQQ_MarkupRate_c') {
                            SBQQ_MarkupRate_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_MarkupAmount_c') {
                            SBQQ_MarkupAmount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_MaximumPrice_c') {
                            SBQQ_MaximumPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_MinimumPrice_c') {
                            SBQQ_MinimumPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_OptionDiscount_c') {
                            SBQQ_OptionDiscount_c = parser.getText();
                        } else if (text == 'SBQQ_OptionDiscountAmount_c') {
                            SBQQ_OptionDiscountAmount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PartnerDiscount_c') {
                            SBQQ_PartnerDiscount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_RenewedAsset_c') {
                            SBQQ_RenewedAsset_c = parser.getText();
                        } else if (text == 'SBQQSC_RenewedContractLine_c') {
                            SBQQSC_RenewedContractLine_c = parser.getText();
                        } else if (text == 'SBQQ_SpecialPriceType_c') {
                            SBQQ_SpecialPriceType_c = parser.getText();
                        } else if (text == 'SBQQ_StartDate_c') {
                            SBQQ_StartDate_c = parser.getText();
                        } else if (text == 'SBQQ_OriginalUnitCost_c') {
                            SBQQ_OriginalUnitCost_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_SubscribedAssetIds_c') {
                            SBQQ_SubscribedAssetIds_c = parser.getText();
                        } else if (text == 'SBQQ_SubscriptionTargetPrice_c') {
                            SBQQ_SubscriptionTargetPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_SubscriptionTerm_c') {
                            SBQQ_SubscriptionTerm_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_TermDiscountSchedule_c') {
                            SBQQ_TermDiscountSchedule_c = parser.getText();
                        } else if (text == 'SBQQ_UnitCost_c') {
                            SBQQ_UnitCost_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_ComponentTotal_c') {
                            SBQQ_ComponentTotal_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_ComponentCost_c') {
                            SBQQ_ComponentCost_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_ComponentListTotal_c') {
                            SBQQ_ComponentListTotal_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_DiscountScheduleType_c') {
                            SBQQ_DiscountScheduleType_c = parser.getText();
                        } else if (text == 'SBQQ_PackageProductCode_c') {
                            SBQQ_PackageProductCode_c = parser.getText();
                        } else if (text == 'SBQQ_DiscountTier_c') {
                            SBQQ_DiscountTier_c = parser.getText();
                        } else if (text == 'SBQQ_VolumeDiscount_c') {
                            SBQQ_VolumeDiscount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_BlockPrice_c') {
                            SBQQ_BlockPrice_c = parser.getText();
                        } else if (text == 'SBQQ_TermDiscountTier_c') {
                            SBQQ_TermDiscountTier_c = parser.getText();
                        } else if (text == 'SBQQ_TermDiscount_c') {
                            SBQQ_TermDiscount_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PriorQuantity_c') {
                            SBQQ_PriorQuantity_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PreviousSegmentPrice_c') {
                            SBQQ_PreviousSegmentPrice_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PreviousSegmentUplift_c') {
                            SBQQ_PreviousSegmentUplift_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_GrossProfit_c') {
                            SBQQ_GrossProfit_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_PackageProductDescription_c') {
                            SBQQ_PackageProductDescription_c = parser.getText();
                        } else if (text == 'SBQQ_UpgradedQuantity_c') {
                            SBQQ_UpgradedQuantity_c = parser.getIntegerValue();
                        } else if (text == 'SBQQ_BillingFrequency_c') {
                            SBQQ_BillingFrequency_c = parser.getText();
                        } else if (text == 'SBQQ_ChargeType_c') {
                            SBQQ_ChargeType_c = parser.getText();
                        } else if (text == 'SBQQ_OriginalQuoteLineId_c') {
                            SBQQ_OriginalQuoteLineId_c = parser.getText();
                        } else if (text == 'SBQQ_TaxCode_c') {
                            SBQQ_TaxCode_c = parser.getText();
                        } else if (text == 'SBQQ_UpgradedAsset_c') {
                            SBQQ_UpgradedAsset_c = parser.getText();
                        } else if (text == 'SBQQSC_UpgradedContractLine_c') {
                            SBQQSC_UpgradedContractLine_c = parser.getText();
                        } else if (text == 'Service_Level_c') {
                            Service_Level_c = parser.getText();
                        } else if (text == 'SBQQ_Description_c') {
                            SBQQ_Description_c = parser.getText();
                        } else if (text == 'SBQQ_Favorite_c') {
                            SBQQ_Favorite_c = parser.getText();
                        } else if (text == 'Current_Quantity_c') {
                            Current_Quantity_c = parser.getIntegerValue();
                        } else if (text == 'Subscription_Upgrade_Source_c') {
                            Subscription_Upgrade_Source_c = parser.getText();
                        } else if (text == 'MBPs_c') {
                            MBPs_c = parser.getIntegerValue();
                        } else if (text == 'Asset_c') {
                            Asset_c = parser.getText();
                        } else if (text == 'Asset_Serial_Number_c') {
                            Asset_Serial_Number_c = parser.getText();
                        } else if (text == 'SBQQ_RequiredBy_r') {
                            SBQQ_RequiredBy_r = parser.getText();
                        } else if (text == 'SBQQ_Group_r') {
                            SBQQ_Group_r = parser.getText();
                        } else if (text == 'SBQQ_Quote_r') {
                            SBQQ_Quote_r = parser.getText();
                        } else if (text == 'SBQQ_TermDiscountSchedule_r') {
                            SBQQ_TermDiscountSchedule_r = parser.getText();
                        } else if (text == 'SBQQ_DiscountSchedule_r') {
                            SBQQ_DiscountSchedule_r = parser.getText();
                        } else if (text == 'SBQQ_ContractedPrice_r') {
                            SBQQ_ContractedPrice_r = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Line consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class OptionConfigurations {
        public List<Options> Option1 {get;set;} 
        public List<Options> Option2 {get;set;} 
        public List<Options> Option3 {get;set;} 
        public List<Options> Option4 {get;set;} 
        public List<Options> Option5 {get;set;} 
        public List<Options> Option6 {get;set;} 

        public OptionConfigurations(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Option1') {
                            Option1 = new List<Options>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Option1.add(new Options(parser));
                            }
                        } else if (text == 'Option2') {
                            Option2 = new List<Options>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Option2.add(new Options(parser));
                            }
                        } else if (text == 'Option3') {
                            Option3 = new List<Options>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Option3.add(new Options(parser));
                            }
                        } else if (text == 'Option4') {
                            Option4 = new List<Options>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Option4.add(new Options(parser));
                            }
                        } else if (text == 'Option5') {
                            Option5 = new List<Options>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Option5.add(new Options(parser));
                            }
                        } else if (text == 'Option6') {
                            Option6 = new List<Options>();
                            while (parser.nextToken() != JSONToken.END_ARRAY) {
                                Option6.add(new Options(parser));
                            }
                        } else {
                            System.debug(LoggingLevel.WARN, 'OptionConfigurations consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class SBQQ_Account_r {
        public Attributes attributes {get;set;} 
        public String Name {get;set;} 
        public String SBQQ_RenewalModel_c {get;set;} 
        public String Id {get;set;} 
        public String CurrencyIsoCode {get;set;} 

        public SBQQ_Account_r(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'attributes') {
                            attributes = new Attributes(parser);
                        } else if (text == 'Name') {
                            Name = parser.getText();
                        } else if (text == 'SBQQ_RenewalModel_c') {
                            SBQQ_RenewalModel_c = parser.getText();
                        } else if (text == 'Id') {
                            Id = parser.getText();
                        } else if (text == 'CurrencyIsoCode') {
                            CurrencyIsoCode = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'SBQQ_Account_r consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static QuoteConfig parse(String json) {
        return new QuoteConfig(System.JSON.createParser(json));
    }
}